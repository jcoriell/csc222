---
title: Piping
---

```c
#include <stdio.h>
#include <unistd.h>

int main(){

    // create the array for file descriptors 
    // for the two ends of the pipe
    // fd[0] is the read end of the pipe
    // fd[1] is the write end of the pipe
    // a file descriptor is an integer that references some bits
    int fd[2];

    // pipe takes in the file descriptor array
    pipe(fd); // returns 0 on success, -1 on failure

    pid_t pid = fork();
    if (pid == 0){
        //// child process

        // close the read end (since we are writing here)
        close(fd[0]);
        int x;
        printf("(child) Give me an int: \n");
        scanf("%d", &x);

        // write the data to the pipe
        write(fd[1], &x, sizeof(int));

        // close the write end
        close(fd[1]);
    
    } else {
        //// main process
        // close the write end
        close(fd[1]);

        int y;
        read(fd[0], &y, sizeof(int));
        printf("(parent) Received from child: %d\n", y);

        // close the read end
        close(fd[0]);
    }

    return 0;
}
```