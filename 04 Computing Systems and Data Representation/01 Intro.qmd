---
title: Representing Programs 
---

## Representing a Program as Bits

Computing Layer:

A computer system consists of hardware and system software that work together to run application programs
for a user. A computer system consists of the following:
- users
- applications
- the operating system
- system utilities
- hardware abstraction
- hardware

Consider the following code, we will reference it as `hello.c`:

```c
#include <stdio.h>

int main(){
    printf("Hello World\n");
    return 0;
}
```

The program begins as a 'source file' that is created and modified by a programmer and saved as a text file (`hello.c`). The source file (or program) is a sequence of bits, each with values of 0 or 1. These are usually organized in 8-bit chunks called bytes. Each byte represents some text character in the program. Most modern systems represent text characters using the ASCII standard that represents each character with a unique byte-sized integer. This holds true for our hello.c program. 

Each byte has an integer value that corresponds to some character

```text
(#   i   n   c   l   u   d   e  )
(35  105 110 99  108 117 100 101)
```

Files such as our hello.c program file that contain exclusively ascii characters are known as `text files`, all others are known as `binary files`. 

All information information in a system including disk files, programs stored in memory is represented in a bit format. The bits are translated for us to represent characters, unsigned/positive integers, floating point numbers, negative integers, and so on.

## The Compilation Process

Writing the program in a language such as C makes it easier for humans to read and understand. However, for the system it must translate the individual C statements into a sequence of low-level machine instructions.

This translation process consists of four phases, known as the 'compilation system'

### Phase 1: Preprocessing

- You can find the preprocessor on your machine by running the command `which cpp`. 

- The preprocessor modifies the original C program according to directives included in the program. These are the statements at the top that begin with the # character. For example, the `#include <stdio.h>` command in line 1 of `hello.c` tells the preprocessor to read the contents of the system header file `stdio.h`
and insert it directly into the program text.

- Preprocessor Input: hello.c

- Preprocessor Output: hello.i

- You can read more about the preprocessor by running the command `man cpp`.

- To stop the compilation process at this step, use the `-E` flag when compiling your program. Ex: `gcc hello.c -E -o hello.i`. Doing so will allow you to see what c code is inserted into your program from the directives.


### Phase 2: Compilation 

- You can find the compiler on your machine by running the command `which cc`.

- The compiler translates the text file `hello.i` into the text file `hello.s`, which contains 'assembly-language' program instructions. Each statement in an assembly-language program describes one low-level 'machine-language' instruction in a standard text form.

- Compiler Input: hello.i

- Compiler Output: hello.s

- To stop the compilation process at this step, use the `-S` flag when compiling your program. Ex: `gcc hello.c -S -o hello.s`. Doing so will allow you to view the assembly code produced from your program.

### Phase 3: Assembling

- The command `which as` will show you where the assembler is on your machine.

- The assembler translates `hello.s` into machine language instructions, packages them in a form known as a 'relocatable object program', and stores the result in the object file hello.o. The hello.o file is a binary file whose bytes encode machine language instructions rather than characters. If we were to view hello.o with a text editor, it would appear to be gibberish.

- Assembler input: hello.s

- Assembler output: hello.o

- To stop the compilation process at this step, use the `-c` flag when compiling your program. Ex: `gcc hello.c -S -o hello.o`. Doing so will allow you to make an attempt to look at the gibberish produced.

### Linking phase:

- The command `which ld` will show you where the assembler is on your machine.

- Notice that our hello program calls the `printf` function, which is part of the standard C library provided by every C compiler. The `printf` function resides in a separate precompiled object file called `printf.o`, which must somehow be merged with our `hello.o` program. The linker (ld) handles this merging. The result is the hello file, which is an 'executable object file' (or an executable) that is ready to be loaded into memory and executed by the system.

- Linker input: hello.o

- Linker output: hello (executable file)

- To stop the compilation process after this step, just compile like you have previously. Ex: `gcc hello.c -o hello`.


## Hardware Interactions

- At this point, our hello.c source program has been translated by the 'compilation system'
into an executable object file called hello, that is stored on the disk. 

- To run the executable file on a Unix system, we type its name into an application 
known as a shell:

```sh
$ ./hello
```

- To understand what happens to our hello program when we run it, we need to understand 
the hardware organization of a typical system.

### Buses
- Running throughout the system is a collection of electical conduits called Buses
that carry bytes of information back and forth between components.
- Busses are typically designed to transfer fixed-sized chunks of data- most machines
now have either 4-byte (32 bit) or 8-byte (64 bit) sized buses.

### I/O Devices
- Input/Output (I/O) devices are the system's connection to the external world.
- Our example system has 4 I/O devices: Keyboard, mouse, display, and disk.
- Initially, the executable hello program resides on the disk.

### Main Memory (RAM)
- The main memory is a temporary storage device that holds both a program and the data
it manipulates while the processor is executing the program.

### Processor
- The central processing unit (CPU), or just processor, is the engine, or brain that 
executes instructions stored in main memory.
- At its core is a register called the 'program counter' (PC). At any point in time, the PC
points at (contains the address of) some machine language instruction in main memory.
- From the time that power is applied to the system until power is shut off, a processor 
repeatedly executes the instruction pointed at by the PC, and the PC updates to the PC 
that points to the next instruction.
- The processor 'reads' the instruction, from memory pointed at by the PC, 'interprets' the
bits in the instruction, 'performs' some simple operation dictated by the instruction, and
then 'updates' the PC to point to the next instruction.

## The Role of the OS

- When the shell loaded and ran the hello program, and when the hello program printed its 
message, neither program accessed the keyboard, display, disk, or main memory directly.
Rather, they relied on the services provided by the operating system.

- We can think of the operating system as a layer of software interposed between the 
application program and the hardware. All attempts by an application program to manipulate
the hardware must go through the operating system.

- The operating system has two primary purposes:
    1. To protect the hardware from misuse by runaway applications;
    2. To provide applications with simple uniform mechanisms for manipulating complicated
    and often wildly different low-level hardware devices.

- The operating system achieves both goals via the fundamental abstractions:
    - processes
    - virtual memory
    - files

Processes
- a process is the operating systems abstraction for a running program
- multiple processes can run concurrently on the same system, and each process
appears to have exclusive use of the hardware

Virtual Memory
- Virtual memory is an abstraction that provides each process with the illusion
that is has exclusive use of the main memory

Files
- A file is a sequence of bytes, nothing more, nothing less.
- Every I/O device (disks, keyboards, displays) is modeled as a file
- All input and output in the system is performed by reading and writing files, using a 
small set of 'system calls' known as Unix I/O 

Summary:
- A computer system consists of hardware and system software to cooperate to run 
application programs
- Information inside the computer is represented as a group of bits that can be 
interpreted in different ways depending on context.
- Programs are translated by other programs into different forms (compilation), beginning
as ASCII text and then translated into binary executable files.
- Processors read and interpret binary instructions that are stored in main memory.
- The operating system serves as an intermediary between the applications and the hardware
- Operating Systems provide three fundamental abstractions
    1. Files that are abstractions for I/O devices
    2. Virtual Memory is an abstraction for both main memory and disks
    3. Processes are abstractions for the processor, main memory, and I/O devices