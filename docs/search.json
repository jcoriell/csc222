[
  {
    "objectID": "07 Assembly Primer/02 Register Conventions.html",
    "href": "07 Assembly Primer/02 Register Conventions.html",
    "title": "Register Usage Conventions",
    "section": "",
    "text": "Assume Function A calls Function B. Then A is the caller and B is the callee.\n\n\n\nRegister\nConvention\nCallee or Caller Owned?\n\n\n\n\na\nreturn value\ncallee owned\n\n\nb\nlocal variable\ncaller owned\n\n\nc\n4th argument\ncallee owned\n\n\nd\n3rd argument\ncallee owned\n\n\nsi\n2nd argument\ncallee owned\n\n\ndi\n1st argument\ncallee owned\n\n\nbp\nlocal var\ncaller owned\n\n\nsp\nstack pointer\ncaller owned\n\n\nr8\n5th argument\ncallee owned\n\n\nr9\n6th argument\ncallee owned\n\n\nr10\nscratch/temp\ncallee owned\n\n\nr11\nscratch/temp\ncallee owned\n\n\nr12\nlocal var\ncaller owned\n\n\nr13\nlocal var\ncaller owned\n\n\nr14\nlocal var\ncaller owned\n\n\nr15\nlocal var\ncaller owned\n\n\n\n\n\nNotes\n\nCallee Owned / Caller Saved / Call Clobbered – used for temporary quantities.\nCaller Owned / Caller Saved / Call Preserved – used for values needed across calls.",
    "crumbs": [
      "07 Assembly Primer",
      "Register Usage Conventions"
    ]
  },
  {
    "objectID": "06 Bash Scripting/05-Case.html",
    "href": "06 Bash Scripting/05-Case.html",
    "title": "Case",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# The case construct is like a switch case\n# Begin with case and then list out the options\n# End with esac (case backwards)\n\n# Example: \n\n# Provide a prompt with options\necho \"What is your favorite food? \"\n\necho \"1 - Pizza\"\necho \"2 - Chicken\"\necho \"3 - Burgers\"\n\n# Read in the response (a 1, 2, or 3)\nread food;\n\ncase $food in \n   1) echo \"Pizza is a great choice\";;    # The ;; marks the end of a case block\n   2) echo \"You chose chicken\"            # You can have multiple commands per case\n      echo \"Mmm. Canes, Popeyes, yes.\"\n      ;;\n   3) echo \"Burgers are great!\";;\n   *) echo \"That wasn't an option\";;  # use * for default\nesac",
    "crumbs": [
      "06 Bash Scripting",
      "Case"
    ]
  },
  {
    "objectID": "06 Bash Scripting/05-Case.html#example-with-numeric-options",
    "href": "06 Bash Scripting/05-Case.html#example-with-numeric-options",
    "title": "Case",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# The case construct is like a switch case\n# Begin with case and then list out the options\n# End with esac (case backwards)\n\n# Example: \n\n# Provide a prompt with options\necho \"What is your favorite food? \"\n\necho \"1 - Pizza\"\necho \"2 - Chicken\"\necho \"3 - Burgers\"\n\n# Read in the response (a 1, 2, or 3)\nread food;\n\ncase $food in \n   1) echo \"Pizza is a great choice\";;    # The ;; marks the end of a case block\n   2) echo \"You chose chicken\"            # You can have multiple commands per case\n      echo \"Mmm. Canes, Popeyes, yes.\"\n      ;;\n   3) echo \"Burgers are great!\";;\n   *) echo \"That wasn't an option\";;  # use * for default\nesac",
    "crumbs": [
      "06 Bash Scripting",
      "Case"
    ]
  },
  {
    "objectID": "06 Bash Scripting/05-Case.html#non-numeric-example",
    "href": "06 Bash Scripting/05-Case.html#non-numeric-example",
    "title": "Case",
    "section": "Non-numeric Example",
    "text": "Non-numeric Example\n#!/usr/bin/env bash\n\n# The options do not have to be numbers, it can be any pattern.\n\n# Example: \n\n# Provide a prompt with options\nprintf \"What do you drive? \"\n\n# Read in the response\nread vehicle;\n\n\ncase $vehicle in \n   car) \n      echo \"You drive a car.\"        \n      echo \"Is there a car directory in this folder?\"\n      if [[ -d \"car\" ]]\n      then\n         echo \"There is\"\n      else\n         echo \"There is not\"\n      fi\n      ;;\n   truck) \n      echo \"You drive a truck\";;\n   van) \n      echo \"You drive a van\";;\n   *) \n      echo \"That wasn't an option\";;\nesac",
    "crumbs": [
      "06 Bash Scripting",
      "Case"
    ]
  },
  {
    "objectID": "06 Bash Scripting/04-Exit-Codes.html",
    "href": "06 Bash Scripting/04-Exit-Codes.html",
    "title": "Exit Codes",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# The    $?    variable holds the exit code from the last command\n\n# Typically we use 0 for a success.\n# Values 1 - 255 are used for other errors.\n# There are some commonly used error codes such as:\n#   127 for command not found\n#   128 for invalid exit argument\n\n# The man command may tell you the meanings of various exit codes depending on the command.\n# Otherwise, you may use internet to search for them.\n\n# Example:\n# Here it should print 0 as the last exit code since nothing comes before this in the script.\necho Holds the last exit code: $?\n\n# Example:\necho \"Example 1: ls -a .\"\nls -a .\necho Exit code from ls $?\necho\n\n# Example:\necho \"Example 2: not a real command\"\nnotacommand -abcdefg .     # causes code 127\necho $? # exit code 127 command not found\necho\n\n# Example: \n# One form of handling errors is with the exit code\necho \"Example 3: Handling Errors with Exit Codes\"\nls notrealdir   # an intentionally fake directory, exit code 1\nif [ $? -gt 0 ] # you can get more specific for specific errors \nthen\n    echo \"Handled Error\"\nelse\n    echo \"ls executed successfully\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "06 Bash Scripting/04-Exit-Codes.html#exit-code",
    "href": "06 Bash Scripting/04-Exit-Codes.html#exit-code",
    "title": "Exit Codes",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# The    $?    variable holds the exit code from the last command\n\n# Typically we use 0 for a success.\n# Values 1 - 255 are used for other errors.\n# There are some commonly used error codes such as:\n#   127 for command not found\n#   128 for invalid exit argument\n\n# The man command may tell you the meanings of various exit codes depending on the command.\n# Otherwise, you may use internet to search for them.\n\n# Example:\n# Here it should print 0 as the last exit code since nothing comes before this in the script.\necho Holds the last exit code: $?\n\n# Example:\necho \"Example 1: ls -a .\"\nls -a .\necho Exit code from ls $?\necho\n\n# Example:\necho \"Example 2: not a real command\"\nnotacommand -abcdefg .     # causes code 127\necho $? # exit code 127 command not found\necho\n\n# Example: \n# One form of handling errors is with the exit code\necho \"Example 3: Handling Errors with Exit Codes\"\nls notrealdir   # an intentionally fake directory, exit code 1\nif [ $? -gt 0 ] # you can get more specific for specific errors \nthen\n    echo \"Handled Error\"\nelse\n    echo \"ls executed successfully\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "06 Bash Scripting/04-Exit-Codes.html#forcing-an-exit",
    "href": "06 Bash Scripting/04-Exit-Codes.html#forcing-an-exit",
    "title": "Exit Codes",
    "section": "Forcing an Exit",
    "text": "Forcing an Exit\n#!/usr/bin/env bash\n\n# The command exit can be used to force your program to exit at a desired time.\nread -p \"What file would you like to remove? \" filename\n\nif [ ! -f $filename ]\nthen\n    echo \"That file does not exist.. exiting.\"\n    exit 1\nfi \n\nrm $filename && echo \"File successfully removed\"",
    "crumbs": [
      "06 Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "06 Bash Scripting/04-Exit-Codes.html#using-the-exit-flag",
    "href": "06 Bash Scripting/04-Exit-Codes.html#using-the-exit-flag",
    "title": "Exit Codes",
    "section": "Using the Exit Flag",
    "text": "Using the Exit Flag\n#!/usr/bin/env bash\n\n# Another option for exiting a program when something fails is to use the \n# -e flag.\n# -e will cause the script to exit if any command fails\n\n\nset -e\n\necho \"This should print\"\n\n# This file/directory doesn't exist, thus it will cause an error.\n# The script will exit\nls fakefile\n\necho \"This won't print\"",
    "crumbs": [
      "06 Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "06 Bash Scripting/06-Loops.html",
    "href": "06 Bash Scripting/06-Loops.html",
    "title": "Loops",
    "section": "",
    "text": "#!/usr/bin/env bash\n\ncounter=0\nwhile [ $counter -le 10 ]\ndo \n    echo $counter\n    # counter=$((counter+1))\n    # ((counter++)) # returns the value of counter before \n    # ((++counter)) # returns the value of counter after\n    ((counter+=1))\n    sleep 0.5\ndone",
    "crumbs": [
      "06 Bash Scripting",
      "Loops"
    ]
  },
  {
    "objectID": "06 Bash Scripting/06-Loops.html#while",
    "href": "06 Bash Scripting/06-Loops.html#while",
    "title": "Loops",
    "section": "",
    "text": "#!/usr/bin/env bash\n\ncounter=0\nwhile [ $counter -le 10 ]\ndo \n    echo $counter\n    # counter=$((counter+1))\n    # ((counter++)) # returns the value of counter before \n    # ((++counter)) # returns the value of counter after\n    ((counter+=1))\n    sleep 0.5\ndone",
    "crumbs": [
      "06 Bash Scripting",
      "Loops"
    ]
  },
  {
    "objectID": "06 Bash Scripting/06-Loops.html#until",
    "href": "06 Bash Scripting/06-Loops.html#until",
    "title": "Loops",
    "section": "Until",
    "text": "Until\n#!/usr/bin/env bash\n\n# The until loop, runs until a condition becomes true\n# Structure:\n# until [ condition ]\n# do\n    # contents\n# done\n\n# Example:\n\nuntil [ -f \"hello.txt\" ]\ndo\n    echo \"Let's make a file named, hello.txt\"\n    read -p \"What would you like to call the file? \" filename\n    touch \"$filename\"  # use the quotes to prevent word splitting in the variable\ndone\n\necho \"Good Job. You may want to delete any other files you created\"",
    "crumbs": [
      "06 Bash Scripting",
      "Loops"
    ]
  },
  {
    "objectID": "06 Bash Scripting/06-Loops.html#for",
    "href": "06 Bash Scripting/06-Loops.html#for",
    "title": "Loops",
    "section": "For",
    "text": "For\n#!/usr/bin/env bash\n\n# traditional for loop\nfor (( i=0 ; i &lt; 5 ; i++ )) # don't forget the spaces\ndo \n    echo \"Counter $i\"\ndone\n\n# for each loops\nfor i in 1 2 3 4 5\ndo\n    echo \"Value: $i\"\ndone \n\n# A range of values\nfor i in {0..5}     # no spaces\ndo \n    echo \"Range: $i\"\ndone \n\n# specify an increment\nfor i in {0..10..2} # count from 0 to 10 by 2 (bash 4+)\ndo \n    echo \"Inc: $i\"\ndone",
    "crumbs": [
      "06 Bash Scripting",
      "Loops"
    ]
  },
  {
    "objectID": "06 Bash Scripting/06-Loops.html#loop-over-files",
    "href": "06 Bash Scripting/06-Loops.html#loop-over-files",
    "title": "Loops",
    "section": "Loop over files",
    "text": "Loop over files\n#!/usr/bin/env bash\n\n# looping over files in this directory\nfor file in *\ndo\n    if [ -f \"$file\" ]\n    then \n        echo $file\n    fi\ndone \n\nparent_dir=\"..\"\nfor directory in $parent_dir/*\ndo\n    if [ -d \"$directory\" ]\n    then \n        echo $directory\n    fi\ndone \n\nabsolute_dir=\"/Users/josh/Desktop\"\nfor directory in $absolute_dir/*\ndo \n    if [ -d \"$directory\" ] \n    then\n        echo $directory\n    fi \ndone",
    "crumbs": [
      "06 Bash Scripting",
      "Loops"
    ]
  },
  {
    "objectID": "06 Bash Scripting/06-Loops.html#loop-over-args",
    "href": "06 Bash Scripting/06-Loops.html#loop-over-args",
    "title": "Loops",
    "section": "Loop over args",
    "text": "Loop over args\n#!/usr/bin/env bash\n\n# recall: to access args use $@\n\nfor arg in $@\ndo \n    echo $arg\ndone",
    "crumbs": [
      "06 Bash Scripting",
      "Loops"
    ]
  },
  {
    "objectID": "06 Bash Scripting/02-Args.html",
    "href": "06 Bash Scripting/02-Args.html",
    "title": "Args",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# you can get individual args passed into a file \n# with $ and a number\n\necho The file name is $0 \necho The first arg is $1 \necho The second arg is $2\n\n\n# The length of args can be found with a #symbol\necho The length of the first arg is ${#1}\n\n# run this file with \"./01 Individual Args.sh\" arg1 arg2",
    "crumbs": [
      "06 Bash Scripting",
      "Args"
    ]
  },
  {
    "objectID": "06 Bash Scripting/02-Args.html#individual-args",
    "href": "06 Bash Scripting/02-Args.html#individual-args",
    "title": "Args",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# you can get individual args passed into a file \n# with $ and a number\n\necho The file name is $0 \necho The first arg is $1 \necho The second arg is $2\n\n\n# The length of args can be found with a #symbol\necho The length of the first arg is ${#1}\n\n# run this file with \"./01 Individual Args.sh\" arg1 arg2",
    "crumbs": [
      "06 Bash Scripting",
      "Args"
    ]
  },
  {
    "objectID": "06 Bash Scripting/02-Args.html#all-args",
    "href": "06 Bash Scripting/02-Args.html#all-args",
    "title": "Args",
    "section": "All Args",
    "text": "All Args\n#!/usr/bin/env bash\n\n\n# You can get all the args as a string with $*\necho \"All the args are $*\" # note that $* is a string\n\n# Or, as an array with $@\necho \"All the args are $@\" # note that $@ is an array\n\n# The total number of args is gotten with $#\necho Total num of args is $#",
    "crumbs": [
      "06 Bash Scripting",
      "Args"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html",
    "href": "01 Linux/vm-install.html",
    "title": "Virtual Machine Install",
    "section": "",
    "text": "This page provides instructions on installing an Ubuntu Virtual Machine regardless of the host system (i.e. whether you have a Windows or Mac x86 machine or an ARM based m-series Mac) using virtual box.",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html#virtual-box-download",
    "href": "01 Linux/vm-install.html#virtual-box-download",
    "title": "Virtual Machine Install",
    "section": "Virtual Box Download",
    "text": "Virtual Box Download\n\nDownload Virtual Box from Oracle by visiting https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html.\nInstall Virtual Box",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html#vm-download",
    "href": "01 Linux/vm-install.html#vm-download",
    "title": "Virtual Machine Install",
    "section": "VM Download",
    "text": "VM Download\nThese instructions were written for use with Ubuntu Server 24.04. Do not update when prompted during the install (it will just slow it down).\n\nDownload the appropriate image for your host machine:\n\nIf you have an x86/amd64 based machine (most Windows machines and Intel based Macs), go here for Ubuntu Server: https://ubuntu.com/download/server\nIf you have an arm based machine (m-series Macs and few Windows machines), go here for Ubuntu Server: https://ubuntu.com/download/server/arm\nYou are welcome to use any other Linux distro, links not provided.\n\nMove the image to the folder for this course on your computer so you can easily find it.",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html#vm-setup",
    "href": "01 Linux/vm-install.html#vm-setup",
    "title": "Virtual Machine Install",
    "section": "VM Setup",
    "text": "VM Setup\n\nCreate a new VM in virtual box by clicking NEW.\nFill out the required information. Here are some notes:\n\nFor the ISO, be sure to select the .iso file downloaded.\nSkip the unattended install by checking the box to skip it.\nBase Memory: Consider using at least 4 GB of your memory (if you have at least 8 GB of ram). This is only setting the max it can use on your machine.\nProcessors: It is up to you how many you want it to be able to use. I chose 4.\nHard Disk: Use 100 GB for storage if you plan on adding a GUI, otherwise 25 is plenty. I highly recommend using a GUI, but you are not required to. If you do not, then you will most likely be using vim or nano to write C and Bash programs. Do not pre-allocate the storage.\n\nClick “Finish” to finish this portion of the setup. This does not install the machine.",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html#installing-and-booting-the-vm",
    "href": "01 Linux/vm-install.html#installing-and-booting-the-vm",
    "title": "Virtual Machine Install",
    "section": "Installing and Booting the VM",
    "text": "Installing and Booting the VM\nNote: At some point during the install you may be asked to update it. This is not required and could take a long time.\n\nBoot the VM by selecting it in the left navigation and clicking “Start”.\nWhen prompted, select “Try to Install Ubuntu”.\nThe install will present lots of options that you can choose to customize. At some point it will ask for a username and password, be sure you remember it. For lack of security, and since it is just for class, consider something simple like your name and 123456.\nOnce it is installed it will prompt to reboot. It’ll ask you to login with the username and password once you reboot.",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html#setting-up-the-gui",
    "href": "01 Linux/vm-install.html#setting-up-the-gui",
    "title": "Virtual Machine Install",
    "section": "Setting Up the GUI",
    "text": "Setting Up the GUI\nIf you installed Ubuntu Desktop, or any other distro that came with a GUI, you can skip this step.\nIf you don’t want a GUI, you can skip this step, but you’ll be using vim/nano to edit files, which is fine but there is a steep learning curve for vim.\nIf you want a GUI (not required, but nice to have), you need to run the following two commands separately:\nsudo apt update\nsudo apt install ubuntu-desktop\nOnce it is done, turn the machine off by closing the window and selecting the option to turn the machine off. Then start the machine and log back in. There should be a GUI at this point.",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install.html#setting-up-your-machine",
    "href": "01 Linux/vm-install.html#setting-up-your-machine",
    "title": "Virtual Machine Install",
    "section": "Setting Up Your Machine",
    "text": "Setting Up Your Machine\nClick the Ubuntu icon in the bottom left corner and find the Terminal application. You can drag and drop the icon to the dock on the left hand side if you want easier access.\nOpen the Terminal (shortcut is ctrl+alt+t) and run the following:\n\nFor programming tools install the build-essential package. This meta-package contains five packages: g++, gcc, make, libc6-dev, and dpkg-dev.\n\ng++ is the GNU compiler for the C++ language\ngcc is the GNU compiler for the C language\nmake is used to interpret “makefiles” which are used to control the build process of projects\nlibc6-dev is a GNU C library\ndpkg-dev is used to upload, build, and unpack Debian source packages\n\nsudo apt install build-essential\nFor vim (VI-iMproved):\nsudo apt install vim\nFor cleanup\nsudo apt autoremove\nsudo apt clean\nsudo apt autoclean\nFor VS Code (if you enjoy using it), follow the instructions here: https://linuxiac.com/how-to-install-vs-code-on-ubuntu-24-04-lts/",
    "crumbs": [
      "01 Linux",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "01 Linux/vm-install-win.html",
    "href": "01 Linux/vm-install-win.html",
    "title": "VM Install On Windows",
    "section": "",
    "text": "In this course you will use a Unix environment. Specifically, you should use the latest LTS release of Ubuntu to ensure you are running the same system as the instructor. If you are using Windows, follow the instructions provided below to install Virtual Box and an Ubuntu virtual machine."
  },
  {
    "objectID": "01 Linux/vm-install-win.html#partitioning-the-drive",
    "href": "01 Linux/vm-install-win.html#partitioning-the-drive",
    "title": "VM Install On Windows",
    "section": "Partitioning the Drive",
    "text": "Partitioning the Drive\n\nNow we will add 4 partitions for /boot, swap, /, and /home to the free space. This setup will result in wiping /boot, /, and swap when updating the OS but /home will not be touched resulting in faster updates (~30 minutes).\n\n\n\nThe partition for /boot stores the Linux kernel images. Set the following parameters.\n        size    2048 MB\n        type    primary\n    location    beginning\n      use as    ext2\n mount point    /boot\n\n\n\nThe partition for the swap area is for memory swap space and hibernation.\n        size    if RAM size &gt;= 4 GB, size = RAM size.\n                otherwise, size = 2x RAM size but no more than 8 GB.\n                Ex: \n                    2 GB RAM: 4 GB swap\n                    4 GB RAM: 4 GB swap\n\n        type    primary\n    location    end\n      use as    swap area\n\n\n\n\n\n\n\nWarning\n\n\n\nThe values in the following image may not match your values\n\n\n\n\nThe partition for / stores the OS, OS configuration files, and applications.\n       size    ~35% of space left\n       type    primary\n   location    beginning\n     use as    ext4\nmount point    /\n\n\n\nThe partition for /home stores your files (application configuration, settings, pictures, etc)\n       size    ~65% (the last portion of free space)\n       type    primary\n   location    beginning\n     use as    ext4\nmount point    /home\n\n\n\nClick Install Now after creating the partitions."
  },
  {
    "objectID": "01 Linux/vm-install-win.html#final-setup",
    "href": "01 Linux/vm-install-win.html#final-setup",
    "title": "VM Install On Windows",
    "section": "Final Setup",
    "text": "Final Setup\n\nSet the timezone to the Chicago timezone (for Central).\nSet the user.\nExample:\n    name: zak\n    computer name: zak-csc222\n    username: zak\n    password: something fairly strong that you will remember\n\n    require my password to log in\n    don't encrypt my home folder\nAfter this it will start installing/copying files.\nReboot into Linux!\nGo to the Additional Steps."
  },
  {
    "objectID": "01 Linux/additional-steps.html",
    "href": "01 Linux/additional-steps.html",
    "title": "Additional Steps",
    "section": "",
    "text": "Open the terminal by clicking on the monitor icon at the bottom-left of the desktop. Or you can click on the “start button” (the LM logo at the bottom-left of the desktop) then, click on System and scroll to Terminal Emulator.\nUpdate the Linux Ubuntu system by running the following three commands.\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get dist-upgrade\nInstall essential build tools (for programming)\nsudo apt-get install build-essential\nInstall Vim (the ubiquitous text editor)\nsudo apt-get install vim\nCleanup the system\nsudo apt-get autoremove\nsudo apt-get clean\nsudo apt-get autoclean\nSet the autorun script when opening up a terminal.\n\nWe’ll first copy the default provided by the OS.\nsudo cp /etc/bash.bashrc ~/.bashrc\nThen, we ensure that we own it (more on this later).\nsudo chown $USER:$USER ~/.bashrc\nFinally, we’ll load it into the current terminal\nsource ~/.bashrc\n\nAdd the following useful aliases to the the ./bashrc file.\n\nOpen ~/.bashrc in one of the following text editors:\n\nVim - opens in the terminal, there is a learning curve with this one\nvim ~/.bashrc\nNano - opens in the terminal, not a strong learning curve. The ^ symbol means ctrl. So ^x means to type ctrl + x\nnano ~/.bashrc\ngedit - a GUI based text editor\ngedit ~/.bashrc\n\nThe following helpful aliases can be added to the end of the file:\nalias c='clear'\nalias h='history'\nalias j='jobs'\nalias ls='ls -CF --group-directories-first --color=auto $*'\nalias lss='ls -Alh $*'\nalias m='more'\nalias p='ps -ef'\nalias ~='cd ~'\n\nFinally, load them into the current terminal via: source ~/.bashrc"
  },
  {
    "objectID": "05 More on C/12-Piping.html",
    "href": "05 More on C/12-Piping.html",
    "title": "Piping",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n\n    // create the array for file descriptors \n    // for the two ends of the pipe\n    // fd[0] is the read end of the pipe\n    // fd[1] is the write end of the pipe\n    // a file descriptor is an integer that references some bits\n    int fd[2];\n\n    // pipe takes in the file descriptor array\n    pipe(fd); // returns 0 on success, -1 on failure\n\n    pid_t pid = fork();\n    if (pid == 0){\n        //// child process\n\n        // close the read end (since we are writing here)\n        close(fd[0]);\n        int x;\n        printf(\"(child) Give me an int: \\n\");\n        scanf(\"%d\", &x);\n\n        // write the data to the pipe\n        write(fd[1], &x, sizeof(int));\n\n        // close the write end\n        close(fd[1]);\n    \n    } else {\n        //// main process\n        // close the write end\n        close(fd[1]);\n\n        int y;\n        read(fd[0], &y, sizeof(int));\n        printf(\"(parent) Received from child: %d\\n\", y);\n\n        // close the read end\n        close(fd[0]);\n    }\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Piping"
    ]
  },
  {
    "objectID": "05 More on C/10-Files.html",
    "href": "05 More on C/10-Files.html",
    "title": "Files",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    FILE *filePtr;\n\n    // provide the path to your file in place of readable.txt\n    filePtr = fopen(\"readable.txt\", \"r\");\n\n    // good practice\n    if (filePtr == NULL){\n        printf(\"the file does not exist\");\n        return 1;\n    }\n\n    char contents[100];\n    /*\n    // reads and prints the first line only\n    fgets(contents, 100, filePtr);\n    printf(\"%s\", contents);\n    */\n\n    // to read more than the first line\n    while (fgets(contents, 100, filePtr)){\n        printf(\"%s\", contents);\n    }\n\n    fclose(filePtr);\n\n    return 0;\n\n}",
    "crumbs": [
      "05 More on C",
      "Files"
    ]
  },
  {
    "objectID": "05 More on C/10-Files.html#reading-files",
    "href": "05 More on C/10-Files.html#reading-files",
    "title": "Files",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    FILE *filePtr;\n\n    // provide the path to your file in place of readable.txt\n    filePtr = fopen(\"readable.txt\", \"r\");\n\n    // good practice\n    if (filePtr == NULL){\n        printf(\"the file does not exist\");\n        return 1;\n    }\n\n    char contents[100];\n    /*\n    // reads and prints the first line only\n    fgets(contents, 100, filePtr);\n    printf(\"%s\", contents);\n    */\n\n    // to read more than the first line\n    while (fgets(contents, 100, filePtr)){\n        printf(\"%s\", contents);\n    }\n\n    fclose(filePtr);\n\n    return 0;\n\n}",
    "crumbs": [
      "05 More on C",
      "Files"
    ]
  },
  {
    "objectID": "05 More on C/09-Sample-Applications.html",
    "href": "05 More on C/09-Sample-Applications.html",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ndouble calculateAvg(int *grades, int size){\n    double average = 0;\n    for (int i =0; i &lt; size; i++){\n        average += grades[i];\n    }\n    average /= size;\n    return average;\n}\n\nint main(){\n    int qty;\n    int *array;\n\n    printf(\"How many grades do you have? \");\n    scanf(\"%d\", &qty);\n\n    // allocate enough space to store the number of grades the \n    // user said they would provide\n    array = malloc(sizeof(int) * qty);\n\n    for (int i=0; i &lt; qty; i++){\n        printf(\"Give me a grade: \");\n        scanf(\"%d\", &array[i]);\n    }\n\n    printf(\"The grades you provided are: \");\n    for (int i = 0; i &lt; qty; i++){\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n\n    // calculate the average\n    double average = calculateAvg(array, qty);\n    printf(\"The average is %.2lf\\n\", average);\n\n    free(array);\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Sample Applications"
    ]
  },
  {
    "objectID": "05 More on C/09-Sample-Applications.html#average",
    "href": "05 More on C/09-Sample-Applications.html#average",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ndouble calculateAvg(int *grades, int size){\n    double average = 0;\n    for (int i =0; i &lt; size; i++){\n        average += grades[i];\n    }\n    average /= size;\n    return average;\n}\n\nint main(){\n    int qty;\n    int *array;\n\n    printf(\"How many grades do you have? \");\n    scanf(\"%d\", &qty);\n\n    // allocate enough space to store the number of grades the \n    // user said they would provide\n    array = malloc(sizeof(int) * qty);\n\n    for (int i=0; i &lt; qty; i++){\n        printf(\"Give me a grade: \");\n        scanf(\"%d\", &array[i]);\n    }\n\n    printf(\"The grades you provided are: \");\n    for (int i = 0; i &lt; qty; i++){\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n\n    // calculate the average\n    double average = calculateAvg(array, qty);\n    printf(\"The average is %.2lf\\n\", average);\n\n    free(array);\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Sample Applications"
    ]
  },
  {
    "objectID": "05 More on C/09-Sample-Applications.html#library-of-books",
    "href": "05 More on C/09-Sample-Applications.html#library-of-books",
    "title": "Sample Applications",
    "section": "Library of Books",
    "text": "Library of Books\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct {\n    char name[255];\n    int birthYear;\n} Author;\n\ntypedef struct{\n    char title[255];\n    Author author;\n    int pubYear;\n} Book;\n\n\nvoid readLine(char *target, int targetSize){\n\n    fgets(target, targetSize, stdin);\n\n    // replace newline with null character\n    size_t length = strlen(target);\n    if (length &gt; 0 && target[length-1] == '\\n'){\n        target[length-1] = '\\0';\n    }\n\n}\n\nint main(){\n    \n    int numBooks;\n    printf(\"Let's build a library. How many books do you plan on adding? \");\n    scanf(\"%d\", &numBooks);\n    getchar(); // reads a single character\n\n    Book *library = malloc(sizeof(Book) * numBooks);\n\n    for (int i=0; i &lt; numBooks; i++){\n        printf(\"Book title: \");\n        readLine(library[i].title, sizeof(library[i].title));\n\n        printf(\"Author: \");\n        readLine(library[i].author.name, sizeof(library[i].author.name));\n\n        printf(\"Pub Year: \");\n        scanf(\"%d\", &library[i].pubYear);\n        getchar();\n\n    }\n\n    printf(\"Here is the infor you provided:\\n\");\n\n    for(int i=0; i &lt; numBooks; i++){\n        printf(\"Title: %s\\n\", library[i].title);\n        printf(\"Author: %s\\n\", library[i].author.name);\n        printf(\"Pub Year: %d\\n\", library[i].pubYear);\n    }\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Sample Applications"
    ]
  },
  {
    "objectID": "05 More on C/08-Structs-and-Unions.html",
    "href": "05 More on C/08-Structs-and-Unions.html",
    "title": "Structs and Unions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// structs are collections of variables of different types\n// the members are like properties/state in Object oriented programming\n// memory is allocated for each member separately\n// all members values can be accessed/used at the same time\n\nstruct Person{\n    int age;        // location of first member is the same as the location of the struct\n    char name[20];  // location of the second member is adjacent to the first\n};\n\nint main(){\n    struct Person bill = {10, \"Bill\"};\n    struct Person amanda = {20, \"Amanda\"};\n\n    // look at bill\n    printf(\"%s is %d years old\\n\", bill.name, bill.age);\n    printf(\"%s is located at %p\\n\", bill.name, &bill);\n    printf(\"%s's age is located at %p\\n\", bill.name, &bill.age);\n    printf(\"%s's name is located at %p\\n\", bill.name, &bill.name);\n\n    // look at amanda\n    printf(\"%s is %d years old\\n\", amanda.name, amanda.age);\n    printf(\"%s is located at %p\\n\", amanda.name, &amanda);\n    printf(\"%s's age is located at %p\\n\", amanda.name, &amanda.age);\n    printf(\"%s's name is located at %p\\n\", amanda.name, &amanda.name);\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "05 More on C/08-Structs-and-Unions.html#structs",
    "href": "05 More on C/08-Structs-and-Unions.html#structs",
    "title": "Structs and Unions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// structs are collections of variables of different types\n// the members are like properties/state in Object oriented programming\n// memory is allocated for each member separately\n// all members values can be accessed/used at the same time\n\nstruct Person{\n    int age;        // location of first member is the same as the location of the struct\n    char name[20];  // location of the second member is adjacent to the first\n};\n\nint main(){\n    struct Person bill = {10, \"Bill\"};\n    struct Person amanda = {20, \"Amanda\"};\n\n    // look at bill\n    printf(\"%s is %d years old\\n\", bill.name, bill.age);\n    printf(\"%s is located at %p\\n\", bill.name, &bill);\n    printf(\"%s's age is located at %p\\n\", bill.name, &bill.age);\n    printf(\"%s's name is located at %p\\n\", bill.name, &bill.name);\n\n    // look at amanda\n    printf(\"%s is %d years old\\n\", amanda.name, amanda.age);\n    printf(\"%s is located at %p\\n\", amanda.name, &amanda);\n    printf(\"%s's age is located at %p\\n\", amanda.name, &amanda.age);\n    printf(\"%s's name is located at %p\\n\", amanda.name, &amanda.name);\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "05 More on C/08-Structs-and-Unions.html#structs-and-pointers",
    "href": "05 More on C/08-Structs-and-Unions.html#structs-and-pointers",
    "title": "Structs and Unions",
    "section": "Structs and Pointers",
    "text": "Structs and Pointers\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nstruct Person{\n    char name[20];\n    int age;\n};\n\nint main(){\n    struct Person amanda = {\"Amanda\", 20};\n    struct Person *amandaPtr = &amanda;\n\n    // -&gt; operator accesses the value at a member via the pointer\n    printf(\"%s's age is %d\\n\", amandaPtr-&gt;name, amandaPtr-&gt;age);\n    \n    // or through indirection (dereferencing)\n    printf(\"%s's age is %d\\n\", (*amandaPtr).name, (*amandaPtr).age);\n}",
    "crumbs": [
      "05 More on C",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "05 More on C/08-Structs-and-Unions.html#struct-with-malloc",
    "href": "05 More on C/08-Structs-and-Unions.html#struct-with-malloc",
    "title": "Structs and Unions",
    "section": "Struct with Malloc",
    "text": "Struct with Malloc\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct {\n    int age;\n    char name[20];\n} Person;\n\nint main(){\n    Person *personPtr;\n\n    personPtr = malloc(sizeof(Person));\n\n    personPtr-&gt;age=30;\n    strcpy(personPtr-&gt;name, \"Buzz Lightyear\");\n\n\n    printf(\"%s's age is %d\\n\", personPtr-&gt;name, personPtr-&gt;age);\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "05 More on C/08-Structs-and-Unions.html#unions",
    "href": "05 More on C/08-Structs-and-Unions.html#unions",
    "title": "Structs and Unions",
    "section": "Unions",
    "text": "Unions\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// unions are collection of variables of different datatypes\n// the members again are kinda like the properties in OOP\n// memory is NOT allocated for each member separately\n// can only access/use one member at a time\n// one common space for all the members\n\nunion Student{\n    float gpa;\n    char name[10];\n};\n\n\nint main(){\n    union Student student;\n    student.gpa = 3.4;\n    // strcpy(student.name, \"Tony\");\n\n    printf(\"gpa: %f\\n\", student.gpa);\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC 222 Systems Programming",
    "section": "",
    "text": "The notes found here are for the Winter quarter of 2025. These notes will be changing periodically during this time period (from December 2024 through February 2025).\nFor an unchanging version of these notes see the previous iteration at https://jcoriell.github.io/csc222-winter-2024/."
  },
  {
    "objectID": "04 Computing Systems and Data Representation/01 Intro.html",
    "href": "04 Computing Systems and Data Representation/01 Intro.html",
    "title": "Representing Programs",
    "section": "",
    "text": "Computing Layer:\nA computer system consists of hardware and system software that work together to run application programs for a user. A computer system consists of the following: - users - applications - the operating system - system utilities - hardware abstraction - hardware\nConsider the following code, we will reference it as hello.c:\n#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"Hello World\\n\");\n    return 0;\n}\nThe program begins as a ‘source file’ that is created and modified by a programmer and saved as a text file (hello.c). The source file (or program) is a sequence of bits, each with values of 0 or 1. These are usually organized in 8-bit chunks called bytes. Each byte represents some text character in the program. Most modern systems represent text characters using the ASCII standard that represents each character with a unique byte-sized integer. This holds true for our hello.c program.\nEach byte has an integer value that corresponds to some character\n(#   i   n   c   l   u   d   e  )\n(35  105 110 99  108 117 100 101)\nFiles such as our hello.c program file that contain exclusively ascii characters are known as text files, all others are known as binary files.\nAll information information in a system including disk files, programs stored in memory is represented in a bit format. The bits are translated for us to represent characters, unsigned/positive integers, floating point numbers, negative integers, and so on.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing Programs"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/01 Intro.html#representing-a-program-as-bits",
    "href": "04 Computing Systems and Data Representation/01 Intro.html#representing-a-program-as-bits",
    "title": "Representing Programs",
    "section": "",
    "text": "Computing Layer:\nA computer system consists of hardware and system software that work together to run application programs for a user. A computer system consists of the following: - users - applications - the operating system - system utilities - hardware abstraction - hardware\nConsider the following code, we will reference it as hello.c:\n#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"Hello World\\n\");\n    return 0;\n}\nThe program begins as a ‘source file’ that is created and modified by a programmer and saved as a text file (hello.c). The source file (or program) is a sequence of bits, each with values of 0 or 1. These are usually organized in 8-bit chunks called bytes. Each byte represents some text character in the program. Most modern systems represent text characters using the ASCII standard that represents each character with a unique byte-sized integer. This holds true for our hello.c program.\nEach byte has an integer value that corresponds to some character\n(#   i   n   c   l   u   d   e  )\n(35  105 110 99  108 117 100 101)\nFiles such as our hello.c program file that contain exclusively ascii characters are known as text files, all others are known as binary files.\nAll information information in a system including disk files, programs stored in memory is represented in a bit format. The bits are translated for us to represent characters, unsigned/positive integers, floating point numbers, negative integers, and so on.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing Programs"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/01 Intro.html#the-compilation-process",
    "href": "04 Computing Systems and Data Representation/01 Intro.html#the-compilation-process",
    "title": "Representing Programs",
    "section": "The Compilation Process",
    "text": "The Compilation Process\nWriting the program in a language such as C makes it easier for humans to read and understand. However, for the system it must translate the individual C statements into a sequence of low-level machine instructions.\nThis translation process consists of four phases, known as the ‘compilation system’\n\nPhase 1: Preprocessing\n\nYou can find the preprocessor on your machine by running the command which cpp.\nThe preprocessor modifies the original C program according to directives included in the program. These are the statements at the top that begin with the # character. For example, the #include &lt;stdio.h&gt; command in line 1 of hello.c tells the preprocessor to read the contents of the system header file stdio.h and insert it directly into the program text.\nPreprocessor Input: hello.c\nPreprocessor Output: hello.i\nYou can read more about the preprocessor by running the command man cpp.\nTo stop the compilation process at this step, use the -E flag when compiling your program. Ex: gcc hello.c -E -o hello.i. Doing so will allow you to see what c code is inserted into your program from the directives.\n\n\n\nPhase 2: Compilation\n\nYou can find the compiler on your machine by running the command which cc.\nThe compiler translates the text file hello.i into the text file hello.s, which contains ‘assembly-language’ program instructions. Each statement in an assembly-language program describes one low-level ‘machine-language’ instruction in a standard text form.\nCompiler Input: hello.i\nCompiler Output: hello.s\nTo stop the compilation process at this step, use the -S flag when compiling your program. Ex: gcc hello.c -S -o hello.s. Doing so will allow you to view the assembly code produced from your program.\n\n\n\nPhase 3: Assembling\n\nThe command which as will show you where the assembler is on your machine.\nThe assembler translates hello.s into machine language instructions, packages them in a form known as a ‘relocatable object program’, and stores the result in the object file hello.o. The hello.o file is a binary file whose bytes encode machine language instructions rather than characters. If we were to view hello.o with a text editor, it would appear to be gibberish.\nAssembler input: hello.s\nAssembler output: hello.o\nTo stop the compilation process at this step, use the -c flag when compiling your program. Ex: gcc hello.c -S -o hello.o. Doing so will allow you to make an attempt to look at the gibberish produced.\n\n\n\nLinking phase:\n\nThe command which ld will show you where the assembler is on your machine.\nNotice that our hello program calls the printf function, which is part of the standard C library provided by every C compiler. The printf function resides in a separate precompiled object file called printf.o, which must somehow be merged with our hello.o program. The linker (ld) handles this merging. The result is the hello file, which is an ‘executable object file’ (or an executable) that is ready to be loaded into memory and executed by the system.\nLinker input: hello.o\nLinker output: hello (executable file)\nTo stop the compilation process after this step, just compile like you have previously. Ex: gcc hello.c -o hello.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing Programs"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/01 Intro.html#hardware-interactions",
    "href": "04 Computing Systems and Data Representation/01 Intro.html#hardware-interactions",
    "title": "Representing Programs",
    "section": "Hardware Interactions",
    "text": "Hardware Interactions\n\nAt this point, our hello.c source program has been translated by the ‘compilation system’ into an executable object file called hello, that is stored on the disk.\nTo run the executable file on a Unix system, we type its name into an application known as a shell:\n\n$ ./hello\n\nTo understand what happens to our hello program when we run it, we need to understand the hardware organization of a typical system.\n\n\nBuses\n\nRunning throughout the system is a collection of electical conduits called Buses that carry bytes of information back and forth between components.\nBusses are typically designed to transfer fixed-sized chunks of data- most machines now have either 4-byte (32 bit) or 8-byte (64 bit) sized buses.\n\n\n\nI/O Devices\n\nInput/Output (I/O) devices are the system’s connection to the external world.\nOur example system has 4 I/O devices: Keyboard, mouse, display, and disk.\nInitially, the executable hello program resides on the disk.\n\n\n\nMain Memory (RAM)\n\nThe main memory is a temporary storage device that holds both a program and the data it manipulates while the processor is executing the program.\n\n\n\nProcessor\n\nThe central processing unit (CPU), or just processor, is the engine, or brain that executes instructions stored in main memory.\nAt its core is a register called the ‘program counter’ (PC). At any point in time, the PC points at (contains the address of) some machine language instruction in main memory.\nFrom the time that power is applied to the system until power is shut off, a processor repeatedly executes the instruction pointed at by the PC, and the PC updates to the PC that points to the next instruction.\nThe processor ‘reads’ the instruction, from memory pointed at by the PC, ‘interprets’ the bits in the instruction, ‘performs’ some simple operation dictated by the instruction, and then ‘updates’ the PC to point to the next instruction.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing Programs"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/01 Intro.html#the-role-of-the-os",
    "href": "04 Computing Systems and Data Representation/01 Intro.html#the-role-of-the-os",
    "title": "Representing Programs",
    "section": "The Role of the OS",
    "text": "The Role of the OS\n\nWhen the shell loaded and ran the hello program, and when the hello program printed its message, neither program accessed the keyboard, display, disk, or main memory directly. Rather, they relied on the services provided by the operating system.\nWe can think of the operating system as a layer of software interposed between the application program and the hardware. All attempts by an application program to manipulate the hardware must go through the operating system.\nThe operating system has two primary purposes:\n\nTo protect the hardware from misuse by runaway applications;\nTo provide applications with simple uniform mechanisms for manipulating complicated and often wildly different low-level hardware devices.\n\nThe operating system achieves both goals via the fundamental abstractions:\n\nprocesses\nvirtual memory\nfiles\n\n\nProcesses - a process is the operating systems abstraction for a running program - multiple processes can run concurrently on the same system, and each process appears to have exclusive use of the hardware\nVirtual Memory - Virtual memory is an abstraction that provides each process with the illusion that is has exclusive use of the main memory\nFiles - A file is a sequence of bytes, nothing more, nothing less. - Every I/O device (disks, keyboards, displays) is modeled as a file - All input and output in the system is performed by reading and writing files, using a small set of ‘system calls’ known as Unix I/O\nSummary: - A computer system consists of hardware and system software to cooperate to run application programs - Information inside the computer is represented as a group of bits that can be interpreted in different ways depending on context. - Programs are translated by other programs into different forms (compilation), beginning as ASCII text and then translated into binary executable files. - Processors read and interpret binary instructions that are stored in main memory. - The operating system serves as an intermediary between the applications and the hardware - Operating Systems provide three fundamental abstractions 1. Files that are abstractions for I/O devices 2. Virtual Memory is an abstraction for both main memory and disks 3. Processes are abstractions for the processor, main memory, and I/O devices",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing Programs"
    ]
  },
  {
    "objectID": "02 Terminal/04 Redirection.html",
    "href": "02 Terminal/04 Redirection.html",
    "title": "Redirection",
    "section": "",
    "text": "frequently abbreviated as stdout\nredirection represented with &gt;\nused to redirect the result of a command somewhere else\nthe contents of the file are overwritten when using &gt;\ncan use &gt;&gt; to append to the contents of a file\n\n\n\n\nOutput the results of one command to a file\necho \"print('hello world')\" &gt; hello.py\nOutput and concatenate the results to a new line in the file\necho \"print('another line')\" &gt;&gt; hello.py\nOutput but erase the contents of hello.py\necho \"print('erase that old stuff')\" &gt; hello.py",
    "crumbs": [
      "02 Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/04 Redirection.html#standard-output",
    "href": "02 Terminal/04 Redirection.html#standard-output",
    "title": "Redirection",
    "section": "",
    "text": "frequently abbreviated as stdout\nredirection represented with &gt;\nused to redirect the result of a command somewhere else\nthe contents of the file are overwritten when using &gt;\ncan use &gt;&gt; to append to the contents of a file\n\n\n\n\nOutput the results of one command to a file\necho \"print('hello world')\" &gt; hello.py\nOutput and concatenate the results to a new line in the file\necho \"print('another line')\" &gt;&gt; hello.py\nOutput but erase the contents of hello.py\necho \"print('erase that old stuff')\" &gt; hello.py",
    "crumbs": [
      "02 Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/04 Redirection.html#standard-input",
    "href": "02 Terminal/04 Redirection.html#standard-input",
    "title": "Redirection",
    "section": "Standard Input",
    "text": "Standard Input\n\nfrequently abbreviated as stdin\nredirection represented with &lt;\ncan be used to provide input into a program\n\n\nExample\n\nCreate a file named name.txt that contains your name.\necho \"josh\" &gt; name.txt   # create a file named name.txt that contains your name\nOpen a text editor\nvim greeting.py   # or nano greeting.py\nAdd the following code to the file.\nimport sys\nname = sys.stdin.read()\nprint(f\"Hi {name}\")\nSave and close the file.\nFeed the contents of the name.txt file into the greeting.py file while running the python file.\npython3 greeting.py &lt; name.txt",
    "crumbs": [
      "02 Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/04 Redirection.html#standard-error",
    "href": "02 Terminal/04 Redirection.html#standard-error",
    "title": "Redirection",
    "section": "Standard Error",
    "text": "Standard Error\n\nabbreviated as stderr\nrepresented with 2&gt;\ncan append with 2&gt;&gt;\nif an error is produced, you can redirect it elsewhere.\n\n\nExamples\nnotarealcommand 2&gt; error-file.txt\nnotarealcommand 2&gt;&gt; error-file.txt",
    "crumbs": [
      "02 Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/04 Redirection.html#pipe",
    "href": "02 Terminal/04 Redirection.html#pipe",
    "title": "Redirection",
    "section": "Pipe",
    "text": "Pipe\n\nrepresented with |\ncreates a “pipe” or “pipeline” between two programs\ntakes the output of the one command and uses it as input it into another command\n\n\nExample\nList the contents of /usr/bin, but use more to view them in a paginated way.\nls -al /usr/bin | more",
    "crumbs": [
      "02 Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/01 Basic Commands.html",
    "href": "02 Terminal/01 Basic Commands.html",
    "title": "Navigation",
    "section": "",
    "text": "The cd command allows you to change the working directory in the terminal.\n\n\ncd              # go to user's home directory\ncd ~            # go to user's home directory\ncd [path]       # go to some location (absolute or relative)\ncd ~/Desktop    # go to the desktop using the absolute path\n\n\n\n\nThis command outputs the working directory (the current location in the terminal).\n\n\npwd         # outputs absolute path of current directory\n\n\n\n\nThe ls command lists the contents of the working directory or can be used to provide certain details about any file.\nls                  # list non-hidden contents\nls -a               # list everything, including hidden contents\nls -l               # include the details about each file \nls -al              # list everything in working directory with details \nls -alh             # use human readable file sizes (i.e KB, MB, GB) instead of just bytes.\nls -l [filename]    # output the details about one file\n\n\n\nmkdir [directory-name]   # create a directory or multiple\ntouch [filename]         # create a file or multiple\nrmdir [directory]        # remove an empty directory\nrm [filename]            # remove a file or multiple\nrm -rf [directory]       # remove a directory and everything inside of it",
    "crumbs": [
      "02 Terminal",
      "Navigation"
    ]
  },
  {
    "objectID": "02 Terminal/01 Basic Commands.html#basic-commands-and-some-options",
    "href": "02 Terminal/01 Basic Commands.html#basic-commands-and-some-options",
    "title": "Navigation",
    "section": "",
    "text": "The cd command allows you to change the working directory in the terminal.\n\n\ncd              # go to user's home directory\ncd ~            # go to user's home directory\ncd [path]       # go to some location (absolute or relative)\ncd ~/Desktop    # go to the desktop using the absolute path\n\n\n\n\nThis command outputs the working directory (the current location in the terminal).\n\n\npwd         # outputs absolute path of current directory\n\n\n\n\nThe ls command lists the contents of the working directory or can be used to provide certain details about any file.\nls                  # list non-hidden contents\nls -a               # list everything, including hidden contents\nls -l               # include the details about each file \nls -al              # list everything in working directory with details \nls -alh             # use human readable file sizes (i.e KB, MB, GB) instead of just bytes.\nls -l [filename]    # output the details about one file\n\n\n\nmkdir [directory-name]   # create a directory or multiple\ntouch [filename]         # create a file or multiple\nrmdir [directory]        # remove an empty directory\nrm [filename]            # remove a file or multiple\nrm -rf [directory]       # remove a directory and everything inside of it",
    "crumbs": [
      "02 Terminal",
      "Navigation"
    ]
  },
  {
    "objectID": "02 Terminal/01 Basic Commands.html#example-1",
    "href": "02 Terminal/01 Basic Commands.html#example-1",
    "title": "Navigation",
    "section": "Example",
    "text": "Example\nThe following example uses the above commands to nagivate the file system and create and remove files and directories.\ncd ~                            # navigate to the home directory\ncd                              # also navigate to the home directory\npwd                             # prove it\nls                              # look at the files in the home directory\ncd Desktop                      # navigate to the Desktop \nmkdir programs                  # create a folder called programs\nmkdir csc222                    # create a folder called csc222\ncd programs                     # navigate into the folder called programs using the relative path\ntouch hello.py                  # create a file called hello.py\ntouch .gitignore                # create a hidden file \ntouch .another-hidden-file      # create another hidden file\nls                              # list the files\nls -a                           # list the files, include hidden ones \nls -l                           # list the files with details\nls -alh                         # list the files, include hidden ones, include details, make the size human readable (i.e. Kb, Mb, etc.)\nls -l hello.py                  # only list the info about hello.py\ncd ~/Desktop/csc222             # navigate to the csc222 folder using an absolute path \ncd ..                           # navigate up one folder\ncd programs                     # navigate back into programs            \nrm .another-hidden-file         # remove the file\ncd ..                           # navigate up one directory\nrm -rf programs                 # remove the programs folder and everything in it (recursive, force)",
    "crumbs": [
      "02 Terminal",
      "Navigation"
    ]
  },
  {
    "objectID": "02 Terminal/old/redirection.html",
    "href": "02 Terminal/old/redirection.html",
    "title": "Redirection",
    "section": "",
    "text": "abbreviated as stdout\nrepresented with &gt;\nused to redirect the result of a command somewhere else\nthe contents of the file are overwritten when using &gt;\ncan use &gt;&gt; to append to the contents of a file\n\n\n\necho \"hello world\" &gt; helloworld.txt",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/old/redirection.html#standard-output",
    "href": "02 Terminal/old/redirection.html#standard-output",
    "title": "Redirection",
    "section": "",
    "text": "abbreviated as stdout\nrepresented with &gt;\nused to redirect the result of a command somewhere else\nthe contents of the file are overwritten when using &gt;\ncan use &gt;&gt; to append to the contents of a file\n\n\n\necho \"hello world\" &gt; helloworld.txt",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/old/redirection.html#standard-input",
    "href": "02 Terminal/old/redirection.html#standard-input",
    "title": "Redirection",
    "section": "Standard Input",
    "text": "Standard Input\n\nabbreviated as stdin\nrepresented with &lt;\ncan be used to provide input into a program",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/old/redirection.html#standard-error",
    "href": "02 Terminal/old/redirection.html#standard-error",
    "title": "Redirection",
    "section": "Standard Error",
    "text": "Standard Error\n\nabbreviated as stderr\nrepresented with 2&gt;\ncan append with 2&gt;&gt;\nif an error is produced, you can redirect it elsewhere.\n\n\nExample\nnotarealcommand 2&gt; error-file.txt",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/old/redirection.html#pipe",
    "href": "02 Terminal/old/redirection.html#pipe",
    "title": "Redirection",
    "section": "Pipe",
    "text": "Pipe\n\nrepresented with |\ncreates a “pipe” or “pipeline” between two programs\ntakes the output of the one command and uses it as input it into another command\n\n\nExample\nList the contents of /usr/bin, but use more to view them in a paginated way.\nls -al /usr/bin | more",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Redirection"
    ]
  },
  {
    "objectID": "02 Terminal/old/grep-and-regex.html",
    "href": "02 Terminal/old/grep-and-regex.html",
    "title": "Grep and Regular Expressions",
    "section": "",
    "text": "grep stands for Globally search for a Regular Expression and Print\n\n\n\nCreate some files to work with.\necho \"testing 1 2 3\" &gt; test1.txt\necho \"testing 4 5 6\" &gt; test2.txt\necho \"TESTING 7 8 9\" &gt; test3.txt\nmkdir \"test-folder\"\ncd \"test-folder\"\necho \"folder testing 1 2 3\" &gt; test4.text\necho \"folder testing 4 5 6\" &gt; test4.text\necho \"FOLDER TESTING 7 8 9\" &gt; test4.text\ncd ..\nThe format to search for strings in files is `grep [thing you’re searching for] [filename].\ngrep testing test1.txt  # searching for the word testing in text1.txt\n\n# * can be used as a wild card\ngrep testing test*.txt  # searching for the word testing in any file with the format test*.txt\ngrep testing *          # searching for testing in any file\n\n# applying some flags (more exist)\ngrep -l test *.txt          # -l only shows the file names, not the content\ngrep -i testing test*.txt   # -i ignores case\ngrep -ir testing *          # -r searches recursively",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "02 Terminal/old/grep-and-regex.html#grep",
    "href": "02 Terminal/old/grep-and-regex.html#grep",
    "title": "Grep and Regular Expressions",
    "section": "",
    "text": "grep stands for Globally search for a Regular Expression and Print\n\n\n\nCreate some files to work with.\necho \"testing 1 2 3\" &gt; test1.txt\necho \"testing 4 5 6\" &gt; test2.txt\necho \"TESTING 7 8 9\" &gt; test3.txt\nmkdir \"test-folder\"\ncd \"test-folder\"\necho \"folder testing 1 2 3\" &gt; test4.text\necho \"folder testing 4 5 6\" &gt; test4.text\necho \"FOLDER TESTING 7 8 9\" &gt; test4.text\ncd ..\nThe format to search for strings in files is `grep [thing you’re searching for] [filename].\ngrep testing test1.txt  # searching for the word testing in text1.txt\n\n# * can be used as a wild card\ngrep testing test*.txt  # searching for the word testing in any file with the format test*.txt\ngrep testing *          # searching for testing in any file\n\n# applying some flags (more exist)\ngrep -l test *.txt          # -l only shows the file names, not the content\ngrep -i testing test*.txt   # -i ignores case\ngrep -ir testing *          # -r searches recursively",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "02 Terminal/old/grep-and-regex.html#regular-expressions",
    "href": "02 Terminal/old/grep-and-regex.html#regular-expressions",
    "title": "Grep and Regular Expressions",
    "section": "Regular Expressions",
    "text": "Regular Expressions\nRegular expressions are used to express patterns within text. Using them in conjunction with grep can result in powerful searches.\nTo follow the following examples, run the commands below.\n# navigate to documents and download the following\nwget https://raw.githubusercontent.com/jcoriell/download/main/regex-sample.txt\nwget https://raw.githubusercontent.com/dwyl/english-words/master/words.txt\n\n# confirm the files are there\nls                      \n\n# peek inside the files\nmore regex-sample.txt   \nmore words.txt          \n\nSearching for a simple strings\nFor exact matching of characters, words, and phrases, you can use the characters.\n# -P flag stands for Perl, can use -E here instead\n# later notations will require -P\ngrep -P \"abc\" regex-sample.txt     \ngrep -P \"coriell\" regex-sample.txt \n\n\nMeta Characters\nSome characters require a slash (escape) in front of them to include them as part of the search because they are meta characters that have special meaning. More on these can be found in the subsections that follow.\nCharacter   Meaning\n.           - any character except new line\n[           - grouping\n{           - quantifying\n()          - grouping \n\\           - escape\n^           - starts with \n$           - ends with \n|           - or\n?           - a quantifier\n*           - another quantifier\n+           - another quantifier\n\nExamples\n# Search for a dot\ngrep -P \"\\.\" regex-sample.txt\n# search for an open parenthesis\ngrep -P \"\\(\" regex-sample.txt\n# search for any character and then the letter c\ngrep -P \".c\" regex-sample.txt\n\n\n\nCharacter Types\nYou can specify different types of characters such as digits or whitespace. These notations require the usage of the -P flag.\nCharacter   Meaning\n.           - any character except new line\n\\d          - digit (0-9)\n\\D          - not a digit (not 0-9)\n\\w          - a Word character (a-z, A-Z, 0-9, _)\n\\W          - not one of the word characters\n\\s          - whitespace (space, tab, newline)\n\\S          - note whitespace\n\nExamples\n# search for three consecutive digits\ngrep -P \"\\d\\d\\d\" regex-sample.txt\n# search for three digits, any, three digits, any, then 4 digits\ngrep -P \"\\d\\d\\d.\\d\\d\\d.\\d\\d\\d\\d\" regex-sample.txt\n# search for consecutive word characters\ngrep -P \"\\w\\w\\w\\w\" regex-sample.txt\n# search for whitespace\ngrep -P \"\\s\" regex-sample.txt\n\n\n\nBoundaries\nCharacter   Meaning\n\\b          - word boundary\n\\B          - not a word boundary\n^           - beginning of a line\n$           - end of a line\n\nExamples\n# find 3 word characters between two boundaries\ngrep -P \"\\b\\w\\w\\w\\b\" regex-sample.txt\n# find h at the beginning of a line\ngrep -P \"^h\" regex-sample.txt\n# find h at the beginning of a word\ngrep -P \"\\bh\" regex-sample.txt\n# find 4 word characters at the end of a line\ngrep -P \"\\w\\w\\w\\w$\" regex-sample.txt\n# find lines that start with a and count them\n# wc is for word count\ngrep -P \"^a\" words.txt | wc -l \n# find lines that start with a, have three characters, then end with b.\n# store then in a file called result.txt\ngrep -P \"^a...b$\" words.txt &gt; result.txt\nmore result.txt # view it\n# starts with a, 5th letter is b. \n# shows individual word count\ngrep -P \"^a...b\" words.txt | wc -w \n\n\n\nGroupings\nGroupings allow us to combine different types of characters or patterns.\nCharacter   Meaning\n[]          matches characters in brackets\n[^ ]        matches characters not in brackets\n|           or\n()          group\n\nExamples\n# find any character from a to z\ngrep -P \"[a-z]\" regex-sample.txt\n# find any character from a to z or A-Z\ngrep -P \"[a-zA-Z]\" regex-sample.txt\n\n```sh\n# find occurrances of a dot followed by a character a-z or A-Z\ngrep -P \"\\.[a-zA-Z]\" regex-sample.txt \n# find a dot folled by three characters in a-z or A-Z\ngrep -P \"\\.[a-zA-Z][a-zA-Z][a-zA-Z]\" regex-sample.txt\n# find a dot followed by edu or com\ngrep -P \"\\.(edu|com)\" regex-sample.txt\n\n\n\nQuanitfiers\nThe quantifiers help us say how many of a type of character or characters we might want in parts of the expression. The quantifiers come after the thing it is quantifying.\nCharacter   Meaning\n*           - 0 or more\n+           - 1 or more\n?           - 0 or one\n{3}         - exact number (exactly 3 here)\n{1,5}       - range {min, max} (minimum of 1, max of 5 in example)\n\nExamples\n# find occurrance of a dot followed by 3 characters in a-z or A-Z\ngrep -P -o \"\\.[a-zA-Z]{3}\" regex-sample.txt # -o shows only non empty parts\n# find occurrances of a dot followed by at least 2 characters in a-z or A-Z\ngrep -P \"\\.[a-zA-Z]{2,}\" regex-sample.txt\n# find \n#   - one or more characters in a-z or A-Z or 0-9\n#   - followed by an @ symbol\n#   - followed by one or more characters in a-z or A-Z\n#   - followed by a dot \n#   - followed by at least two characters in a-z or A-Z\ngrep -P \"[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]{2,}\" regex-sample.txt",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "02 Terminal/old/grep-and-regex.html#files",
    "href": "02 Terminal/old/grep-and-regex.html#files",
    "title": "Grep and Regular Expressions",
    "section": "Files",
    "text": "Files\nMeow Meow Meow",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html",
    "href": "02 Terminal/old/file-permissions.html",
    "title": "File Permissions",
    "section": "",
    "text": "File permissions are expressed with a 10 character string.\nTo see the file permissions for files in a directory run ls -l.\nThe output will resemble the following:\ndrwxr-xr-x 2 josh josh 4096 Nov 29 15:32 Desktop\ndrwxr-xr-x 3 josh josh 4096 Nov 30 11:14 Documents\ndrwxr-xr-x 2 josh josh 4096 Nov 29 11:26 Downloads\nThe first set of characters such as drwxr-xr-x denotes the file permissions.\nThe third and fouth columns denote the user and group assigned to the file.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html#introduction",
    "href": "02 Terminal/old/file-permissions.html#introduction",
    "title": "File Permissions",
    "section": "",
    "text": "File permissions are expressed with a 10 character string.\nTo see the file permissions for files in a directory run ls -l.\nThe output will resemble the following:\ndrwxr-xr-x 2 josh josh 4096 Nov 29 15:32 Desktop\ndrwxr-xr-x 3 josh josh 4096 Nov 30 11:14 Documents\ndrwxr-xr-x 2 josh josh 4096 Nov 29 11:26 Downloads\nThe first set of characters such as drwxr-xr-x denotes the file permissions.\nThe third and fouth columns denote the user and group assigned to the file.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html#file-permission-breakdown",
    "href": "02 Terminal/old/file-permissions.html#file-permission-breakdown",
    "title": "File Permissions",
    "section": "File Permission Breakdown",
    "text": "File Permission Breakdown\nLet’s break down the permission string drwxr-xr-x.\n\nThe 1st character is the type of file. The most common characters you will see here are:\n- for file.\nd for directory.\nl for link.\nIn the permissions drwxr-xr-x, the first character is d, so we have a directory.\nThe next 9 characters are for 3 different permission classes\n\nThe owner of the file is the first set of 3 characters.\nIn the string drwxr-xr-x, we have rwx which means the owner can read, write, and execute the file.\nThe group for the file is the second set of 3.\nIn the string drwxr-xr-x, we have r-x which means anyone in the group for the file (users belong to groups) can read and execute the file.\nThe third set of 3 are for all other users (those not in the same user group, and not the owner)\nIn the string drwxr-xr-x, we have r-x which means all others can read and execute the file, but cannot modify it.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html#changing-file-permissions",
    "href": "02 Terminal/old/file-permissions.html#changing-file-permissions",
    "title": "File Permissions",
    "section": "Changing File Permissions",
    "text": "Changing File Permissions\nWe use the command chmod to change the file permissions. You can use either of the following methods to change the permissions.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html#using-the-characters-that-represent-the-permissions",
    "href": "02 Terminal/old/file-permissions.html#using-the-characters-that-represent-the-permissions",
    "title": "File Permissions",
    "section": "Using the characters that represent the permissions",
    "text": "Using the characters that represent the permissions\nThe characters for each type of user are:\n\nu for owner\ng for group\no for others\na for all\n\nThe characters for permissions are:\n\nr for read\nw for write\nx for execute\n\nTo add permissions, combine a usertype character with + and one or more of the permission characters.\nTo remove permissions, combine a usertype character with - and one or more of the permission characters.\n\nExamples\n\nchmod u+rwx filename to give read write and execute permissions to the owner.\nchmod g-x filename to remove execute permissions from the group.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html#using-numeric-values",
    "href": "02 Terminal/old/file-permissions.html#using-numeric-values",
    "title": "File Permissions",
    "section": "Using Numeric Values",
    "text": "Using Numeric Values\nThe values for each type of permission are:\nr = 4\nw = 2\nx = 1\nYou can place them adjacent to each other to get combos\nrw  = 4 + 2     = 6\nrwx = 4 + 2 + 1 = 7\nwx  =     2 + 1 = 3\nrx  = 4     + 1 = 5\nWhen referencing the permission string, notice that this is simply binary on a set of 3 characters. For example, with the string drwxr-xr-x we have:\nd    r w x    r - x    r - x\n     4 2 1    4   1    4   1\n\nSum:     7        5        5\nPermission is 755\n\nExamples\n\nchmod 766 filename to give:\n\nrwx permissions to the owner\nrw permissions to the group\n\nrw permissions to the others",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/file-permissions.html#changing-ownership",
    "href": "02 Terminal/old/file-permissions.html#changing-ownership",
    "title": "File Permissions",
    "section": "Changing Ownership",
    "text": "Changing Ownership\n\nuse the command sudo chown [owner][:group] [filename] to change the ownership of a file",
    "crumbs": [
      "02 Terminal",
      "Old",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/old/more-commands.html",
    "href": "02 Terminal/old/more-commands.html",
    "title": "More Commands",
    "section": "",
    "text": "Typically used to find a file or directory.\nRecall grep is typically used to find patterns inside files\n\n# Example with find\nfind . -name \"test1.txt\"",
    "crumbs": [
      "02 Terminal",
      "Old",
      "More Commands"
    ]
  },
  {
    "objectID": "02 Terminal/old/more-commands.html#find",
    "href": "02 Terminal/old/more-commands.html#find",
    "title": "More Commands",
    "section": "",
    "text": "Typically used to find a file or directory.\nRecall grep is typically used to find patterns inside files\n\n# Example with find\nfind . -name \"test1.txt\"",
    "crumbs": [
      "02 Terminal",
      "Old",
      "More Commands"
    ]
  },
  {
    "objectID": "02 Terminal/old/more-commands.html#and",
    "href": "02 Terminal/old/more-commands.html#and",
    "title": "More Commands",
    "section": "&&, ||, and ;",
    "text": "&&, ||, and ;\n\nUse &&, || and ; to chain commands together\nThe command before && must complete without error for the command after && to execute\n# example with success on first command\necho \"hi\" &gt; test.txt && echo \"hello.txt\"\n# example with an error on the first command with &&\nfind . --name \"test1.txt\" && echo ok\n\n# after fixing the error\nfind . -name \"test1.txt\" && echo ok\nThe command before || must result in an error for the command after || to execute\n# example with || with an error\nfind . --name \"test1.txt\" || echo error\n\n# after fixing the error\nfind . -name \"test1.txt\" || echo error        # no error\nUse ; to just separate two commands on the same line\n# echo ok happens even though find will throw and error\nfind --name test1.txt; echo ok",
    "crumbs": [
      "02 Terminal",
      "Old",
      "More Commands"
    ]
  },
  {
    "objectID": "02 Terminal/03 Other Useful Tips.html",
    "href": "02 Terminal/03 Other Useful Tips.html",
    "title": "Other Useful Tips",
    "section": "",
    "text": "echo  [some-output] # create output... like print in python\nhistory             # show the terminal history\nhistory -c          # clear all the history from the terminal\nclear               # clear what is currently in the terminal (doesn't clear history)\nman [command]       # show the manual for a command",
    "crumbs": [
      "02 Terminal",
      "Other Useful Tips"
    ]
  },
  {
    "objectID": "02 Terminal/03 Other Useful Tips.html#other-useful-basic-commands",
    "href": "02 Terminal/03 Other Useful Tips.html#other-useful-basic-commands",
    "title": "Other Useful Tips",
    "section": "",
    "text": "echo  [some-output] # create output... like print in python\nhistory             # show the terminal history\nhistory -c          # clear all the history from the terminal\nclear               # clear what is currently in the terminal (doesn't clear history)\nman [command]       # show the manual for a command",
    "crumbs": [
      "02 Terminal",
      "Other Useful Tips"
    ]
  },
  {
    "objectID": "02 Terminal/03 Other Useful Tips.html#other-useful-keyboard-shortcuts",
    "href": "02 Terminal/03 Other Useful Tips.html#other-useful-keyboard-shortcuts",
    "title": "Other Useful Tips",
    "section": "Other Useful Keyboard Shortcuts",
    "text": "Other Useful Keyboard Shortcuts\nThe following shortcuts can make your life a bit easier while working in the Terminal. This is not an exhaustive list of shortcuts.\nup arrow        - pull up the previous command\ndown arrow      - show the next command (if one exists)\n\ntab             - autocomplete based on what commands or files or directories are available\nctrl + l        - clear\nctrl + c        - cancel the currently running process \nctrl + r        - search through the history \n\nctrl + a (or the home key) - jump to beginning of line\nctrl + e (or the end key)  - jump to the end of a line\n\nalt + left/right arrow key - navigate by word instead of character",
    "crumbs": [
      "02 Terminal",
      "Other Useful Tips"
    ]
  },
  {
    "objectID": "03 C Basics/04-Functions.html",
    "href": "03 C Basics/04-Functions.html",
    "title": "Functions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// you can define functions up here\n// must state return type and types for the formal parameters\nint addOne(int value){\n    return value + 1;\n}\n\n\nint main(){\n\n    int num = 10;\n    int result = addOne(num);\n    result = addOne(result);\n\n    printf(\"You started with %d.\\n\", num);\n    printf(\"Now you have %d.\\n\", result);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Functions"
    ]
  },
  {
    "objectID": "03 C Basics/04-Functions.html#defining-functions",
    "href": "03 C Basics/04-Functions.html#defining-functions",
    "title": "Functions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// you can define functions up here\n// must state return type and types for the formal parameters\nint addOne(int value){\n    return value + 1;\n}\n\n\nint main(){\n\n    int num = 10;\n    int result = addOne(num);\n    result = addOne(result);\n\n    printf(\"You started with %d.\\n\", num);\n    printf(\"Now you have %d.\\n\", result);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Functions"
    ]
  },
  {
    "objectID": "03 C Basics/04-Functions.html#function-prototyping",
    "href": "03 C Basics/04-Functions.html#function-prototyping",
    "title": "Functions",
    "section": "Function Prototyping",
    "text": "Function Prototyping\n#include &lt;stdio.h&gt;\n\n// we could just prototype the functions up here\n// for function prototyping, we only need to state the name and types\n// stating parameter identifiers is optional\nint addOne(int);\n\n\n\n\nint main(){\n    int num = 10;\n    int result = addOne(num);\n\n    printf(\"Start: %d\\n\", num);\n    printf(\"End: %d\\n\", result);\n\n    printf(\"\\n\");\n    return 0;\n}\n\n\n// then define them down here\nint addOne(int value){\n    return value + 1;\n}",
    "crumbs": [
      "03 C Basics",
      "Functions"
    ]
  },
  {
    "objectID": "03 C Basics/06-Sample-Applications.html",
    "href": "03 C Basics/06-Sample-Applications.html",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt; // includes tolower()\n\n// function prototyping\nint countVowels(char*);\n\nint main(){\n    char sentence[100];\n    int numVowels;\n\n    printf(\"Give me a sentence to count the vowels: \");\n    fgets(sentence, 100, stdin);\n\n    numVowels = countVowels(sentence);\n    printf(\"There were %d vowels.\", numVowels);\n\n    printf(\"\\n\");\n    return 0;\n}\n\nint countVowels(char *sentence){\n    int count = 0;\n\n    for (int i=0; i &lt; strlen(sentence); i++){\n        switch(tolower(sentence[i])){\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n        }\n    }\n\n    return count;\n}",
    "crumbs": [
      "03 C Basics",
      "Sample Applications"
    ]
  },
  {
    "objectID": "03 C Basics/06-Sample-Applications.html#vowel-counter",
    "href": "03 C Basics/06-Sample-Applications.html#vowel-counter",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt; // includes tolower()\n\n// function prototyping\nint countVowels(char*);\n\nint main(){\n    char sentence[100];\n    int numVowels;\n\n    printf(\"Give me a sentence to count the vowels: \");\n    fgets(sentence, 100, stdin);\n\n    numVowels = countVowels(sentence);\n    printf(\"There were %d vowels.\", numVowels);\n\n    printf(\"\\n\");\n    return 0;\n}\n\nint countVowels(char *sentence){\n    int count = 0;\n\n    for (int i=0; i &lt; strlen(sentence); i++){\n        switch(tolower(sentence[i])){\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n        }\n    }\n\n    return count;\n}",
    "crumbs": [
      "03 C Basics",
      "Sample Applications"
    ]
  },
  {
    "objectID": "03 C Basics/06-Sample-Applications.html#grade-calculator",
    "href": "03 C Basics/06-Sample-Applications.html#grade-calculator",
    "title": "Sample Applications",
    "section": "Grade Calculator",
    "text": "Grade Calculator\n#include &lt;stdio.h&gt;\n\nchar calcuateGrade(float);\n\nint main(){\n\n    float score;\n    printf(\"What was the score you received? \");\n    scanf(\"%f\", &score);\n\n    char grade = calculateGrade(score);\n    printf(\"It looks like you got a(n) %c\", grade);\n    \n    printf(\"\\n\");\n    return 0;\n}\n\nchar calculateGrade(float value){\n    if (value &gt;= 90){\n        return 'A';\n    } else if (value &gt;= 80){\n        return 'B';\n    } else if (value &gt;=70){\n        return 'C';\n    } else if (value &gt;= 60){\n        return 'D';\n    } else if (value &gt;= 50){\n        return 'E';\n    } else {\n        return 'F';\n    }\n\n}",
    "crumbs": [
      "03 C Basics",
      "Sample Applications"
    ]
  },
  {
    "objectID": "03 C Basics/06-Sample-Applications.html#bubble-sort",
    "href": "03 C Basics/06-Sample-Applications.html#bubble-sort",
    "title": "Sample Applications",
    "section": "Bubble Sort",
    "text": "Bubble Sort\n#include &lt;stdio.h&gt;\n\n\nvoid bubbleSort(int*, size_t);\n\nint main(){\n    int myList[] = {10, 9, 8, 7, 6};\n    size_t listSize = sizeof(myList) / sizeof(int);\n    \n    bubbleSort(myList, listSize);\n\n    for (int i = 0; i &lt; listSize; i++){\n        printf(\"%d \", myList[i]);\n    }\n\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid bubbleSort(int *aList, size_t listSize){\n    for (int i=0; i &lt; listSize - 1; i++){\n        for (int j = 0; j &lt; listSize - 1 - i;  j++){\n            if (aList[j+1] &lt; aList[j]){\n                // swap\n                int temp = aList[j];\n                aList[j] = aList[j+1];\n                aList[j+1] = temp;\n            }\n        }\n    }\n}",
    "crumbs": [
      "03 C Basics",
      "Sample Applications"
    ]
  },
  {
    "objectID": "03 C Basics/05-More-on-Data.html",
    "href": "03 C Basics/05-More-on-Data.html",
    "title": "More on Data",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // a pointer is a reference to a memory location\n    // use * to state that something is a pointer\n    int faveNum = 10;               // normal variable\n    int *faveNumPtr  = &faveNum;    // a pointer for an integer (faveNum is an integer)\n                                    // the & means \"address at\" fave num.\n\n    \n    printf(\"My fave num is %d and it is stored at %p\\n\", faveNum, faveNumPtr);\n\n    // we can access the value associated with a pointer through the indirection operator *\n    printf(\"My fave num is %d\", *faveNumPtr);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "More on Data"
    ]
  },
  {
    "objectID": "03 C Basics/05-More-on-Data.html#pointers",
    "href": "03 C Basics/05-More-on-Data.html#pointers",
    "title": "More on Data",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // a pointer is a reference to a memory location\n    // use * to state that something is a pointer\n    int faveNum = 10;               // normal variable\n    int *faveNumPtr  = &faveNum;    // a pointer for an integer (faveNum is an integer)\n                                    // the & means \"address at\" fave num.\n\n    \n    printf(\"My fave num is %d and it is stored at %p\\n\", faveNum, faveNumPtr);\n\n    // we can access the value associated with a pointer through the indirection operator *\n    printf(\"My fave num is %d\", *faveNumPtr);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "More on Data"
    ]
  },
  {
    "objectID": "03 C Basics/05-More-on-Data.html#arrays",
    "href": "03 C Basics/05-More-on-Data.html#arrays",
    "title": "More on Data",
    "section": "Arrays",
    "text": "Arrays\n#include &lt;stdio.h&gt;\n\nint main(){\n\n    // arrays are collections of similar values in contiguous memory locations\n    int someNums[] = {1, 2, 3, 4, 5, 6}; // size of 6\n    int moreNums[10]; // size of 10\n\n\n    // note that the identifier can be used as a pointer to the memory location of the first item\n    printf(\"The mem addr of the array is %p\\n\", someNums);          // note: not using &, but you can.\n    printf(\"The mem addr of the first item is %p\\n\", &someNums[0]); // note: need to use & to get address at\n\n    // when in the space the array was defined, you can use sizeof to get how large it is\n    printf(\"The num of bytes in the array is %lu\\n\", sizeof(someNums));\n    printf(\"That makes sense because 4 bytes (per int) * 6 items = %lu\\n\", sizeof(someNums));\n    \n    // We can use sizeof to get the length of the array\n    printf(\"The length of the array is %lu\\n\", sizeof(someNums) / sizeof(int));\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "More on Data"
    ]
  },
  {
    "objectID": "03 C Basics/05-More-on-Data.html#looping-with-arrays",
    "href": "03 C Basics/05-More-on-Data.html#looping-with-arrays",
    "title": "More on Data",
    "section": "Looping with Arrays",
    "text": "Looping with Arrays\n#include &lt;stdio.h&gt;\n\nint main(){\n\n    // arrays are collections of similar values in contiguous memory locations\n\n    int someNums[] = {1, 2, 3, 4, 5, 6}; // size of 6\n    int moreNums[10]; // size of 10\n\n    // using a while loop to assign values to myOtherFaves\n    int counter = 0;\n    while (counter &lt; 10){\n        moreNums[counter] = counter;\n        printf(\"Added %d as a value to myOtherFaves\\n\", counter);\n        counter++;\n    }\n\n    // using a for loop to access each value\n    // we get the upper limit of the incrementer\n    // by dividing the number of bytes of the array by the size of the data type\n    // here, the identifier someNums is not treated as a pointer\n    size_t n = sizeof(someNums) / sizeof(int);\n    for (int i = 0; i &lt; n; i++){\n        printf(\"The %dth item in the array is %d\\n\", i, someNums[i]);\n    }\n\n    // note there is also a do while loop\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "More on Data"
    ]
  },
  {
    "objectID": "03 C Basics/05-More-on-Data.html#functions-with-arrays",
    "href": "03 C Basics/05-More-on-Data.html#functions-with-arrays",
    "title": "More on Data",
    "section": "Functions with Arrays",
    "text": "Functions with Arrays\n#include &lt;stdio.h&gt;\n\n\nvoid addStuff(int myArray[], int myArrayLength){ // a signature that takes in an array\n    // the array decays to a pointer when passed through\n    // so sizeof() returns the size of the pointer now\n    // we can pass in the size of the array in addition to the array (if we need the size)\n    // note: you can still use the index to access values inside the functions\n\n    for(int i=0; i &lt; myArrayLength; i++){\n        myArray[i] = i * 2;\n    }\n}\n\nvoid viewStuff(int *myArray, int myArrayLength){// a signature that takes in an array\n    // common to use the pointer notation * here since it will decay to a pointer\n    for (int i=0; i &lt; myArrayLength; i++){\n        printf(\"The item at index %d is %d\\n\", i, myArray[i]);\n    }\n}\n\nint main(){\n\n    int ages[5];\n\n    // get the length here, since this is where we defined it.\n    size_t length = sizeof(ages) / sizeof(int); \n\n    // pass the length into the function\n    addStuff(ages, length);\n    viewStuff(ages, length);\n\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "More on Data"
    ]
  },
  {
    "objectID": "03 C Basics/05-More-on-Data.html#strings",
    "href": "03 C Basics/05-More-on-Data.html#strings",
    "title": "More on Data",
    "section": "Strings",
    "text": "Strings\n\nBasics\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt; // helpful string functions\n\nint main(){\n\n    // string are character arrays\n    // the arrays terminate with  \\0 &lt;- the null character\n    char aMessage[] = \"Hi how are you\";\n    printf(\"%s\\n\", aMessage);\n\n    // Getting the size of a string\n    // this counts the null character\n    printf(\"size: %lu\\n\", sizeof(aMessage) / sizeof(char));\n    \n    // helpful function from string.h\n    printf(\"size again %lu\\n\", strlen(aMessage));\n\n    // comparing two strings\n    char hello[] = \"hello\";\n    char you1[] = \"you\";\n    char you2[] = \"you\";\n\n    if (strcmp(hello, you1) == 0){\n        printf(\"They're equal - 1\");\n    } else {\n        printf(\"They not equal - 1\");\n    }\n\n    // strcmp returns -1, 0, or 1:\n    // 0 when they're equal\n    // -1 if the first string is \"less than\" string 2 (ascii values)\n    // 1 if the first string is \"greater than\" string 2 (ascii)\n    if (strcmp(you1, you2) == 0){\n        printf(\"They're equal - 2\");\n    } else{\n        printf(\"They're not equal - 2\");\n    }\n\n    // Reassigning string values\n    strcpy(hello, \"you\");\n\n    return 0;\n}\n\n\nscanf example\n#include &lt;stdio.h&gt;\n\nint main(){\n    char name[25];\n    int age;\n    \n    // prompt with a print statement\n    printf(\"What is your name? \");\n    scanf(\"%s\", name);\n\n    printf(\"What is your age? \");\n    scanf(\"%d\", &age); // & is for 'address at'\n\n    printf(\"Hi %s, your age is %d\\n\", name, age);\n\n    // taking more than one input\n    printf(\"What is your name and age? \");\n    scanf(\"%s %d\", name, &age);\n\n    printf(\"Hi %s, your age is %d\\n\", name, age);\n    printf(\"\\n\");\n    return 0;\n}\n\n\nfgets example\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(){\n\n    char afullline[100];\n\n    // f get s stands file get string\n    // typically used for reading lines of files\n    // but we can use it with stdin to prompt\n    printf(\"Type a sentence: \");\n    fgets(afullline, 100, stdin);\n\n    // fgets automatically adds a new line character to the end\n    // to remove it \n    afullline[strlen(afullline) - 1] = '\\0';\n    printf(\"You said: %s\", afullline);\n\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "More on Data"
    ]
  },
  {
    "objectID": "03 C Basics/03-Operators.html",
    "href": "03 C Basics/03-Operators.html",
    "title": "Operators",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // arithmetic operators\n    // +    add\n    // -    sub\n    // *    multiply\n    // /    division\n    // %    mod \n\n\n    // example 1:\n    int a = 3;\n    int b = 40;\n    int result = a + b;\n    printf(\"a + b = %d \\n\", result);\n\n    // example 2:\n    int remainder = b % a;\n    printf(\"b %% a = %d\", remainder); \n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Operators"
    ]
  },
  {
    "objectID": "03 C Basics/03-Operators.html#arithmetic-operators",
    "href": "03 C Basics/03-Operators.html#arithmetic-operators",
    "title": "Operators",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // arithmetic operators\n    // +    add\n    // -    sub\n    // *    multiply\n    // /    division\n    // %    mod \n\n\n    // example 1:\n    int a = 3;\n    int b = 40;\n    int result = a + b;\n    printf(\"a + b = %d \\n\", result);\n\n    // example 2:\n    int remainder = b % a;\n    printf(\"b %% a = %d\", remainder); \n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Operators"
    ]
  },
  {
    "objectID": "03 C Basics/03-Operators.html#logical",
    "href": "03 C Basics/03-Operators.html#logical",
    "title": "Operators",
    "section": "Logical",
    "text": "Logical\n#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt; // need to use true and false as booleans\n\nint main(){\n\n    // &&  - logical and\n    // ||  - logical or\n    // !   - logical not\n\n    if (1 && 1){\n        printf(\"True and True\\n\");\n    }\n\n    if (1 && 0){\n        // wont print\n        printf(\"True and False\\n\");\n    }\n\n    if (1 || 0){\n        printf(\"True OR False\\n\");\n    }\n\n    if (!0 || 0){\n        printf(\"Not True OR False\\n\");\n    }\n\n    if (true){\n        printf(\"TRUE\");\n    }\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Operators"
    ]
  },
  {
    "objectID": "03 C Basics/03-Operators.html#bitwise",
    "href": "03 C Basics/03-Operators.html#bitwise",
    "title": "Operators",
    "section": "Bitwise",
    "text": "Bitwise\nNote: When compiling with the directive #include &lt;math.h&gt;, you may need to end the command with -lm. An example follows:\ngcc [fileName.c] -o [executableName] -lm\n#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main(){\n\n    unsigned int a = 10;            // 1010\n    unsigned int b = 15;            // 1111\n    \n\n    // bitwise and - &\n    unsigned int result = a & b; \n    /*\n        1010    &lt;- 10\n    &   1111    &lt;- 15\n    =   1010    -&gt; 10\n    */  \n    printf(\"Ex 1: %d\\n\", result);\n\n\n\n    // bitwise or - |\n    unsigned int result2 = 10 | 15;\n    /*\n        1010    &lt;- 10\n    |   1111    &lt;- 15\n    =   1111    -&gt; 15\n    */  \n    printf(\"Ex 2: %d\\n\", result2);\n\n\n\n    // bitwise not/flip/ones complement - ~\n    unsigned int result3 = ~a;      \n    // ~a -&gt; ~1010 but....\n    // remember if an unsigned int is 4 bytes, then we have:\n    //      00000000 00000000 00000000 00001010 \n    // So bit flipping results in: \n    //      11111111 11111111 11111111 11110101 -&gt; 4,294,967,285\n    printf(\"Ex 3: %u\\n\", result3);\n\n\n\n    // bitwise xor - ^\n    unsigned int result4 = a ^ b;\n    /*\n        1010    &lt;- 10\n    ^   1111    &lt;- 15\n    =   0101    -&gt;  5\n    */  \n    printf(\"Ex 4: %u\\n\", result4);\n\n\n    // right shift - &gt;&gt;\n    /*\n          15 &gt;&gt; 3  \n        1111 &gt;&gt; 3 -&gt; 0001 -&gt; 1\n    */\n    u_int32_t result5 = b &gt;&gt; 3;\n    printf(\"Ex 5: %u\\n\", result5);\n\n\n    // left shift - &lt;&lt;\n    /*\n          15 &lt;&lt; 2  \n        1111 &lt;&lt; 2 -&gt; 111100 -&gt; 60\n    */\n    u_int32_t result6 = b &lt;&lt; 2;\n    printf(\"Ex 5: %u\\n\", result6);\n\n\n    // Shifting can be used for power of 2 multiplication and division:\n\n    // Left shift for power of 2 multiplication:\n    // It's faster for a machine than traditional multiplication\n    // u &lt;&lt; k = u * pow(2, k)\n    int u = 3; \n    int k = 2;\n    printf(\"%d\\n\", u &lt;&lt; k);\n    printf(\"%lf\\n\", u * pow(2, k));  // requires #include &lt;math.h&gt; directive \n\n    // Right shift for power of 2 division:\n    // u &gt;&gt; k = u / pow(2, k)\n    int u2 = 2500;\n    int k2 = 3;\n    printf(\"%d\\n\", u2 &gt;&gt; k2);\n    printf(\"%f\", u2 / pow(2, k2));  // requires #include &lt;math.h&gt; directive \n\n    printf(\"\\n\");\n    return 0;\n\n}",
    "crumbs": [
      "03 C Basics",
      "Operators"
    ]
  },
  {
    "objectID": "03 C Basics/02-DataTypes.html",
    "href": "03 C Basics/02-DataTypes.html",
    "title": "Data Types and Format Specifiers",
    "section": "",
    "text": "An example of the int data type and the corresponding format specifiers.\n#include &lt;stdio.h&gt;\n\nint main(){\n    /////// int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 4 bytes on most 32 and 64 bit machines\n    //  - 4 bytes of 0s: 00000000 00000000 00000000 00000000\n\n    printf(\"\\nints:\\n\");\n    int w;          // declaration\n    w = 10;         // initialization\n    int age = 21;   // both declaration and initilization\n\n    // print the integer associated with x\n    // %d is the format specifier for integers),\n    printf(\"The value of w is %d\\n\", w);  \n\n    // check the size on your machine\n    printf(\"The size of an int is %lu bytes\\n\", sizeof(w));\n\n    /////// short int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 2 bytes on most 32 and 64 bit machines\n    printf(\"\\nshort int:\\n\");\n    short x = 20;\n    printf(\"The value of x is `%d\\n\", x);\n    printf(\"The size of a short int is %lu bytes\\n\", sizeof(x));\n\n\n    /////// long int\n    //  - should be at least 32 bits (4 bytes)\n    //  - Typically 8 bytes on most 64 bit machines, but 4 bytes on 32 bit machines\n    printf(\"\\nlong int:\\n\");\n    long y = 20;\n    printf(\"The value of y is `%ld\\n\", y);\n    printf(\"The size of a long is %lu bytes\\n\", sizeof(y));\n\n    /////// long long int\n    //  - should be at least 64 bits (8 bytes)\n    //  - Typically 8 bytes\n    printf(\"\\nlong int:\\n\");\n    long long int z = 20;\n    printf(\"The value of z is `%lld\\n\", z);\n    printf(\"The size of a long long is %lu bytes\\n\", sizeof(z));\n\n    // unsigned versions of the above also\n    //  - Range includes only positive values\n    printf(\"\\nunsigned int:\\n\");\n    unsigned int u = 20;\n    printf(\"The value of u is %u\\n\", u);\n    printf(\"The size of an unsigned int is %lu bytes\\n\", sizeof(u));\n}",
    "crumbs": [
      "03 C Basics",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "03 C Basics/02-DataTypes.html#ints",
    "href": "03 C Basics/02-DataTypes.html#ints",
    "title": "Data Types and Format Specifiers",
    "section": "",
    "text": "An example of the int data type and the corresponding format specifiers.\n#include &lt;stdio.h&gt;\n\nint main(){\n    /////// int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 4 bytes on most 32 and 64 bit machines\n    //  - 4 bytes of 0s: 00000000 00000000 00000000 00000000\n\n    printf(\"\\nints:\\n\");\n    int w;          // declaration\n    w = 10;         // initialization\n    int age = 21;   // both declaration and initilization\n\n    // print the integer associated with x\n    // %d is the format specifier for integers),\n    printf(\"The value of w is %d\\n\", w);  \n\n    // check the size on your machine\n    printf(\"The size of an int is %lu bytes\\n\", sizeof(w));\n\n    /////// short int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 2 bytes on most 32 and 64 bit machines\n    printf(\"\\nshort int:\\n\");\n    short x = 20;\n    printf(\"The value of x is `%d\\n\", x);\n    printf(\"The size of a short int is %lu bytes\\n\", sizeof(x));\n\n\n    /////// long int\n    //  - should be at least 32 bits (4 bytes)\n    //  - Typically 8 bytes on most 64 bit machines, but 4 bytes on 32 bit machines\n    printf(\"\\nlong int:\\n\");\n    long y = 20;\n    printf(\"The value of y is `%ld\\n\", y);\n    printf(\"The size of a long is %lu bytes\\n\", sizeof(y));\n\n    /////// long long int\n    //  - should be at least 64 bits (8 bytes)\n    //  - Typically 8 bytes\n    printf(\"\\nlong int:\\n\");\n    long long int z = 20;\n    printf(\"The value of z is `%lld\\n\", z);\n    printf(\"The size of a long long is %lu bytes\\n\", sizeof(z));\n\n    // unsigned versions of the above also\n    //  - Range includes only positive values\n    printf(\"\\nunsigned int:\\n\");\n    unsigned int u = 20;\n    printf(\"The value of u is %u\\n\", u);\n    printf(\"The size of an unsigned int is %lu bytes\\n\", sizeof(u));\n}",
    "crumbs": [
      "03 C Basics",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "03 C Basics/02-DataTypes.html#chars",
    "href": "03 C Basics/02-DataTypes.html#chars",
    "title": "Data Types and Format Specifiers",
    "section": "Chars",
    "text": "Chars\nAn example of the int data type and the corresponding format specifiers.\n#include &lt;stdio.h&gt;\n\nint main(){\n    // char \n    //      - single character\n    //      - 1 byte of memory (8 bits)\n    //      - can also store integers -128 to +127; \n    //      - note that integers correspond to ASCII values\n    //      - unsigned char can store from 0 to 255 since they're all positive;\n\n    char letter = 'a';\n    printf(\"\\nletter: %c\\n\", letter);\n    printf(\"size: %lu byte\\n\", sizeof(letter));\n\n    char another = 100;\n    printf(\"\\nanother - as char: %c\\n\", another);\n    printf(\"another - as int: %d\\n\", another); \n    printf(\"size: %lu byte\\n\", sizeof(another));\n\n\n    unsigned char anotherOne = 250; // outside bounds of ascii\n    printf(\"\\nanotherOne - as char: %c\\n\", anotherOne);\n    printf(\"anotherOne - as int: %d\\n\", anotherOne);\n    printf(\"size: %lu byte\\n\", sizeof(anotherOne));\n\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "03 C Basics/02-DataTypes.html#floats-and-doubles",
    "href": "03 C Basics/02-DataTypes.html#floats-and-doubles",
    "title": "Data Types and Format Specifiers",
    "section": "Floats and Doubles",
    "text": "Floats and Doubles\nAn example of floats and doubles.\n#include &lt;stdio.h&gt;\n\nint main(){\n\n    /* float\n        -  represented using a 32-bit IEEE 754 single precision floating point number\n            -  8 bits for the exponent\n            -  24 for the signicand\n                - 1 bit for sign\n                - 23 for mantissa\n        - note that you cannot trust precion after a certain number of decimal places.\n        - the following code showcases that. \n    */\n    \n    float x = 12.1234567890123456789012;\n    printf(\"x: %.22f\\n\", x);\n    long int numBits = sizeof(x) * 8;\n    printf(\"size of x: %lu bytes\\n\", sizeof(x));\n    printf(\"size of x: %lu bits \\n\", numBits);\n\n\n    /* double\n        -  represented using a 64-bit IEEE 754 double precision floating point number\n            -  11 bits for the exponent\n            -  53 bits for the significand\n                - 1 bit for sign\n                - 52 for mantissa\n\n        - note that you cannot trust precion after a certain number of decimal places.\n        - the following code showcases that.        \n    */\n    double y = 12.1234567890123456789012;\n    printf(\"\\ny: %.22lf\\n\", y);\n    numBits = sizeof(y) * 8;\n    printf(\"size of y: %lu bytes\\n\", sizeof(y));\n    printf(\"size of y: %lu bits \\n\", numBits);\n\n    return 0;\n}",
    "crumbs": [
      "03 C Basics",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "03 C Basics/01-HelloWorld.html",
    "href": "03 C Basics/01-HelloWorld.html",
    "title": "Hello World",
    "section": "",
    "text": "Before completing any of the following, be sure your system can compile c programs.\nTo check if you can compile c programs, open the terminal and type gcc --version. gcc is the GNU Compiler Collection. If you hit an error, you can install it on your Ubuntu virutal machine using the following:\n# this command installs gcc, g++, libc6-dev, make, and dpkg-dev\nsudo apt-get build-essential\nOnce installed, run the command gcc --version again.",
    "crumbs": [
      "03 C Basics",
      "Hello World"
    ]
  },
  {
    "objectID": "03 C Basics/01-HelloWorld.html#setting-up",
    "href": "03 C Basics/01-HelloWorld.html#setting-up",
    "title": "Hello World",
    "section": "",
    "text": "Before completing any of the following, be sure your system can compile c programs.\nTo check if you can compile c programs, open the terminal and type gcc --version. gcc is the GNU Compiler Collection. If you hit an error, you can install it on your Ubuntu virutal machine using the following:\n# this command installs gcc, g++, libc6-dev, make, and dpkg-dev\nsudo apt-get build-essential\nOnce installed, run the command gcc --version again.",
    "crumbs": [
      "03 C Basics",
      "Hello World"
    ]
  },
  {
    "objectID": "03 C Basics/01-HelloWorld.html#hello-world",
    "href": "03 C Basics/01-HelloWorld.html#hello-world",
    "title": "Hello World",
    "section": "Hello World!",
    "text": "Hello World!\nCreate a file called hello.c and put the following contents in it.\n#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"Hello World!\"); // No new line unless you say to do it.\n    printf(\"Hello again!\\n\"); // Now has a new line\n    printf(\"Hello there!\");\n\n    return 0;\n}\nCompile the program with the following command:\ngcc hello.c -o hello\nIn the command, we invoke gcc to compile the program called hello.c. We use the -o flag to specify the name of the executable file that the compiliation process outputs. In this case, we are calling it hello.\nTo run the executable file, type ./hello into the terminal. You should see the three messages printed in the terminal.",
    "crumbs": [
      "03 C Basics",
      "Hello World"
    ]
  },
  {
    "objectID": "03 C Basics/01-HelloWorld.html#command-line-input",
    "href": "03 C Basics/01-HelloWorld.html#command-line-input",
    "title": "Hello World",
    "section": "Command Line Input",
    "text": "Command Line Input\nThe following program shows how to take command line input.\n#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]){\n    // ^ a standard signature for taking in command line arguments\n    // argc represents the number of arguments coming in. \n    // argv a pointer to where the arguments are stored in memory\n    \n    // printing the inputs\n    printf(\"argc: %d\\n\", argc);\n    \n    for (int i=0; i &lt; argc; i++){\n        printf(\"argv[%d]: %s\\n\", i, argv[i]);\n    }\n\n    // argv ends with a null pointer\n    printf(\"argv[%d]: %s\\n\", argc, argv[argc]);\n\n    return 0;\n}\nCompile and run the program, but provide space separated arguments on execution.\nExample: In this example the executable is named CommandLineArgs and the arguments hi, how, are, and you are provided.\n./CommandLineArgs hi how are you",
    "crumbs": [
      "03 C Basics",
      "Hello World"
    ]
  },
  {
    "objectID": "02 Terminal/06 Grep and Regex.html",
    "href": "02 Terminal/06 Grep and Regex.html",
    "title": "Grep and Regex",
    "section": "",
    "text": "Grep is a command used to search through the contents of files using regular expressions. A regular expression is a sequence of characters that represents a search pattern.\nGrep stands for Globally search for a Regular Expression and Print\nA typical format for using the grep command is as follows:\ngrep [flags] [search string] [file or files]\n\n\nThe following are some common flags on may use with grep and their meaning. This is not an exhaustive list. For more information on the flags, use the man grep command.\nFlag        Meaning\n-i          ignore case for the search string\n-r          search recursively into a directory and the files in that directory\n-c          count the number of lines the search string occurrs on in each file\n-o          show each occurrence on its own line when the result is printed\n-P          allow the use of PCRE (Perl Compatible regular expressions)\nConcerning the last flag, we will be using Perl compatible regular expresssions as it greatly enhannces pattern matching and allows for more concise expressions compared to standard regular expressions.\nAny of the above flags can be combined, as will be shown in a few examples that follow.\n\n\n\n\n\n\ngrep on macOS\n\n\n\nIf you’re using macOS, the built in grep command does not highlight the matches when printing the result like it does in Ubuntu. To get highlighted matches, download GNU grep using the command brew install grep. If you do not have homebrew installed, install instructions are found at (https://brew.sh/)https://brew.sh/.\nAfter installing, use the command ggrep in place of grep.\nYou can use the flag --color with ggrep to force text highlighting.\n\n\n\n\n\n\nDownload the following zip file and extract it for the remainder of the examples on this page.\nwget https://jcoriell.github.io/csc222/files/files-for-cats.zip\nunzip files-for-cats.zip -d files-for-cats\nrm files-for-cats.zip\ncd files-for-cats \nFind Cat in main.py\ngrep Cat main.py\nExpected result: (coming soon)\nFind cat in main.py\ngrep cat main.py\nExpected result: (coming soon)",
    "crumbs": [
      "02 Terminal",
      "Grep and Regex"
    ]
  },
  {
    "objectID": "02 Terminal/06 Grep and Regex.html#grep",
    "href": "02 Terminal/06 Grep and Regex.html#grep",
    "title": "Grep and Regex",
    "section": "",
    "text": "Grep is a command used to search through the contents of files using regular expressions. A regular expression is a sequence of characters that represents a search pattern.\nGrep stands for Globally search for a Regular Expression and Print\nA typical format for using the grep command is as follows:\ngrep [flags] [search string] [file or files]\n\n\nThe following are some common flags on may use with grep and their meaning. This is not an exhaustive list. For more information on the flags, use the man grep command.\nFlag        Meaning\n-i          ignore case for the search string\n-r          search recursively into a directory and the files in that directory\n-c          count the number of lines the search string occurrs on in each file\n-o          show each occurrence on its own line when the result is printed\n-P          allow the use of PCRE (Perl Compatible regular expressions)\nConcerning the last flag, we will be using Perl compatible regular expresssions as it greatly enhannces pattern matching and allows for more concise expressions compared to standard regular expressions.\nAny of the above flags can be combined, as will be shown in a few examples that follow.\n\n\n\n\n\n\ngrep on macOS\n\n\n\nIf you’re using macOS, the built in grep command does not highlight the matches when printing the result like it does in Ubuntu. To get highlighted matches, download GNU grep using the command brew install grep. If you do not have homebrew installed, install instructions are found at (https://brew.sh/)https://brew.sh/.\nAfter installing, use the command ggrep in place of grep.\nYou can use the flag --color with ggrep to force text highlighting.\n\n\n\n\n\n\nDownload the following zip file and extract it for the remainder of the examples on this page.\nwget https://jcoriell.github.io/csc222/files/files-for-cats.zip\nunzip files-for-cats.zip -d files-for-cats\nrm files-for-cats.zip\ncd files-for-cats \nFind Cat in main.py\ngrep Cat main.py\nExpected result: (coming soon)\nFind cat in main.py\ngrep cat main.py\nExpected result: (coming soon)",
    "crumbs": [
      "02 Terminal",
      "Grep and Regex"
    ]
  },
  {
    "objectID": "02 Terminal/old/texteditors.html",
    "href": "02 Terminal/old/texteditors.html",
    "title": "Text Editors",
    "section": "",
    "text": "a terminal based text editor\nsteep learning curve, but very powerful\nOnce you get a hang of it, it’s a good way to feel like you’re better than everyone else\nfor help learning, run the command vimtutor in the terminal\n\n\n\nIn this example, we create a file, open it in vim, and add “hello world” to it.\n\nCreate the file and open it in vim\ncd ~\nmkdir vim-practice\ncd vim-practice\ntouch helloworld.txt\nvim helloworld.txt\nSwitch to insert mode by typing i\n\nmodes:\n\ni for insert (escape to back out)\nv for visual\nshift+r for replace\n: for commands\n\n:wq to save and quit\n\nType hello world.\nPress the escape key to back out.\nSave and exit by typing :wq.\nRun cat helloworld.txt to see the contents.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Text Editors"
    ]
  },
  {
    "objectID": "02 Terminal/old/texteditors.html#vim",
    "href": "02 Terminal/old/texteditors.html#vim",
    "title": "Text Editors",
    "section": "",
    "text": "a terminal based text editor\nsteep learning curve, but very powerful\nOnce you get a hang of it, it’s a good way to feel like you’re better than everyone else\nfor help learning, run the command vimtutor in the terminal\n\n\n\nIn this example, we create a file, open it in vim, and add “hello world” to it.\n\nCreate the file and open it in vim\ncd ~\nmkdir vim-practice\ncd vim-practice\ntouch helloworld.txt\nvim helloworld.txt\nSwitch to insert mode by typing i\n\nmodes:\n\ni for insert (escape to back out)\nv for visual\nshift+r for replace\n: for commands\n\n:wq to save and quit\n\nType hello world.\nPress the escape key to back out.\nSave and exit by typing :wq.\nRun cat helloworld.txt to see the contents.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Text Editors"
    ]
  },
  {
    "objectID": "02 Terminal/old/texteditors.html#nano",
    "href": "02 Terminal/old/texteditors.html#nano",
    "title": "Text Editors",
    "section": "Nano",
    "text": "Nano\n\nanother terminal based text editor\nsimpler to use than vim\n\n\nExample\nIn this example, we create a file and add “hello world” to it using nano.\n\nRun the following commands\ncd ~\nmkdir nano-practice\ncd nano-practice\ntouch helloworld.txt\nnano helloworld.txt\nAt this point, the file should be open. Type hello world on the first line.\nType ctrl + x to be prompted to save and close.\nRun cat helloworld.txt to see the contents.",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Text Editors"
    ]
  },
  {
    "objectID": "02 Terminal/old/index.html",
    "href": "02 Terminal/old/index.html",
    "title": "Introduction",
    "section": "",
    "text": "In this section we explore various commands of a bash shell.\nContents:\n\nBackground"
  },
  {
    "objectID": "02 Terminal/old/index.html#overview",
    "href": "02 Terminal/old/index.html#overview",
    "title": "Introduction",
    "section": "",
    "text": "In this section we explore various commands of a bash shell.\nContents:\n\nBackground"
  },
  {
    "objectID": "02 Terminal/old/basic.html",
    "href": "02 Terminal/old/basic.html",
    "title": "Introduction to the Shell and Terminal",
    "section": "",
    "text": "Def: The shell is a program (interpreter) that takes the commands you type and passes them to the operating system for execution.\nDef: The terminal is the interface the user interacts with. This is where you type the commands for the shell.\nCommon Shells include:\n- Bourn Again Shell (bash - linux distros, macOS)\n- z-shell (zsh - linux distros, macOS)\n- powershell (windows)\n- gitbash (windows)",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "02 Terminal/old/basic.html#introduction",
    "href": "02 Terminal/old/basic.html#introduction",
    "title": "Introduction to the Shell and Terminal",
    "section": "",
    "text": "Def: The shell is a program (interpreter) that takes the commands you type and passes them to the operating system for execution.\nDef: The terminal is the interface the user interacts with. This is where you type the commands for the shell.\nCommon Shells include:\n- Bourn Again Shell (bash - linux distros, macOS)\n- z-shell (zsh - linux distros, macOS)\n- powershell (windows)\n- gitbash (windows)",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "02 Terminal/old/basic.html#controls",
    "href": "02 Terminal/old/basic.html#controls",
    "title": "Introduction to the Shell and Terminal",
    "section": "Controls",
    "text": "Controls\nThese are basic controls that are useful for using the terminal.\nup - show previous command\ndown - show next command\ntab - autocomplete\nctrl + l - clear\nctrl + c - cancel\nctrl + r - search\nctrl + d - close the terminal\nctrl + a - jump to the beginning of the line\nctrl + e - jump to the end of the line\nalt + [left arrow key/right arrow key] - move the cursor left/right by the word",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "02 Terminal/old/basic.html#some-basic-commands",
    "href": "02 Terminal/old/basic.html#some-basic-commands",
    "title": "Introduction to the Shell and Terminal",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\nA set of basic commands for your reference. Complete usage is not illustrated.\nsudo - use when you need superuser privelages (short for superuser do)\npwd - print working directory\nmkdir [new directory name] - create a new directory\ntouch [new file name] - create a file\nls - list the contents of the a directory\ncd [destination] - change the directory\nman [command] - show the manual for a command\nrm [filename] - remove a file\nrmdir [directory name] - remove a directory\n\nExample\nThis example illustrates some usage of the commands above.\ncd ~                # navigate to the home directory\nmkdir example-1     # create a directory named example-1\ncd example-1        # navigate into the directory named example-1\npwd                 # print the current working directory just to see \ntouch new-file.txt  # create a file named new-file.txt\ntouch .secret-file  # create a file that starts with a .\nls                  # list out the files in the current directory\nls -a               # list all the files (including hidden ones)\nls -alh             # list the files, include details about each one, in a human readable format\ncd ..               # go up one directory\nrm -rf example-1    # remove the folder your created and everything in it",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "02 Terminal/old/basic.html#more-commands",
    "href": "02 Terminal/old/basic.html#more-commands",
    "title": "Introduction to the Shell and Terminal",
    "section": "More Commands",
    "text": "More Commands\nA set of more commands for your reference. Complete usage is not illustrated.\ncat [filename] - returns the contents of the file\nmore [filename] - allows you to view the contents in a paginated manner\necho [a message] - returns the message\ncp [source] [destination] - copies a file from the source to a destination\nmv [source] [destination] - moves a file from the source to a destination\nhistory - see the history of previous commands that were typed\nclear - clears what is displayed in the terminal\nwget [url] - downloads the contents at the url\n\nExample\nThe following is an an example of using some of the commands above.\ncd ~                                                    # navigate home\nmkdir books                                             # create a directory called books\ncd books\necho \"Let's download a book\"                            # produce a message\nwget https://www.gutenberg.org/cache/epub/98/pg98.txt   # download \"A Tale of Two Cities\"\nls                                                      # list the files\nmv pg98.txt a-tale-of-two-cities.txt                    # rename the book\nmore a-tale-of-two-cities.txt                           # read the book\n\n\nReference\nA Tale of Two Cities\nCajun Night Before Christmas\nMeow",
    "crumbs": [
      "02 Terminal",
      "Old",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "02 Terminal/02 Working With Files.html",
    "href": "02 Terminal/02 Working With Files.html",
    "title": "Working with Files",
    "section": "",
    "text": "The following commands are commonly used commands for working with files.\ncat         # show the contents of a file\nmore        # show the contents of a file, forward scrolling/jumping\nless        # show the contents of a file, forward and backward scrolling\ncp          # copy a file\nmv          # move a file, rename a file\nwget        # download stuff (sudo apt install wget)\nxdg-open    # open a file or url in its default application\n\n\n\nNavigate to Desktop and create a books and music directory\ncd ~/Desktop\nmkdir books music\nNavigate into the newly created books directory and download a book\ncd books\nwget https://www.gutenberg.org/cache/epub/98/pg98.txt \nls\nRename the book\nmv pg98.txt a-tale-of-two-cities.txt\nmore a-tale-of-two-cities.txt \nDownload another book\nwget https://jcoriell.github.io/csc222/files/cnbc.txt\nmore cnbc.txt\nNavigate to the music directory from the books directory and download a song\ncd ..\ncd music\nwget https://jcoriell.github.io/csc222/files/mbe.mp3\nxdg-open mbe.mp3    # open it with the default application for the system",
    "crumbs": [
      "02 Terminal",
      "Working with Files"
    ]
  },
  {
    "objectID": "02 Terminal/02 Working With Files.html#commands",
    "href": "02 Terminal/02 Working With Files.html#commands",
    "title": "Working with Files",
    "section": "",
    "text": "The following commands are commonly used commands for working with files.\ncat         # show the contents of a file\nmore        # show the contents of a file, forward scrolling/jumping\nless        # show the contents of a file, forward and backward scrolling\ncp          # copy a file\nmv          # move a file, rename a file\nwget        # download stuff (sudo apt install wget)\nxdg-open    # open a file or url in its default application\n\n\n\nNavigate to Desktop and create a books and music directory\ncd ~/Desktop\nmkdir books music\nNavigate into the newly created books directory and download a book\ncd books\nwget https://www.gutenberg.org/cache/epub/98/pg98.txt \nls\nRename the book\nmv pg98.txt a-tale-of-two-cities.txt\nmore a-tale-of-two-cities.txt \nDownload another book\nwget https://jcoriell.github.io/csc222/files/cnbc.txt\nmore cnbc.txt\nNavigate to the music directory from the books directory and download a song\ncd ..\ncd music\nwget https://jcoriell.github.io/csc222/files/mbe.mp3\nxdg-open mbe.mp3    # open it with the default application for the system",
    "crumbs": [
      "02 Terminal",
      "Working with Files"
    ]
  },
  {
    "objectID": "02 Terminal/02 Working With Files.html#text-editors",
    "href": "02 Terminal/02 Working With Files.html#text-editors",
    "title": "Working with Files",
    "section": "Text Editors",
    "text": "Text Editors\n\nvim (Vi - Improved)\n\nsteep learning curve, but frequent users love it\nwill make you better that everyone else\ncan learn using the command vimtutor\n\nOpen with the command: vim [filename]\n\nVim Modes:\ninsert      - i to activate, escape to back out\n\nreplace     - r to enter replace mode, use it to write over text instead of inserting text\n            - escape to back out\n\nvisual      - v, V, or ctrl+v to activate character, line, or block visual mode \n            - used to select text and apply commands to that text\n            - ex: copy, cut, replace, indent, search, and more...\n            - escape to back out \n\ncommand     - : to activate. Some common commands:\n            - w to save\n            - q to quit\n            - wq or x to save and quit\n            - q! to quit without saving\n            - e [filename] to open a file\n            - saveas [filename] to save the file as a new name\n            - [an integer] to jump to a line\n\n\nExample\n\nUse the following two commands to create a file somewhere on your system.\ncd ~/Desktop/programs               # navigate to a folder to complete the example in\nvim random_number_generator.py      # open a file (it is ok if the file doesn't exist yet)\nAt this point vim should have opened.\nType i to enter insert mode and type the following code.\nimport random\n\nprint(random.randint())\nNow hit escape to exit insert mode.\nMove the cursor to the beginning of the word randint\nHit v to enter visual mode.\nUse the e key to go to the END of the word (b goes to the Beginning)\nUse the c key to CHANGE the selected text to random. (we are replacing randint with random)\nAt this point the python code should look like this:\nimport random\n\nprint(random.random())\nUse escape to exit insert mode.\nUse : to enter command mode.\nType wq and hit enter to save and exit.\nIf you’d like to run the code, use the following command:\npython3 random_number_generator.py\n\n\n\n\n\n\n\nTip\n\n\n\nIt is recommended at this point that you run the vimtutor command if you’d like to learn more about using vim.\n\n\n\n\n\nNano\n\na simple to use terminal based text editor\nlittle to no learning curve\n\n\nExample\nIn this example, we create a file and add “hello world” to it using nano.\n\nRun the following commands\ncd ~/Desktop/programs       # navigate to a folder to store a file\ntouch helloworld.py\nnano helloworld.py\nAt this point, the file should be open. Type print(\"hello world\") on the first line.\nType ctrl + x to be prompted to save and close.\nRun cat helloworld.py to see the contents.\nRun python3 helloworld.py to run the file.",
    "crumbs": [
      "02 Terminal",
      "Working with Files"
    ]
  },
  {
    "objectID": "02 Terminal/02 Working With Files.html#reference-files",
    "href": "02 Terminal/02 Working With Files.html#reference-files",
    "title": "Working with Files",
    "section": "Reference Files",
    "text": "Reference Files\n\nReference\nA Tale of Two Cities\nCajun Night Before Christmas\nMeow",
    "crumbs": [
      "02 Terminal",
      "Working with Files"
    ]
  },
  {
    "objectID": "02 Terminal/00 Background.html",
    "href": "02 Terminal/00 Background.html",
    "title": "Background",
    "section": "",
    "text": "Definition\n\n\n\nThe shell is an interpreter that takes the commands you type and passes them to the operating system for execution.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nThe Terminal (or Terminal Emulator) is an application that the user interacts with in order to interact with the shell.\n\n\nNote: We frequently use these terms interchangably, although they are different things.",
    "crumbs": [
      "02 Terminal",
      "Background"
    ]
  },
  {
    "objectID": "02 Terminal/00 Background.html#terminal-vs-shell",
    "href": "02 Terminal/00 Background.html#terminal-vs-shell",
    "title": "Background",
    "section": "",
    "text": "Definition\n\n\n\nThe shell is an interpreter that takes the commands you type and passes them to the operating system for execution.\n\n\n\n\n\n\n\n\nDefinition\n\n\n\nThe Terminal (or Terminal Emulator) is an application that the user interacts with in order to interact with the shell.\n\n\nNote: We frequently use these terms interchangably, although they are different things.",
    "crumbs": [
      "02 Terminal",
      "Background"
    ]
  },
  {
    "objectID": "02 Terminal/00 Background.html#various-shells",
    "href": "02 Terminal/00 Background.html#various-shells",
    "title": "Background",
    "section": "Various Shells",
    "text": "Various Shells\n\nbash - bash stands for Bourn Again SHell. Most unix-like systems use the bash shell.\nzsh - Read allowed as zsh or as Z shell. A bash-like shell.\npowershell - PowerShell is a cross-platform task automation solution made up of a command-line shell, a scripting language, and a configuration management framework [source]\ngitbash - bash emulation for windows [source]\nfish - friendly interactive shell [source]",
    "crumbs": [
      "02 Terminal",
      "Background"
    ]
  },
  {
    "objectID": "02 Terminal/00 Background.html#various-terminals",
    "href": "02 Terminal/00 Background.html#various-terminals",
    "title": "Background",
    "section": "Various Terminals",
    "text": "Various Terminals\n\nTerminal application on macOS\nTerminal application on Ubuntu\nTerminal application on Windows",
    "crumbs": [
      "02 Terminal",
      "Background"
    ]
  },
  {
    "objectID": "02 Terminal/00 Background.html#absolute-vs-relative-filepaths",
    "href": "02 Terminal/00 Background.html#absolute-vs-relative-filepaths",
    "title": "Background",
    "section": "Absolute vs Relative Filepaths",
    "text": "Absolute vs Relative Filepaths\nAbsolute filepaths describe the filepath from the root of the filesystem.\nRelative filepaths describe the filepath from where you currently are.\nIf it starts with a /, or the ~, then it is an absolute filepath. If not, it is relative.",
    "crumbs": [
      "02 Terminal",
      "Background"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html",
    "href": "02 Terminal/05 File Permissions.html",
    "title": "File Permissions",
    "section": "",
    "text": "File permissions are expressed with a 10 character string.\nTo see the file permissions for files in a directory run ls -l.\nThe output will resemble the following:\ndrwxr-xr-x 2 josh josh 4096 Nov 29 15:32 Desktop\ndrwxr-xr-x 3 josh josh 4096 Nov 30 11:14 Documents\ndrwxr-xr-x 2 josh josh 4096 Nov 29 11:26 Downloads\nThe first set of characters such as drwxr-xr-x denotes the file permissions.\nThe second column represents the number of links to that file (2, 3, and 2 respectively.)\nThe third and fouth columns denote the user and group assigned to the file.\nThe fifth column represents the size for that file (4096 bytes for each of the above.)\nThe sixth column is the last date the file was modified.\nThe final column is the name of the file (directories in this case).",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html#introduction",
    "href": "02 Terminal/05 File Permissions.html#introduction",
    "title": "File Permissions",
    "section": "",
    "text": "File permissions are expressed with a 10 character string.\nTo see the file permissions for files in a directory run ls -l.\nThe output will resemble the following:\ndrwxr-xr-x 2 josh josh 4096 Nov 29 15:32 Desktop\ndrwxr-xr-x 3 josh josh 4096 Nov 30 11:14 Documents\ndrwxr-xr-x 2 josh josh 4096 Nov 29 11:26 Downloads\nThe first set of characters such as drwxr-xr-x denotes the file permissions.\nThe second column represents the number of links to that file (2, 3, and 2 respectively.)\nThe third and fouth columns denote the user and group assigned to the file.\nThe fifth column represents the size for that file (4096 bytes for each of the above.)\nThe sixth column is the last date the file was modified.\nThe final column is the name of the file (directories in this case).",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html#file-permission-breakdown",
    "href": "02 Terminal/05 File Permissions.html#file-permission-breakdown",
    "title": "File Permissions",
    "section": "File Permission Breakdown",
    "text": "File Permission Breakdown\nLet’s break down the permission string drwxr-xr-x.\n\nThe 1st character is the type of file. The most common characters you will see here are:\n- for file.\nd for directory.\nl for link.\nIn the permissions drwxr-xr-x, the first character is d, so we have a directory.\nThe next 9 characters are for 3 different permission classes\n\nThe owner of the file is the first set of 3 characters.\nIn the string drwxr-xr-x, we have rwx which means the owner can read, write, and execute the file.\nThe group for the file is the second set of 3.\nIn the string drwxr-xr-x, we have r-x which means anyone in the group for the file (users belong to groups) can read and execute the file.\nThe third set of 3 are for all other users (those not in the same user group, and not the owner)\nIn the string drwxr-xr-x, we have r-x which means all others can read and execute the file, but cannot modify it.",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html#changing-file-permissions",
    "href": "02 Terminal/05 File Permissions.html#changing-file-permissions",
    "title": "File Permissions",
    "section": "Changing File Permissions",
    "text": "Changing File Permissions\nWe use the command chmod to change the file permissions. You can use either of the following methods to change the permissions.",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html#using-the-characters-that-represent-the-permissions",
    "href": "02 Terminal/05 File Permissions.html#using-the-characters-that-represent-the-permissions",
    "title": "File Permissions",
    "section": "Using the characters that represent the permissions",
    "text": "Using the characters that represent the permissions\nThe characters for each type of user are:\n\nu for owner\ng for group\no for others\na for all\n\nThe characters for permissions are:\n\nr for read\nw for write\nx for execute\n\nTo add permissions, combine a usertype character with + and one or more of the permission characters.\nTo remove permissions, combine a usertype character with - and one or more of the permission characters.\n\nSamples\n\nchmod u+rwx filename to give read write and execute permissions to the owner.\nchmod g-x filename to remove execute permissions from the group.\n\n\n\nExample\n\nNavigate to a directory to work with. You may need to create one.\ncd ~/Desktop/programs/bash-scripts   \nCreate a bash script we can work with.\necho \"echo hello permissions\" &gt; permission-ex.sh \nView the permissions for all the files in this directory, or just the bash file.\nls -l                    # all the files\nls -l permission-ex.sh   # just permissions for that one file\nNotice it was not executable by the user.\nTry executing it just to see the error.\n./permission-ex.sh            # attempt to execute the file, get an error \nAdd execution permission and try to execute it again.\nchmod u+x                     # allow the user to execute the file \nls -l permission-ex.sh        # show the permissions again\n./permission-ex.sh            # execute successfully",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html#using-numeric-values",
    "href": "02 Terminal/05 File Permissions.html#using-numeric-values",
    "title": "File Permissions",
    "section": "Using Numeric Values",
    "text": "Using Numeric Values\nThe values for each type of permission are:\nr = 4\nw = 2\nx = 1\nYou can place them adjacent to each other to get combos\nrw  = 4 + 2     = 6\nrwx = 4 + 2 + 1 = 7\nwx  =     2 + 1 = 3\nrx  = 4     + 1 = 5\nWhen referencing the permission string, notice that this is simply binary on a set of 3 characters. For example, with the string drwxr-xr-x we have:\nd    r w x    r - x    r - x\n     4 2 1    4   1    4   1\n\nSum:     7        5        5\nPermission is 755\n\nSample\n\nchmod 766 filename to give:\n\nrwx permissions to the owner\nrw permissions to the group\n\nrw permissions to the others\n\n\n\n\nExample\n\nCreate a file to work with.\ncd ~/Desktop/programs/bash-scripts\necho \"echo hello from bash\" &gt; perm-ex-2.sh\nList the permissions.\nls -l perm-ex-2.sh\nAllow the user to execute the file, group to read and execute, others to read and execute\nchmod 755 perm-ex-2.sh\nView the permissions and execute the file.\nls -l \n./perm-ex-2.sh",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "02 Terminal/05 File Permissions.html#changing-ownership",
    "href": "02 Terminal/05 File Permissions.html#changing-ownership",
    "title": "File Permissions",
    "section": "Changing Ownership",
    "text": "Changing Ownership\nThe command chown will change the ownership of a file\nFormat:\nsudo chown [new_owner] [filename]\nsudo chown :[new_group] [filename]\nsudo chown [new_owner] :[new_group] [filename]\n\nExample:\n\nCreate a new user.\nsudo useradd betty      # create a new user \nSet the password for the new user. Note that you will be prompted for a password after executing the following command.\nsudo passwd betty       # set the password for the new user\nSet the user for the perm-ex-2.sh file.\nsudo chown betty perm-ex-2.sh \nSet the group for the perm-ex-2.sh file.\nsudo chown :betty perm-ex-2.sh",
    "crumbs": [
      "02 Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html",
    "title": "Representing and Manipulating Information",
    "section": "",
    "text": "A binary value can be interpreted in various ways. In this section we look at various encodings of binary values including unsigned binary, two’s complement, and IEEE 754 floating point notation. Additionally, we look at how binary values can be represented using hexadecimal.\nAssume we have the 32-bits 11000001 00001100 00000000 00000000\nAs an unsigned integer value, or regular unsiged binary, this could be interpreted as the base 10 value of 3238789120.\nIf we were using a two’s complement encoding, the same 32-bit value could also be interpreted as the base 10 value -1056178176, as is done in C when the data type of a variable is an int.\nUnder a IEEE 754 standards for floating point notation, the same set of 32-bits could be interpreted as the base 10 value -8.75, as is done in C when the data type is a float.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#overview-of-binary-representations",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#overview-of-binary-representations",
    "title": "Representing and Manipulating Information",
    "section": "",
    "text": "A binary value can be interpreted in various ways. In this section we look at various encodings of binary values including unsigned binary, two’s complement, and IEEE 754 floating point notation. Additionally, we look at how binary values can be represented using hexadecimal.\nAssume we have the 32-bits 11000001 00001100 00000000 00000000\nAs an unsigned integer value, or regular unsiged binary, this could be interpreted as the base 10 value of 3238789120.\nIf we were using a two’s complement encoding, the same 32-bit value could also be interpreted as the base 10 value -1056178176, as is done in C when the data type of a variable is an int.\nUnder a IEEE 754 standards for floating point notation, the same set of 32-bits could be interpreted as the base 10 value -8.75, as is done in C when the data type is a float.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#bytes-and-hex",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#bytes-and-hex",
    "title": "Representing and Manipulating Information",
    "section": "Bytes and Hex",
    "text": "Bytes and Hex\nRecall that one byte is 8 bits. Thus one byte can hold the binary values from 00000000 through 11111111, or as integers in base 10, 0 through 255.\nAs we add more bytes, writing binary values can become lengthy, thus using hexadecimal reduces the number of digits we have, making it easier to look at and communicate to others.\nThe values 00000000 through 11111111 can be represented in hexadecimal as 00 through FF. Recall that hexadecimal uses the characters 0 through 9 and A - F to represent the base 10 quantities of 0 through 15.\nIn C, we can represent our hexadecimal values by putting a 0x in front of them. We will use this notation moving foward to represent hex values.\nExample:\n// the hex value FA1D37B in c\nint num = 0xFA1D37B\nNotice that each character in hex represents 4-bits or half a byte. Thus every 2 hex digits represents 1 full byte.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#word",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#word",
    "title": "Representing and Manipulating Information",
    "section": "Word",
    "text": "Word\nMachine have what we refer to as word size. Unlike the term byte where a byte always represents 8 bits, the word-size of one machine is not necessarily the same number of bits from one machine to another.\nThe word size of a machine is the nominal size of integer-valued data. On a 64-bit machine, ints are typically 8 bytes (i.e. 64 bits), thus the word size is 64-bits. On 32-bit machines, ints are typically 4 bytes (i.e. 32-bits), thus the word size is 32-bits.\nNote that the integer size of the machine may or may not be the size of an int for a specific language. In c, when we declare ints, they are 4 bytes, even on most 64-bit machines.\nMost current machines are 64-bit (8 bytes) - potentially address 1.8 * 10^19 bytes - Older machines are 32-bits (4 bytes) - limits addresses to 4GB - too small for memory intensive applications - Machines support multiple data formats - Fractions or multiples of word size - Always integral number of bytes\nWord-Oriented Memory Organization - Addresses specifiy Byte Locations - Address of the first byte in word - Addresses of successive words differ by 4 (32-bit) or 8 (64-bit)",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#data-representation-in-c",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#data-representation-in-c",
    "title": "Representing and Manipulating Information",
    "section": "Data Representation in C",
    "text": "Data Representation in C\n-Sizes of C data Types (in bytes)\nC Data Types    Typical 64-bit      Typical 32-bit\n    int                     4                   4\n    long int                8                   4\n    char                    1                   1\n    short                   2                   2\n    float                   4                   4\n    double                  8                   8\n    char *                  8                   4",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#byte-ordering-conventions",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#byte-ordering-conventions",
    "title": "Representing and Manipulating Information",
    "section": "Byte Ordering Conventions",
    "text": "Byte Ordering Conventions\nThe Big Endian convention places the least significant byte at the highest address.\nThe Little Endian convention places the least significant byte has lowest address space.\n\nExample:\nAssume, in c, we have a variable x such that x = 0x01234567 If we call on &x to get the address, we would receive 0x100, since it is the lowest memory address that contains any of the value.\nThe table below shows how the value is actually stored depending on if the machine is using the big endian or little endian convention.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMemory Address\n0x099\n0x100\n0x101\n0x102\n0x103\n0x104\n0x105\n\n\n\n\nBig Endian\n\n01\n23\n45\n67\n\n\n\n\nLittle Endian\n\n67\n45\n23\n01",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#bitwise-operators-in-c",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#bitwise-operators-in-c",
    "title": "Representing and Manipulating Information",
    "section": "Bitwise Operators in C",
    "text": "Bitwise Operators in C\nThe bitwise operators in c for and, or, not and exclusive are &, |, ~, and ^ respectively. That is, if we apply these to any primitive data type, the bit-level representation of the two operands will be operated on.\n\nExample: NOT\nAssume we have the variables x=0x41 and y=0xBE. Note that each is 1 byte in size (2 hex digits). Since they are only 1 byte, let’s say they represent a char.\nPerforming ~x:\n// Given\n~x             \n\n// Represent the value as it was given in hex.\n~0x41        \n\n// Note that the hex value 4 is 0100 in binary and the hex value of 1 is 0001 in binary.\n// We can represent them together as the following:\n// Note that the space is only included for visual purposes here.\n~0100 0001    \n\n// Now we apply the negation and flip every bit.           \n 1011 1110\n\n// Representing this back in it's hex form gives the following.\n// The bits 1011 are the hex value B and the bits 1110 are the hex value E.\n 0xBE   // The final result after negation and as a hex value.\n\n\nExample: AND\nFind the result (in hex) of simplifying the expression x & y when x = 0x69 and y = 0x55\nSolution:\n        Binary     Hex\n\n      01101001    0x69     // Value 1\n    & 01010101    0x55     // Value 2\n    ----------   -----\n      01000001    0x41     // Result\n\n\nExample: AND and NOT\nFind the result (in hex) of simplifying the expression ~(x & y) when x = 0xb4 and y = 0x87\nSolution:\n\n        Binary     Hex\n      10110100    0xb4      // x\n   &  10000111    0x87      // y\n   -----------   -----\n      10000100    0x84      // Intermediate result (x & y)\n\n     ~10000100    0x84      // Apply ~\n   -----------   -----\n      01111011    0x7B      // Final result ~(x & y)\n\n\nExample: OR\nFind the result (in hex) of simplifying the expression x | y when x = 0x69 and y = 0x55.\nSolution:\n        Binary     Hex\n\n      01101001    0x69     // Value 1\n    | 01010101    0x55     // Value 2\n    ----------   -----\n      01111101    0x7D     // Result   \n\n\nExample: OR\nFind the result (in hex) of simplifying the expression x | y when x = 0xb4 and y = 0x87.\nSolution:\n        Binary     Hex\n\n      10110100    0xb4\n    | 10000111    0x87\n    ----------   -----\n      10110111    0xB7\n\n\nExample: NOT, OR, and AND\nFind the result (in hex) of simplifying the expression x | ~(y & z) when x = 0xA7, y = 0x8, and z = 0x5.\nSolution:\n        Binary     Hex\n\n    // Get the intermediate result (y & z)\n        Binary     Hex\n          1000     0x8   // y\n    &     0101     0x5   // z\n    ----------   -----\n          0000     0x0   // (y & z)\n\n\n    // Get the intermediate result ~(y & z)\n        Binary     Hex\n    ~     0000     0x0   // (y & z)\n    ----------   -----\n          1111     0xF   // ~(y & z)\n\n    // Get the final result\n        Binary     Hex\n      10100111    0xA7   // x\n    | 00001111    0x0F   // ~(y & z)\n    ----------   -----\n      10101111    0xAF   // Final Result x | ~(y & z)",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#boolean-algebra",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#boolean-algebra",
    "title": "Representing and Manipulating Information",
    "section": "Boolean Algebra",
    "text": "Boolean Algebra\n\nDeveloped by George Boole in 19th Century\nEncode True as 1 and False as 0\nPrimitive/Basic gates:\n\nAnd: A&B = 1 when both A = 1 and B = 1\nOr: A|B = 1 when either A = 1 or B = 1\nNot: ~A = 1 when A = 0\n\nWe can use the primitive gate to get exclusive or (XOR):\n\nA ^ B = (~A & B) | (A & ~B)\nA ^ B = 1 When A = 1 or B = 1, but not both\n\n\n\nProperties of AND and XOR\n\n\n\nProperty\nExpression\n\n\n\n\nCommutative sum\nA ^ B = B ^ A\n\n\nCommutative product\nA & B = B & A\n\n\nAssociative sum\n(A ^ B) ^ C = A ^ (B ^ C)\n\n\nAssociative product\n(A & B) & C = A &(B & C)\n\n\nProduct over sum\nA & (B ^ C) = (A ^ B) & (A ^ C)\n\n\n0 is sum identity\nA ^ 0 = A\n\n\n1 is product identity\nA & 1 = A\n\n\n0 is product annihilator\nA & 0 = 0\n\n\nAdditive inverse\nA ^ A = 0",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#logical-operations-in-c",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#logical-operations-in-c",
    "title": "Representing and Manipulating Information",
    "section": "Logical Operations in C",
    "text": "Logical Operations in C\nThe Logical Operators are: - && for AND, - || for OR - and ! for NOT\nNote the following: - The value 0 is viewed as False - Anything else is True - The operators &&, ||, and ! will always return 0 or 1\n\nExample 1:\nFind !0x41 as a hex value.\nSolution:\n 0x41    // original value is not a zero valued quantity, thus it's boolean value is True\n!0x41   // Thus, not True is False.\n 0x00    // 0x00 is the numeric representation of False. Final Result.\n\n\nExample 2:\nFind !0x00 as a hex value.\nSolution:\n 0x00    // boolean value is False\n!0x00   // Thus, not False is True.\n 0x01    // 0x01 is the numeric representation of True. Final Result.\n\n\nExample 3:\nFind !!0x41 as a hex value.\nSolution:\n 0x41    // boolean value is True\n\n!0x41   // Thus, not True is False, resulting in 0x00\n 0x00   // result from previous application of !\n\n!0x00   // Apply another ! operator. Not False is True.\n 0x01    // 0x01 is the numeric representation of True. Final Result.\n\n\nExample 4:\nFind the result of 0x69 && 0x55 as a hex value.\nSolution:\n        Hex     Boolean Value\n       0x69              True\n    && 0x55     AND      True\n    -------     -------------\n       0x01              True\nThe final result is 0x01.\n\n\nExample 4:\nFind the result of 0x69 || 0x55 as a hex value.\nSolution:\n        Hex     Boolean Value\n       0x69              True\n    || 0x55     OR       True\n    -------     -------------\n       0x01              True\nThe final result is 0x01.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#bit-shift-operations",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#bit-shift-operations",
    "title": "Representing and Manipulating Information",
    "section": "Bit Shift Operations",
    "text": "Bit Shift Operations\n\nLeft Shift\nA left shift of bits can be performed with the &lt;&lt; operator. Note that the operator points toward the left.\nTo shift a bit vector x over by y positions, you would write x &lt;&lt; y.\nThe leftmost bits will be thrown away as you shift.\nThe right side of the bit array will be filled with 0s.\n\n\nRight Shift\nA right shift of bits can be performed with the &gt;&gt; operator. Note that the operator points toward the right.\nTo shift a bit vector x over by y positions, you would write x &gt;&gt; y.\nThe rightmost bits will be thrown away as you shift.\nIn the case of a Logical Shift, the left side of the bit array will be filled with 0s. This happens if x is an unsigned value.\nIn the case of an Arithmetic Shift, the left side of the bit array will be filled with 0s or 1s depending on the parity of the value x. That is, if x is a negative signed number, then it will fill with 1s.\n\n\nExample 1\nLet x = 0x62 be an unsigned int. Find the binary representation of x &lt;&lt; 3.\nSolution:\n\n0x62 in binary is 1100010\nHowever, recall that ints are 4 bytes, or 32-bits.\nThus, 0x62 in memory is as follows\n00000000 00000000 00000000 01100010\nNote that we have space separated the bytes for visual purposes.\nNow if we shift the bits 3 places to the left, we get the following:\n00000000 00000000 00000011 00010000\n\n\n\nExample 2\nLet x = 0x62 be an unsigned char. Find the binary representation of x &lt;&lt; 3.\nSolution:\n\n0x62 in binary is 1100010\nHowever, recall that ints are 1 byte, or 8-bits.\nThus, 0x62 in memory is as follows\n01100010\nNote that we only added a leading zero.\nNow if we shift the bits 3 places to the left, we get the following:\n00010000\nNotice how we lost several bits in the shift.\n\n\n\nExample 3\nLet x = -8 (base 10) be an signed char. Find the binary representation of x &gt;&gt; 2.\nSolution:\n\n-8 in binary, as an unsigned char is 11111000\nRecall that this uses two’s complement notation.\nIf we shift the bits 2 places to the right as an arithmetic shift, we get the following:\n11111110\nNotice how the left side was filled with 1s to maintain the sign.\nThe resulting base 10 value is -2.",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#unsigned-integers",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#unsigned-integers",
    "title": "Representing and Manipulating Information",
    "section": "Unsigned Integers",
    "text": "Unsigned Integers\nThe mapping of an unsigned binary value \\(\\vec{x}\\) to non-negative base 10 integers can be described by\n\\[B2U_w(\\vec{x}) = \\sum_{i=0}^{w-1} x_i 2^i\\]\nwhere \\(w\\) is the number of bits and \\(\\vec{x} = \\left[x_{w-1} x_{w-2}...x_1x_0\\right]\\). Note that each \\(x_i\\) is simply a digit in the binary value.\n\nExample\nUsing \\(B2U\\), convert \\(\\vec{x} = 0101\\) to base 10.\nSolution:\nFirst note that \\(w = |x| = 4\\). That is, there are 4 bits in \\(\\vec{x}\\).\nThus, we have the following:\n\\[\n\\begin{aligned}\n    B2U_w(\\vec{x}) &= \\sum_{i=0}^{w-1} x_i 2^i \\\\\n    &= \\sum_{i=0}^{4-1} x_i 2^i = \\sum_{i=0}^{3} x_i 2^i \\\\\n    &= x_0 2^0 + x_1 2^1 + x_2 2^2 + x_3 2^3 \\\\\n    &= 1 \\cdot 2^0 + 0 \\cdot 2^1 + 1 \\cdot 2^2 + 0 \\cdot 2^3 \\\\\n    &= 1 + 0 + 4 + 0 \\\\\n    &= 5\n\\end{aligned}\n\\]",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#twos-complement",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#twos-complement",
    "title": "Representing and Manipulating Information",
    "section": "Two’s Complement",
    "text": "Two’s Complement\n\nTwo’s Complement = B2T(X) = -x(w-1)2^w-1 + sum from i = 0 to i = w-2 of x(i)2^i sign bit\nsign bit: 0 is positive 1 is negative\n\nExample: char x = 123: 01111011 char y = -123: 10000101\nweight 123 -123 1 1 1 2 1 0\n4 0 1\n8 1 0\n16 1 0\n32 1 0\n64 1 0\n-128 0 1\nSUM 123 -123\nNumeric Ranges: - Unsigned values - for w = 8, UnsignedMin = 00000000 - UnsignedMax = 11111111 - for unknown w, UnsignedMax = (2w)-1\n\nTwo’s Complement\n\nfor unknown w, TMin = -2^w-1\nfor Tmax: (2^(w-1)) - 1\n\n\nExample w = 4 - Umin = 0 - Umax = 15 - Tmin = -8 - Tmax = 7\nW = 16 Decimal Hex Binary Umax 65535 FF FF 11111111 11111111 Tmax 32767 7F FF 01111111 11111111 Tmin -32768 80 00 10000000 00000000 -1 -1 FF FF 11111111 11111111 0 0 00 00 00000000 00000000\nValue for different word sizes\n                    Words\n    8      16          32              64\nUmax 255 65635 4294967295 ~18 quintillion Tmax 127 32767 2147483647 ~9 quintillion\nTmin -128 -32768 -2147483648 ~-9 quintillion\nObservations: - |Tmin| = Tmax + 1 - Umax = 2*Tmax + 1\nC programming: - #include &lt;limits.h&gt; - Declares Constants - UCHAR_MAX (=255) - CHAR_MAX (= 127) - CHAR_MIN (-128) - INT_MIN - INT_MAX - UINT_MAX\n\nC allows conversions from signed to Unsigned ex: char x = 123; unsigned char ux = (unsigned char) x;\nchar y = -123; unsigned char uy = (unsigned char) y;\nresulting values:\n\nNo change in bit representation\nNonnegative values don’t change:\n\nux = 123\n\nNegative values are changed to positive values:\n\nuy = 133\n\n\nBy default constants are signed integers\nCasting\n\nExplistic casting between signed & unsigned int tx, ty; unsigned ux, uy; tx = (int) ux; uy = (unsigned) ty;\nImplicit casting also occurs via assignments and procedural calls tx = ux; uy = ty;",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#sign-extension",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#sign-extension",
    "title": "Representing and Manipulating Information",
    "section": "Sign Extension",
    "text": "Sign Extension\nSign Extension - Task: - Given w-bit signed int x - Convert it to w + k- bit int with the same value - Rule: - Make k copies of the sign bit: - X = 0111 - X’ = 000000000…00 X",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#twos-complement-1",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#twos-complement-1",
    "title": "Representing and Manipulating Information",
    "section": "Twos Complement",
    "text": "Twos Complement\n2’s Complement and Overflow - given s = TAdd(w)(u, v) - Determine if s = Add(w)(u, v)\n\nOverflow iff either\n\nu, v &lt; 0, s &gt;= 0 (Negative overflow)\nu, v &gt;= 0, s &lt; 0 (Postive overflow)",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#power-of-2-multiplication-and-division-with-shifting",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#power-of-2-multiplication-and-division-with-shifting",
    "title": "Representing and Manipulating Information",
    "section": "Power of 2 Multiplication and Division with Shifting",
    "text": "Power of 2 Multiplication and Division with Shifting\nPower-of-2 Multiplication with Shift - Operation: - u &lt;&lt; k is equivalent u * 2^k - for signed and unsigned\n\nLeft Shift: x &lt;&lt; y\n\nshift bit vector x left by y positions\n\nthrow away extra bits on left\nFill with 0’s on the right\n\n\n\n\nExample:\n- u &lt;&lt; 3 = u*8\nPower of 2 Divide with shift - Quotient of Unsigned by Power of 2: - u &gt;&gt; k give u / 2^k - Uses logical shift\n\nQuotient of signed by power of 2\n\nu &gt;&gt; k gives u / 2^k\nuses the arithmetic shift\n\nRight shift: x &gt;&gt; y\n\nShift bit vector x by y positions\nLogical shift: fill with 0’s on the left\nArithmetic shift: Replicate the sign bit on the left",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "04 Computing Systems and Data Representation/02 Data Representation.html#ieee-754-floating-point-representation",
    "href": "04 Computing Systems and Data Representation/02 Data Representation.html#ieee-754-floating-point-representation",
    "title": "Representing and Manipulating Information",
    "section": "IEEE 754 Floating Point Representation",
    "text": "IEEE 754 Floating Point Representation\nIEEE 754 Floating Point Representation - Similar to representation fom 132 course - Used instead of sign - exponent - mantissa representation as there are many ways to represent one number in this format, unlike IEEE 754. The normalization preformed disallows this. - Implicit normalization is also more accurate than a possible explisit normalization. - Has possible precisions based on number of bits to dictate bias: - 16 bits: half-point precision - has 11 significand bits (includes sign bit), 5 bits for the exponent - bias value = 15 - 32 bits: single-point precision - has 24 significand bits (including sign bit), 8 bits for the exponent - bias value = 127 - 64 bits: double precision - has 53 significant bits (including sign bit) - bias value = 1023 - There is a quadruple and Octuple precision, but it will not be discussed further\n- Extra Notes:\n    - in the case of the following for exponent = E, mantissa = m, sign = s:\n        - E = 0000 0000, M = 00000...000, S = 0 or 1\n            - This represents +0 or -0 (same value, 0)\n        - E = 1111 1111, M = 00000...000, S = 0\n            - This represents positive infinity\n        - E = 1111 1111, M = 00000...000, S = 1\n            - This represents negative infinity\n        - 1 &lt;= E &lt;= 254, M = xxxxx...xxx, S = 0 or 1\n            - This is where we use Implicit Normalized Form\n            - Conversion completed in class (example later)\n        - S = 0 or 1, E = 0, M != 0\n            - This represents Fractional form\n            - This case has no integer part, so we use a different formula\n        - S = 0 or 1, E = 255, M != 0\n            - This results in NAN, or Not a number\n        \n\nDecoding Floating point numbers uses the following formula:\n\n(-1)^S x 1.M x 2^(E-127)\nM in this case is the implicit normalized form of the mantissa\n\nIf E = 0 and M != 0, use the following formula for fractional form:\n\n(-1)^S x 0.M x 2^(-126)\n\n\n\nExample 1\nConvert -4.25 to single precision IEEE 754 floating point number (i.e. 32-bits).\n\nConvert base number (ignoring sign) to binary\nWhole Part:\nWhole part is 4. Divide quotients by 2 repeatedly and read the remainders in reverse order to get the binary value.\n\n    4 / 2 = 2r0\n    2 / 2 = 1r0\n    1 / 2 = 0r1    // stop when quotient is 0\n\nReading the remainders in reverse gives 100\nFractional Part:\nFractional Part is 0.25. Multiply the fractional parts by 2 repeatedly and read the whole parts from the top down.\n\n               Whole part\n               |\n               | Fractional Part\n               | |  \n               v v\n    0.25 * 2 = 0.5\n    0.5  * 2 = 1.0  // stop when fractional part is 0\n\nReading the whole parts from top down gives 01.\nFinish this step by combining the whole and fractional binary results into 100.01\nImplicitly Normalize the Previous Result\nShift the radix point (decimal point) to the right of the most significant bit with a value of 1. This shift is done by multiplying your binary value by 2^k where k is the number of positions you need to shift your radix point.\n100.01 \n10.001   // shifted left one place\n1.0001   // shifted left 2 places total. stop here.\n\nThe exponent is 2 since we shifted 2 places to the left.\nWe will refer to this exponent as the TrueExponent.\n\nThe mantissa is 0001 since that is the value to the right of the radix point.\nDo not discard leading zeros in the mantissa &lt;----- IMPORTANT!!! . \nIn other words, \\(100.01 = 1.0001 * 2^2\\), \\(trueExponent = 2\\), and \\(mantissa = 0001\\).\nDo not discard the leading zeros in the mantissa.\nBias the Exponent\nApply a bias to your trueExponent value. Since we are working under single precision (32-bit), our bias is 127.\n\\[ biasedExponent = trueExponent + 127 \\] \\[ biasedExponent = 2 + 127 \\]\n\\[ biasedExponent = 129 \\]\nConvert the biased exponent to binary.\nThe exponent is represented using 8 bits in single precision.\nUsing the subtraction method:\n\\(129 - 2^7 = 1\\)\n\\(1 - 2^0 = 0\\)\nSo our binary representation is 1000 0001.\nPut it all together\nSign was -. Thus sign bit is 1.\n\nExponent was 1000 0001 \n\nThe mantissa was 0001\n\nFinal Result:\nS (1 bit)   Exponent (8 bits)     Mantissa (23 bits total)\n---         -----------------     ----------------------------\n1           1000 0001             0001 0000 0000 0000 0000 000\n\nNote: Fill in the mantissa section from the LEFT side, and follow this value by zeros.\n\nAlso, note that we placed spaces for readability.\n\n\n\nExample 2\nConvert 55 to floating point: Step 1: 55 -&gt; 110111 Step 2, normalization: 110111 -&gt; 1.10111 x 2^5, note these values Step 3, bias exponent: 5+127 = 132 Step 3.1 convert to binary: 132 -&gt; 1000 0100 Step 4, fill in values: S Exponent Mantissa 0 1000 0100 10111000…000\nEx 3: Convert the following from IEEE 754 to Decimal This process is simply to follow the previous steps in the opposite direction\nS Exponent Mantissa 0 1000 0110 11011000…000\nStep 1: Convert E to Decimal, and debias 1000 0110 = 128 + 4 + 2 = 134 debias: 134 - 128 = 6 &lt;- this is the amount we shift\nStep 2: Build our denormalized form of the value. - do this by starting with 1.x…x * 2^k, and fill it in with\nmantissa and debiased exponent - in this case, M = 11011, k = 6 So we have 1.11011 x 2^6\nStep 3: Shift values by moving the decimal right k spaces: - 1.11011 x 2^6 -&gt; 1110110\nStep 4: Convert value to decimal - 1110110 -&gt; 2+4+16+32+64 = 118",
    "crumbs": [
      "04 Computing Systems and Data Representation",
      "Representing and Manipulating Information"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "05 More on C/07-Memory-Allocation.html",
    "href": "05 More on C/07-Memory-Allocation.html",
    "title": "Memory Allocation",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // required for malloc()\n\nint main(){\n\n    int *value;\n\n    // malloc lets us dynamically allocate memory on the heap\n    value = malloc(4); // allows for 4 bytes to be stored at `value`\n    value = malloc(sizeof(int) * 10);\n\n    // set each value in the array\n    for (int i=0; i &lt; 10;  i++){\n        value[i] = i * 2;\n    }\n\n    // print each value\n    for (int i=0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n    printf(\"\\n\");\n\n    // the function free() frees up the space taken by a dynamically \n    // allocated reference\n    free(value);\n\n    // reallocate value with a new size\n    value = malloc(sizeof(int) * 20);\n\n    // note that malloc does not zero out the data that was there\n    // note the operating system may cause it to zero out as a security feature\n\n    for (int i = 0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n\n    printf(\"\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "05 More on C/07-Memory-Allocation.html#malloc",
    "href": "05 More on C/07-Memory-Allocation.html#malloc",
    "title": "Memory Allocation",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // required for malloc()\n\nint main(){\n\n    int *value;\n\n    // malloc lets us dynamically allocate memory on the heap\n    value = malloc(4); // allows for 4 bytes to be stored at `value`\n    value = malloc(sizeof(int) * 10);\n\n    // set each value in the array\n    for (int i=0; i &lt; 10;  i++){\n        value[i] = i * 2;\n    }\n\n    // print each value\n    for (int i=0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n    printf(\"\\n\");\n\n    // the function free() frees up the space taken by a dynamically \n    // allocated reference\n    free(value);\n\n    // reallocate value with a new size\n    value = malloc(sizeof(int) * 20);\n\n    // note that malloc does not zero out the data that was there\n    // note the operating system may cause it to zero out as a security feature\n\n    for (int i = 0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n\n    printf(\"\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "05 More on C/07-Memory-Allocation.html#calloc",
    "href": "05 More on C/07-Memory-Allocation.html#calloc",
    "title": "Memory Allocation",
    "section": "Calloc",
    "text": "Calloc\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // needed for calloc\n\nint main(){\n    // calloc gaurantees that the allocated memory will be zeroed out\n    // two args: number of things, size of each thing\n    int *value = calloc(10, sizeof(int));\n\n    for (int i=0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n\n    free(value);\n    printf(\"\\n\");\n    \n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "05 More on C/07-Memory-Allocation.html#realloc",
    "href": "05 More on C/07-Memory-Allocation.html#realloc",
    "title": "Memory Allocation",
    "section": "Realloc",
    "text": "Realloc\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // needed for realloc\n\n\nvoid append(int *array, int *arrayLength, int newValue);\n\nint main(){\n    int length = 1;\n    int *array = malloc(sizeof(int) * length);\n\n    array[0] = 42;\n\n    for (int i=0; i &lt; length; i++){\n        printf(\"%d \\n\", array[i]);\n    }\n\n    append(array, &length, 4);\n    append(array, &length, 10);\n    append(array, &length, 13);\n\n    for (int i=0; i &lt; length; i++){\n        printf(\"%d \", array[i]);\n    }\n\n    printf(\"\\n\");\n    return 0;\n\n}\n\nvoid append(int *array, int *arrayLength, int newValue){\n\n    // set the new value of arrayLength\n    // remember: * is dereferencing the pointer (its gettin the value)\n    *arrayLength = *arrayLength + 1;\n\n    // allocated space for one more item\n    int *array2 = realloc(array, *arrayLength);\n\n    // reset the identifier so we can use it again\n    array = array2;\n\n    array[*arrayLength-1] = newValue;\n}",
    "crumbs": [
      "05 More on C",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "05 More on C/11-Fork.html",
    "href": "05 More on C/11-Fork.html",
    "title": "Fork",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    // fork creates a child process\n    fork();\n\n    printf(\"This should print twice.\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Fork"
    ]
  },
  {
    "objectID": "05 More on C/11-Fork.html#basics",
    "href": "05 More on C/11-Fork.html#basics",
    "title": "Fork",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    // fork creates a child process\n    fork();\n\n    printf(\"This should print twice.\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Fork"
    ]
  },
  {
    "objectID": "05 More on C/11-Fork.html#working-within-processes",
    "href": "05 More on C/11-Fork.html#working-within-processes",
    "title": "Fork",
    "section": "Working within Processes",
    "text": "Working within Processes\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    int pid = fork();\n\n    // if fork returns -1, it failed to create the child\n    if (pid &lt; 0){\n        printf(\"Failed to create child process\\n\");\n        return 1;\n    }\n\n    // when pid == 0, then you're in the child process\n    // if it's greater than zero, you're in the parent process\n\n    if (pid == 0){\n        printf(\"I'm in the child process\\n\");\n    } else {\n        printf(\"I'm in the parent process\\n\");\n    }\n\n    printf(\"Hi from both\\n\");\n\n    return 0;\n\n}",
    "crumbs": [
      "05 More on C",
      "Fork"
    ]
  },
  {
    "objectID": "05 More on C/11-Fork.html#process-ids",
    "href": "05 More on C/11-Fork.html#process-ids",
    "title": "Fork",
    "section": "Process IDs",
    "text": "Process IDs\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n// #include &lt;wait.h&gt;\n\nint main(){\n\n    pid_t pid = fork();\n\n    if (pid &lt; 0){\n        printf(\"Failed to create child.\");\n        return 1;\n    }\n\n    if (pid == 0){\n        printf(\"pid in child: %d\\n\", pid);\n        printf(\"From child, id of child is: %d\\n\", getpid());\n        printf(\"From child, id of parent is: %d\\n\", getppid());\n    } else {\n        printf(\"pid in parent: %d\\n\", pid);\n        printf(\"From parent, id of parent is: %d\\n\", getpid());\n        wait(NULL);\n    }\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Fork"
    ]
  },
  {
    "objectID": "05 More on C/11-Fork.html#fflush",
    "href": "05 More on C/11-Fork.html#fflush",
    "title": "Fork",
    "section": "fflush",
    "text": "fflush\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n\n    printf(\"THis should print once!!!!\");\n    fflush(stdout);\n    \n    fork();\n\n    printf(\"This should print twice\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "05 More on C",
      "Fork"
    ]
  },
  {
    "objectID": "05 More on C/13-Exec-Functions.html",
    "href": "05 More on C/13-Exec-Functions.html",
    "title": "Exec Functions",
    "section": "",
    "text": "1. execl\n    format: execl(char *path, char *arg0, char *arg1, ..., NULL)\n        - loads and runs an executable with args\n        - path - the path to the executable\n        - arg0 is the name of the executable\n        - arg1 is the first space separated argument \n        - ...\n        - NULL follows all the args\n        - returns -1 if there is an error\n    \n2. execlp\n    format: execlp(char *file, char *arg0, char *arg1, ..., NULL)\n        - similar to execl\n        - main difference is the file is sought for in the PATH environment variable\n\n3. execle\n    format: execle(char *path, char *arg0, char *arg1, ..., NULL, char *envp[])\n        - environment variables are in the format \"NAME=VALUE\"\n        - Ex: \"HOME=/home/usr\"\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execl(\"/bin/ls\", \"ls\", \"-al\", \"-h\", NULL);\n}\n\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execlp(\"ls\", \"ls\", \"-al\", \"-h\", NULL);\n}",
    "crumbs": [
      "05 More on C",
      "Exec Functions"
    ]
  },
  {
    "objectID": "05 More on C/13-Exec-Functions.html#about-execl",
    "href": "05 More on C/13-Exec-Functions.html#about-execl",
    "title": "Exec Functions",
    "section": "",
    "text": "1. execl\n    format: execl(char *path, char *arg0, char *arg1, ..., NULL)\n        - loads and runs an executable with args\n        - path - the path to the executable\n        - arg0 is the name of the executable\n        - arg1 is the first space separated argument \n        - ...\n        - NULL follows all the args\n        - returns -1 if there is an error\n    \n2. execlp\n    format: execlp(char *file, char *arg0, char *arg1, ..., NULL)\n        - similar to execl\n        - main difference is the file is sought for in the PATH environment variable\n\n3. execle\n    format: execle(char *path, char *arg0, char *arg1, ..., NULL, char *envp[])\n        - environment variables are in the format \"NAME=VALUE\"\n        - Ex: \"HOME=/home/usr\"\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execl(\"/bin/ls\", \"ls\", \"-al\", \"-h\", NULL);\n}\n\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execlp(\"ls\", \"ls\", \"-al\", \"-h\", NULL);\n}",
    "crumbs": [
      "05 More on C",
      "Exec Functions"
    ]
  },
  {
    "objectID": "05 More on C/13-Exec-Functions.html#about-execv",
    "href": "05 More on C/13-Exec-Functions.html#about-execv",
    "title": "Exec Functions",
    "section": "About Execv",
    "text": "About Execv\nThe v is for vector (not velociraptor)\n\n1. execv\n    format:  execv(char *path, char *args[])\n        - the first element of args is the name of the executable\n        - the last element of args is NULL\n\n2. execvp\n    format: execvp(char *filename, char *args[])\n        - looks at the PATH environment variable for the \n            executable \n\nExecv Example\n#include &lt;unistd.h&gt;\n\nint main(){\n    char *args[] = {\n        \"ls\",\n        \"-a\",\n        \"-l\",\n        \"-h\",\n        NULL\n    };\n    execv(\"/bin/ls\", args);\n    \n}\n\n\nExecvp Example\n#include &lt;unistd.h&gt;\n\nint main(){\n    char *args[] = {\n        \"ls\",\n        \"-a\",\n        \"-l\",\n        \"-h\",\n        NULL\n    };\n    execvp(\"ls\", args);\n    \n}",
    "crumbs": [
      "05 More on C",
      "Exec Functions"
    ]
  },
  {
    "objectID": "01 Linux/unix-history.html",
    "href": "01 Linux/unix-history.html",
    "title": "Unix History",
    "section": "",
    "text": "It’s everywhere. Browsing the internet? Doom scrolling? Streaming a movie? Most servers (~96%) run on some form of linux. Examples include:\n\nNetflix\nTwitter/X\nFacebook\nInstagram\nGoogle\nNew York Stock Exchange\n\nUsing an android phone? Android is a flavor of Linux.\nIt’s versatile. Its available under the GNU General Public License, designed to encourage freedom of usage.\n\nhttps://www.gnu.org/licenses/gpl-3.0.en.html\n\nIt’s a community. Development is community based. People are constantly working on ways to improve and further develop linux to work on a variety of devices and platforms.",
    "crumbs": [
      "01 Linux",
      "Unix History"
    ]
  },
  {
    "objectID": "01 Linux/unix-history.html#why-linux",
    "href": "01 Linux/unix-history.html#why-linux",
    "title": "Unix History",
    "section": "",
    "text": "It’s everywhere. Browsing the internet? Doom scrolling? Streaming a movie? Most servers (~96%) run on some form of linux. Examples include:\n\nNetflix\nTwitter/X\nFacebook\nInstagram\nGoogle\nNew York Stock Exchange\n\nUsing an android phone? Android is a flavor of Linux.\nIt’s versatile. Its available under the GNU General Public License, designed to encourage freedom of usage.\n\nhttps://www.gnu.org/licenses/gpl-3.0.en.html\n\nIt’s a community. Development is community based. People are constantly working on ways to improve and further develop linux to work on a variety of devices and platforms.",
    "crumbs": [
      "01 Linux",
      "Unix History"
    ]
  },
  {
    "objectID": "01 Linux/unix-history.html#history-of-unix-like-systems",
    "href": "01 Linux/unix-history.html#history-of-unix-like-systems",
    "title": "Unix History",
    "section": "History of Unix Like Systems",
    "text": "History of Unix Like Systems\n\n1969 The Unix operating system is developed by AT&T/Bell Laboratories.\n\nFirst developed with Assembly but moved to primarily C\nSince it was primarily C, it was very portable\nAT&T cannot sell it due to agreements not to enter the computing business\nAT&T opts to distribute it under licenses to Labs and Universities\n\n1977 UC Berkly developed BSD (Berkley Software Distribution) as a Unix-like replacement.\n\nIt contained code owned by AT&T\nWill eventually lead to a lawsuit from AT&T\n\n1983 GNU Operating System (Pronounced Guh-nu) started by Richard Stallman\n\nIts purpose was to be a free/open unix-like replacement for UNIX (that didn’t contain any code owned by AT&T).\nGNU stands for GNU is Not Unix\nGNU’s kernel is GNU Hurd (started in 1990, before Linux, doesn’t become stable until 2001)\n\nNote: The kernel of an OS is the system between the hardware and software of a machine. Main function is process, memory, and other resource management.\nThe OS is the system as a whole; interface between user and hardware. An OS contains a kernel, applications, device drivers, utilities, etc.\n\n\n1991\n\nFinnish Grad Student Linus Torvalds emails about the OS he is working on.\nLinux kernel is developed\n\n1992\n\nBSDi gets sued by AT&T, which slowed BSD development.\nThe Linux kernel becomes the kernel for GNU.\nGNU/Linux is released as Free software under the GNU General Purpose License.\n\nNote: When we say “Linux”, we really mean GNU/Linux. Linux is just the kernel.\n\nGNU License gave developers the ability to make custom OSs that felt like UNIX without the fear of being sued.\n\n1993 The Debian distrobution is born\n\nOne of the most popular distros/family of distros\nMinimal, stable, good for general purpose pc usage and servers alike.\nMost distros are children of Debian including Ubuntu, Raspberry Pi OS, and SteamOS.\n\n1994 The Redhat Distrobution is born\n\nPrimarily used for enterprise\nDistros in the Redhat family include Fedora (Distro of choice for Linus Torvalds) and CentOS\n\n2000/2002 Gentoo/Arch are born as more simplistic families of distrobutions\nIn later 2000s we see some independent distros we are more familiar with such as\n\nFireOS (Amazon FireStick/Fire devices)\nAndroid (Google)\n\nFun Fact: Linus Torvalds also created git for version control.\n\nDistro Family Tree\nSource: A large portion of the information above comes from GNU’s Website",
    "crumbs": [
      "01 Linux",
      "Unix History"
    ]
  },
  {
    "objectID": "01 Linux/c-on-windows.html",
    "href": "01 Linux/c-on-windows.html",
    "title": "Setup for C on Windows",
    "section": "",
    "text": "To run C programs in Windows (64 bit):\n\nGo to this address and select the second tdm-gcc compiler (tdm64-gcc-10.3.0-2.exe): https://jmeubank.github.io/tdm-gcc/download/\nRun the installer and select “Create”\nClick through the install with the next button until complete\n\nYou should now be able to use gcc in command prompt as in Linux\nTo ensure Windows Defender does not delete compiled executables:\n\nCreate a folder in which you work on C programs (For me it is in a CSC222 folder on my desktop)\nOpen Windows Security in the search bar\nSelect Virus and Threat Protection\nUnder “Virus & threat protection updates” select Manage Settings\nScroll down to Exclusions, and select Add or remove exclusions\nSelect Add an exclusion\nSelect Folder\nNavigate to and select the folder where your C programs will be stored\n\nYou should now be able to compile and run C programs as long as they are in this folder."
  },
  {
    "objectID": "01 Linux/vm-install-mac.html",
    "href": "01 Linux/vm-install-mac.html",
    "title": "VM Install On Mac",
    "section": "",
    "text": "Introduction\nFollow the steps below to set up an Ubuntu LTS Machine on your m series chip Mac (m1, m2, etc.)\n\n\n\n\n\n\nNot sure on chip type?\n\n\n\nClick the  icon on the menubar and select About this mac.... It should be indicated under the “Chip” category if it is an m series chip.\n\n\n\n\n\n\n\n\nIf you don’t have an m series chip…\n\n\n\nIf your mac is not an m series mac, then follow the windows install.\n\n\n\n\nPrequisites\nm series mac with macOS\n\n\nSteps\n\nIf you do not already have Homebrew, install it by opening a terminal and running the following command. Otherwise skip this step.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nInstall multipass with the following command.\nbrew install multipass\nRun the one of the following multipass command to create an instance with the name csc222 (or whatever you want to name it).\n# for a minimal machine with default specs (1 cpu, 5G disk space, 1G memory, )\nmultipass launch 22.04 --name csc222\n# for a more powerful machine that can have space for a gui\nmultipass launch 22.04 --name csc222 --cpus 2 --memory 4G --disk 50G\nOnce the machine is finished setting up. You can access it with the following command. If you named it something other than csc222, use that in place of csc222.\nmultipass shell csc222\nOnce access to the machine is granted, create a user in the machine for yourself. The example below adds a user named josh.\nsudo adduser josh\nTo add yourself to the group of users that can use the command sudo, run the following, but use your username, not josh.\nsudo usermod -aG sudo josh\n\n\n\n(Optional) Add a GUI to your machine\n\nIn the shell on your VM, run the following commands. Note that this may take a few minutes.\nsudo apt update\nsudo apt install ubuntu-desktop xrdp\nWhile the second command is processing, download Microsoft Remote Desktop on your mac by going to the app store.\nMicrosoft Remote Desktop\nOpen another Terminal on your mac and and type multipass list to get the IP address of the machine. It should be something like 10.49.93.209 or 192.168.64.6 (not that exactly, but similar).\nOpen Microsoft RDP and add the connection."
  },
  {
    "objectID": "01 Linux/linux-filesystem.html",
    "href": "01 Linux/linux-filesystem.html",
    "title": "Linux Filesystem",
    "section": "",
    "text": "The top level of the filesystem on many linux machines contains most of the following directories. You’ll find a brief description of each below.",
    "crumbs": [
      "01 Linux",
      "Linux Filesystem"
    ]
  },
  {
    "objectID": "01 Linux/linux-filesystem.html#introduction",
    "href": "01 Linux/linux-filesystem.html#introduction",
    "title": "Linux Filesystem",
    "section": "",
    "text": "The top level of the filesystem on many linux machines contains most of the following directories. You’ll find a brief description of each below.",
    "crumbs": [
      "01 Linux",
      "Linux Filesystem"
    ]
  },
  {
    "objectID": "01 Linux/linux-filesystem.html#directories",
    "href": "01 Linux/linux-filesystem.html#directories",
    "title": "Linux Filesystem",
    "section": "Directories",
    "text": "Directories\n\n/bin\n\ncommon binaries (i.e. applications you can run)\nyou’ll find many of the commands you can use here, like ls\nNote: ls -l /bin shows that it is a link to /usr/bin\n\n\n\n/sbin\n\nsystem binaries (applications for system admin, like adduser)\n\n\n\n/home\n\nthe personal files for each user\nRun ls /home to see a directory for yourself.\n\n\n\n/lib\n\nwhere shared libraries live.\ncode that applications can use to interact with the kernel\nnote, you will see lib files elsewhere, but this one is for the kernel specifically.\n\n\n\n/etc\n\nShort for et cetera (we say et-see)\nMainly contains configuration files\n\n\n\n/dev\n\nshort for device\ncontains files related to devices attached to the machine (like a webcam)\n\n\n\n/boot\n\ncontains the files necessary to boot the system.\n\n\n\n/media\n\nwhere external storage is auto mounted when you plug it in\n\n\n\n/mnt\n\nwhere external storage is manually mounted\n\n\n\n/opt\n\nfrequently where custom built software lands\n\n\n\n/proc\n\ncontains info about your computer\n\n\n\n/root\n\nhome directory of the superuser\nits not under /home for a reason (those are not the superuser)\n\n\n\n/run\n\nstores temporary data for system processes\n\n\n\n/usr\n\nwhere user’s home directories used to be kept (now under /home)\ncontains a collection of stuff that needs to be shared by applications\n\n\n\n/tmp\n\ncontains temporary files\n\n\n\n/var\n\nshort for variable\nusually contains logs",
    "crumbs": [
      "01 Linux",
      "Linux Filesystem"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html",
    "href": "06 Bash Scripting/03-Conditionals.html",
    "title": "Conditionals",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# with test\nif test $1 -gt 5\nthen\n    echo \"It is greater than 5\"\nfi \n\nif test $1 -lt 5\nthen \n    echo \"It is less than 5\"\nelse\n    echo \"It is not less than 5\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html#if-with-test",
    "href": "06 Bash Scripting/03-Conditionals.html#if-with-test",
    "title": "Conditionals",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# with test\nif test $1 -gt 5\nthen\n    echo \"It is greater than 5\"\nfi \n\nif test $1 -lt 5\nthen \n    echo \"It is less than 5\"\nelse\n    echo \"It is not less than 5\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html#if-with-brackets",
    "href": "06 Bash Scripting/03-Conditionals.html#if-with-brackets",
    "title": "Conditionals",
    "section": "if with brackets",
    "text": "if with brackets\n#!/bin/bash\n\n# test but using brackets\n# must put space around the brackets\nif [ $1 -lt 10 ]\nthen \n    echo \"$1 is less than 10\"\nelif [ $1 -gt 10 ]\nthen\n    echo \"$1 is greater than 10\"\nelse \n    echo \"$1 is 10\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html#comparison-operators",
    "href": "06 Bash Scripting/03-Conditionals.html#comparison-operators",
    "title": "Conditionals",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\n\n# don't run this file\n# just showing the operators\n\n### integer comparisons\n\n[ 3 -ge 2 ]  # greater than or equal to\n(( 5 &gt;= 3 )) # option with paren\n\n[ 3 -gt 2 ]  # greater than\n(( 5 &gt; 2 ))  # with paren\n\n[ 5 -lt 10 ] # less than\n(( 5 &lt; 3 ))  # with paren\n\n[ 5 -le 10 ] # less than or equal to\n(( 5 &lt;= 10 )) # with paren\n\n[ 5 -eq 5 ]   # equal to\n              # no == for ints\n\n[ 5 -ne 5 ]   # not equal to\n\n##### String comparisons\n# equality\n[ \"apple\" == \"apple\" ] # returns true\n\nmyvar=\"hi you\"\n[ $myvar == \"hi you\" ] # returns false, performs word splitting on \"hi you\"\n\n[[ $myvar == \"hi you\" ]] # returns true\n[ \"$myvar\" == \"hi you\" ] # or put the variable in quotes to return true\n\n# double brackets can help with pattern matching\n[[ \"apple\" == a* ]]  # returns ture, bc apple starts with an a (* for wildcard)\n\n#  checking for ASCII alphabetical order with &gt; or &lt;\n[[ \"apple\" &lt; \"banana\" ]] # returns true\n[ \"apple\" \\&lt; \"banana\" ]  # can use \\&lt; if using single brackets\n\n# check for an empty string with -z\navar=\"\"\n[ -z $avar ]  # returns true\n\n# check if a string is not null/empty\n[ -n $avar ]  # return false",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html#file-testing",
    "href": "06 Bash Scripting/03-Conditionals.html#file-testing",
    "title": "Conditionals",
    "section": "File Testing",
    "text": "File Testing\n#!/usr/bin/env bash\n\n## Three file names to test\n## Be sure each exists in the directory here\n## Comment/Uncomment each to test the conditionals that follow\n\n# filename=\"hello world.txt\" \n# filename=\"04 File Testing.sh\"\nfilename=\"test directory\"\n\n# -e checks if a file or directory exists with the given name\n# note that we are using double brackets with the variable to prevent word splitting \n# The filename hello world.txt would cause word splitting because there is a space in it\nprintf \"File/Directory Existence: \"\n[[ -e $filename ]] && echo \"True\" || echo \"False\"  \n\n# -f checks if the string matches a regular file (i.e. actual file, not directory or device)\nprintf \"File Only Existence: \"\n[[ -f $filename ]] && echo \"True\" || echo \"False\"   \n\n# -r checks if the string matches a readable file\nprintf \"Readable File: \"                   \n[[ -r $filename ]] && echo \"True\" || echo \"False\"   \n\n# -d checks if the string matches a directory\nprintf \"Directory: \"\n[[ -d $filename ]] && echo \"True\" || echo \"False\"    \n\n# -L checks if the string matches a symbolic link\nprintf \"Is it a symbolic link: \"\n[[ -L $filename ]] && echo \"True\" || echo \"False\"    \n\n# -x checks if the string matches an executable\nprintf \"Is it executable: \"\n[[ -x $filename ]] && echo \"True\" || echo \"False\"    \n\n# there are many more of these... use `man test` to look them up (or the internet)",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html#logical-operators",
    "href": "06 Bash Scripting/03-Conditionals.html#logical-operators",
    "title": "Conditionals",
    "section": "Logical Operators",
    "text": "Logical Operators\n# and\n[ 1 -eq 1 -a 2 -eq 2 ]  # -a for and\n[[ 1 -eq 1 && 2 -eq 2 ]]  # double amp in double bracket\n[ 1 -eq 1 ] && [2 -eq 2 ] # double amp outside of single bracket\n\n# or\n[ 1 -eq 1 -o 2 -eq 2 ]  # -o for or\n[[ 1 -eq 1 || 2 -eq 2 ]]  # double pipe in double bracket\n[ 1 -eq 1 ] || [2 -eq 2 ] # double pipe outside of single bracket\n\n# not is ! (just put it out front)\n[ ! -f \"hello.txt\" ]",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/03-Conditionals.html#existance-example",
    "href": "06 Bash Scripting/03-Conditionals.html#existance-example",
    "title": "Conditionals",
    "section": "Existance Example",
    "text": "Existance Example\n#!/bin/bash\n\nif [ -f \"hello world.txt\" ]\nthen\n    echo \"The file hello world.txt exists\"\nelse\n    echo \"The file does not exist\"\nfi\n\n# check if some directories exist\nif [ -d \"../01 Intro\" -a -d \"../02 Args\" ]\nthen \n    echo \"They exist\"\nelse  \n    echo \"They don't\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "06 Bash Scripting/01-Intro.html",
    "href": "06 Bash Scripting/01-Intro.html",
    "title": "Intro",
    "section": "",
    "text": "#!/bin/bash\n\n# the above line is an absolute path to the bash interpreter of your chosing\n# known as the shebang\n# typically it is just #!/bin/bash\n\n# To use the most recently installed version of the bash interpreter on your machine, use this shebang:\n#!/usr/bin/env bash\n\n# To check your version of bash, type bash --version in your terminal\n\n# macOS users \n# zsh is the default shell\n# use #!/bin/zsh as the shebang for zsh\n\n# If mac users want to use bash, default macOS bash is old\n# They can install an updated bash using homebrew\n# Formula: brew install bash\n# Homebrew bash shebang is #!/opt/homebrew/bin/bash\n\n# Note that installing bash via homebrew will make it the most recent version of bash on your mac\n# thus you can just use #!/usr/bin/env shebang\n\n# Printing a simple statement\necho Hello World\n\n# Printing a statement with a command \necho I am `whoami`\necho Today is `date`\necho current working directory is `pwd`\n\n# Can also use printf, no newline character, must use quotes for more than one word\nprintf hi\nprintf \" Same line as previous\"\nprintf \"\\nDifferent line\\n\"\nprintf \"Today: `date`\\n\"\n\n\n\n# To execute the script, use chmod +x on it\n# chmod +x \"01 Hello World.sh\"\n\n# Then run with \"./01 Hello World.sh\"",
    "crumbs": [
      "06 Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "06 Bash Scripting/01-Intro.html#hello-world",
    "href": "06 Bash Scripting/01-Intro.html#hello-world",
    "title": "Intro",
    "section": "",
    "text": "#!/bin/bash\n\n# the above line is an absolute path to the bash interpreter of your chosing\n# known as the shebang\n# typically it is just #!/bin/bash\n\n# To use the most recently installed version of the bash interpreter on your machine, use this shebang:\n#!/usr/bin/env bash\n\n# To check your version of bash, type bash --version in your terminal\n\n# macOS users \n# zsh is the default shell\n# use #!/bin/zsh as the shebang for zsh\n\n# If mac users want to use bash, default macOS bash is old\n# They can install an updated bash using homebrew\n# Formula: brew install bash\n# Homebrew bash shebang is #!/opt/homebrew/bin/bash\n\n# Note that installing bash via homebrew will make it the most recent version of bash on your mac\n# thus you can just use #!/usr/bin/env shebang\n\n# Printing a simple statement\necho Hello World\n\n# Printing a statement with a command \necho I am `whoami`\necho Today is `date`\necho current working directory is `pwd`\n\n# Can also use printf, no newline character, must use quotes for more than one word\nprintf hi\nprintf \" Same line as previous\"\nprintf \"\\nDifferent line\\n\"\nprintf \"Today: `date`\\n\"\n\n\n\n# To execute the script, use chmod +x on it\n# chmod +x \"01 Hello World.sh\"\n\n# Then run with \"./01 Hello World.sh\"",
    "crumbs": [
      "06 Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "06 Bash Scripting/01-Intro.html#variables",
    "href": "06 Bash Scripting/01-Intro.html#variables",
    "title": "Intro",
    "section": "Variables",
    "text": "Variables\n#!/usr/bin/env bash\n\n# Setting Variables \n# To set a variable use = \n# Do not put space around the = sign\nmy_var=10\nanother_var=\"the variable is...\"\n\n# Accessing variables\n# The $ is used to access variable values\necho $another_var $my_var\necho The var is $my_var\necho\n\n# Accessing with quotes\n# single quotes will not allow you to access the variables\necho 'This does not show the variable value: $my_var'\n# double quotes will\necho \"This does show the variable: $my_var\"\necho\n\n# Escape Character\n# escape special characters with \\\necho \"The banana is \\$$my_var \"\n\n# can use -e for many escape characters\necho -e \"Line 1 \\nLine 2\" \n\n# can also use printf (behaves more like you'd expect)\nprintf \"hi again\\nwith printf\\n\"",
    "crumbs": [
      "06 Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "06 Bash Scripting/01-Intro.html#arrays",
    "href": "06 Bash Scripting/01-Intro.html#arrays",
    "title": "Intro",
    "section": "Arrays",
    "text": "Arrays\n#!/usr/bin/env bash\n\n# Declaring and assigning values in an array\n# Use parentheses and space separation for each item\ngroceries=(\"bread\" \"milk\" \"eggs\")\ncosts=(1 10 23.99)\n\n# access the values as if they are a variable\necho $groceries         # only gets the zeroth item\necho ${groceries[1]}    # gets the item at index 1, curly brackets since [] is in there\necho $groceries[1]      # example without\necho \"${groceries[@]}\"  # @ accesses ALL the values\necho \n\necho ${costs[0]} ${costs[1]} ${costs[2]}\necho \"${costs[@]}\"\necho\n\n# with printf\nprintf \"Food item: ${groceries[1]}\\t\\tPrice: ${costs[1]}\\n\"\n\n# also with printf\nprintf \"Food Item: %s\\t\\tPrice: %d\\n\" \"${groceries[1]}\" \"${costs[1]}\"\necho\n\n\n\n# Just declaring, then assigning values later\n# note that this works in bash but not zsh\n\n## Numeric array - index is in numeric form\ndeclare -a numeric_array \n\nnumeric_array[0]=\"Hello\"         # set a value\nnumeric_array[1]=\"World\"         \nnumeric_array+=(\"Another Thing\") # append to the array\necho ${numeric_array[@]}  \n\n## Associative array - The index is in a named form (like a key in a dictionary)\n## only available in bash v4+\n## No order to these\ndeclare -A associative_array    \n\nassociative_array[first]=\"Josh\"          # set a value, note the key\nassociative_array[last]=\"Coriell\"\n\necho \"${associative_array[first]} ${associative_array[last]}\"\necho \"Values: ${associative_array[@]}\"\necho \"Keys: ${!associative_array[@]}\"",
    "crumbs": [
      "06 Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "06 Bash Scripting/01-Intro.html#prompting",
    "href": "06 Bash Scripting/01-Intro.html#prompting",
    "title": "Intro",
    "section": "Prompting",
    "text": "Prompting\n#!/usr/bin/env bash\n\n# use read with -p (p for prompt)\n# input gets placed in the variables provided at the end\n# in this case, `first` and `last` are both variables\nread -p \"Enter your first and last name: \" first last\n\n\n\n# you can always print out a statement first, then call read\n# use the -s flag to prevent visible input (ex: in the case of passwords, prevents shoulder surfing)\necho Now a secret:\nread -s secret\n\n# Print out the variables\necho First is $first\necho Last is $last\necho Secret is $secret",
    "crumbs": [
      "06 Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "06 Bash Scripting/01-Intro.html#math",
    "href": "06 Bash Scripting/01-Intro.html#math",
    "title": "Intro",
    "section": "Math",
    "text": "Math\n#!/usr/bin/env bash\n\n# Operations with integers can be performed using the notation $(())\n# integers only\necho $((2+3))\necho $((3-4))\necho $((3 * 4))\necho $((5 / 2)) # integer div\necho $((5 % 2))\necho\n\n# with variables\nnum1=2\nnum2=3\nresult=$((num1 + num2))\necho \"The result of num1 + num2 is $result\"\necho\n\n\n# non-integers can be piped into bc (basic calculator)\necho \"2.3 + 1.2\" | bc\necho \"scale=5; 10/3\" | bc           # scale sets the number of decimal points\necho \"sqrt(12)\" | bc -l             # use -l flag to load the math library",
    "crumbs": [
      "06 Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "06 Bash Scripting/07-Functions.html",
    "href": "06 Bash Scripting/07-Functions.html",
    "title": "Functions",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# Defining Functions:\n\n# Using the Function Keyword\n# The `function` keyword doesn't exist in every bash-like shell.\nfunction hello_one { \n    # This is a simple function \n    echo \"hello\" \n    echo \"done with hello_one\" \n}\n\n# More Portable Way (`function` keyword is not POSIX compliant (i.e. might not work in other shells that are))\n# POSIX - Portable Operating System Interface standard; insures compatibility between Unix-like systems.\nhello_two() { \n    # This is a simple function \n    echo \"hello again.\" \n    echo \"done with hello_two\" \n}\n\n# call it\nhello_one\nhello_two",
    "crumbs": [
      "06 Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "06 Bash Scripting/07-Functions.html#simple-function",
    "href": "06 Bash Scripting/07-Functions.html#simple-function",
    "title": "Functions",
    "section": "",
    "text": "#!/usr/bin/env bash\n\n# Defining Functions:\n\n# Using the Function Keyword\n# The `function` keyword doesn't exist in every bash-like shell.\nfunction hello_one { \n    # This is a simple function \n    echo \"hello\" \n    echo \"done with hello_one\" \n}\n\n# More Portable Way (`function` keyword is not POSIX compliant (i.e. might not work in other shells that are))\n# POSIX - Portable Operating System Interface standard; insures compatibility between Unix-like systems.\nhello_two() { \n    # This is a simple function \n    echo \"hello again.\" \n    echo \"done with hello_two\" \n}\n\n# call it\nhello_one\nhello_two",
    "crumbs": [
      "06 Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "06 Bash Scripting/07-Functions.html#with-args",
    "href": "06 Bash Scripting/07-Functions.html#with-args",
    "title": "Functions",
    "section": "With Args",
    "text": "With Args\n#!/usr/bin/env bash\n\nhello() {\n    # this one has an argument\n    # args work the same as when you pass them to a file\n    echo \"hi $1\"\n}\n\nadd(){\n    printf \"The sum of $1 and $2 is \"\n    echo $(( $1 + $2 ))\n}\n\nhelloAgain(){\n    echo \"All args: $@\"\n}\n\nhello \"Josh\"\nadd 5 10\nhelloAgain Hi today is a great day",
    "crumbs": [
      "06 Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "06 Bash Scripting/07-Functions.html#local-variables",
    "href": "06 Bash Scripting/07-Functions.html#local-variables",
    "title": "Functions",
    "section": "Local Variables",
    "text": "Local Variables\n#!/usr/bin/env bash\n\nglobalvar=\"this is global\"\n\nhelloLocal (){\n    \n    local localvar=\"this is local\"\n    \n    # shadowing\n    local globalvar=\"this is also local\" \n    \n    echo $globalvar # prints the local version\n    echo $localvar\n}\n\nhelloLocal\necho $globalvar # prints the actual global",
    "crumbs": [
      "06 Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "06 Bash Scripting/07-Functions.html#returning-values",
    "href": "06 Bash Scripting/07-Functions.html#returning-values",
    "title": "Functions",
    "section": "Returning Values",
    "text": "Returning Values\n#!/usr/bin/env bash\n\n# the return keyword is used to set the exit status\n# you should use echo to return a value or use global variables\nadd_one() {\n    if [ -z $1 ]\n    then\n        return 1   # 1 for failure\n    else \n        echo $(( $1 + 1 ))\n        return 0   # 0 for success\n    fi\n}\n\necho \"Example 1\"\nresult=$(add_one 20)\nexit_status=$?\n\nif (( exit_status &gt; 0 ))\nthen\n    echo \"an error occurred\"\nelse\n    echo \"The result was $result\"\nfi\n\n\n\necho \"Example 2\"\nresult=$(add_one )\nexit_status=$?\nif (( exit_status &gt; 0 ))\nthen\n    echo \"an error occurred\"\nelse\n    echo \"The result was $result\"\nfi",
    "crumbs": [
      "06 Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "07 Assembly Primer/04 Accessing Values with Operands.html",
    "href": "07 Assembly Primer/04 Accessing Values with Operands.html",
    "title": "CSC 222 Systems Programming",
    "section": "",
    "text": "Example:\nAssume the following tables depict memory and register values:\n\nMemory\n\n\n\nAddress\nValue\n\n\n\n\n0x100\n0xFF\n\n\n0x104\n0xAB\n\n\n0x108\n0x13\n\n\n0x10C\n0x11\n\n\n\n\n\nRegisters\n\n\n\nRegister\nValue\n\n\n\n\n%rax\n0x100\n\n\n%rcx\n0x1\n\n\n%rdx\n0x3\n\n\n\n\n\n\n\nDetermine the value accessed from the following operands:\n\n%rax\nSince there are now parenthesis around %rax, we are simply accessing the value stored at rax, which is 0x100.\nSolution: 0x100\n0x104\nSince this is a hex value, and there is not a $ symbol in front of it, then this represents a memory address. We access the value stored at the memory address 0x104 which is 0xAB.\nSolution: 0xAB\n$0x108\nSince this value has a $ in front of it, this represents an immediate value. That is, it represents itself, 0x108.\nSolution: 0x108\n(%rax)\nrax holds the value 0x100. The parentheses tell us that we are going to need to visit memory and get the value at 0x100. The value stored at 0x100 is 0xFF.\nSolution: 0xFF\n4(%rax)\nrax holds the value 0x100. The parentheses tell us that we need to visit memory. Specifically, since there is a 4 out front, we need to visit the memory addresss that is 4 over from the address stored in rax. We then get the value from there.\nThus, %rax holds 0x100, and 4 memory locations over from 0x100 is memory location 0x104.\nThe value at 0x104 is 0xAB\nSolution: 0xAB\n9(%rax, %rdx)\n%rax holds 0x100.%rdxholds0x3`.\nWe need to add these two values together to get a resulting address. Note that in the following calculation we padded the hex value with 0s to match in digit length\n  0x100\n+ 0x003\n-------\n  0x103\nNow, we move 9 memory locations over from 0x103.\n  0x103\n+ 0x009    &lt;- 9 in hex\n-------\n  0x10C    &lt;- 3 + 9 = 12, 12 is C in hex\nNow we get the value at 0x10C which is 0x11.",
    "crumbs": [
      "07 Assembly Primer",
      "Example:"
    ]
  },
  {
    "objectID": "07 Assembly Primer/01 Register Names.html",
    "href": "07 Assembly Primer/01 Register Names.html",
    "title": "Register Names",
    "section": "",
    "text": "The following is a list of register names for x86-64 assembly\n\n\n\n\n\n\n\n\n\nBase Label\n\n\nLabels for Lower n-bits of a Register\n\n\nAdditional Info\n\n\n\n\n\n\n8-bit\n\n\n16-bit\n\n\n32-bit\n\n\n64-bit\n\n\n\n\n\n\n\n\na\n\n\nal\n\n\nax\n\n\neax\n\n\nrax\n\n\na for accumulator\n\n\n\n\nb\n\n\nbl\n\n\nbx\n\n\nebx\n\n\nrbx\n\n\nb for base\n\n\n\n\nc\n\n\ncl\n\n\ncx\n\n\necx\n\n\nrcx\n\n\nc for counter\n\n\n\n\nd\n\n\ndl\n\n\ndx\n\n\nedx\n\n\nrdx\n\n\nd for data\n\n\n\n\nsi\n\n\nsil\n\n\nsi\n\n\nesi\n\n\nrsi\n\n\nsource index\n\n\n\n\ndi\n\n\ndil\n\n\ndi\n\n\nedi\n\n\nrdi\n\n\ndestination index\n\n\n\n\nbp\n\n\nbpl\n\n\nbp\n\n\nebp\n\n\nrbp\n\n\nstack base pointer\n\n\n\n\nsp\n\n\nspl\n\n\nsp\n\n\nesp\n\n\nrsp\n\n\nstack pointer (end position of runtime stack)\n\n\n\n\nr8\n\n\nr8b\n\n\nr8w\n\n\nr8d\n\n\nr8\n\n\n\n\n\n\nr9\n\n\nr9b\n\n\nr9w\n\n\nr9d\n\n\nr9\n\n\n\n\n\n\nr10\n\n\nr10b\n\n\nr10w\n\n\nr10d\n\n\nr10\n\n\n\n\n\n\nr11\n\n\nr11b\n\n\nr11w\n\n\nr11d\n\n\nr11\n\n\n\n\n\n\nr12\n\n\nr12b\n\n\nr12w\n\n\nr12d\n\n\nr12\n\n\n\n\n\n\nr13\n\n\nr13b\n\n\nr13w\n\n\nr13d\n\n\nr13\n\n\n\n\n\n\nr14\n\n\nr14b\n\n\nr14w\n\n\nr14d\n\n\nr14\n\n\n\n\n\n\nr15\n\n\nr15b\n\n\nr15w\n\n\nr15d\n\n\nr15\n\n\n\n\n\n\n\n\n\nAdditional Notes:\nIn the 8-bit column for the first 8 register, l stands for low or lower. You can actually address the upper 8-bits of the lower 16-bits with h.\nIn the 4 central columns for registers r8 through r15, the letter b stands for byte (8-bits being addressed), w for word (there was a time where most machines had a word size of 16 bits, that is, this is a legacy holdover from that time), and d for double word (32-bits is twice 16-bits).\nThere are some additional registers outside of the 16 mentioned above, that is the ip, or instruction pointer register, and then the status flags.",
    "crumbs": [
      "07 Assembly Primer",
      "Register Names"
    ]
  },
  {
    "objectID": "07 Assembly Primer/03 Interpreting Operands.html",
    "href": "07 Assembly Primer/03 Interpreting Operands.html",
    "title": "Interpreting Operands",
    "section": "",
    "text": "With ATT syntax, we address the registers, memory, and immediate values using the following symbols:\n\n$ is used in front of immediate values.\n% is used in front of registers.\n() are used to dereference a memory address typically (i.e., get the value from memory).\n\n\n\nExamples\n\n$-17 represents the integer -17.\n\n$0xC represents the integer 12 (that is, C in base 16 is 12 in base 10).\n\n0x108 is a memory address.\n\n%rax accesses the value stored at the register addressed withrax.\n\n(%rax) accesses the value stored in memory (where rax is holding a memory address, opcode dependent).\n\n\n\n\nScaling, Shifting, and Indexing\nAn operand can be given in the format of A ( B, I, S ) where\n\nB is a base value that can be indexed, scaled, and shifted with I, S, and A.\nI represents an index. We add the value of I to the base value B.\n\nS is the scale for the index. We scale the value of I by S. The value of S must be 1, 2, 4, or 8.\n\nA is a shift, similar to I. We add A to the result of applying I and S to B.\n\n\n\nExamples\nThe following are semi-abstract, descriptive examples that describe the memory address that gets accessed (assuming the instruction we are using would dereference it).\n\n9(%rax)\n\nAssume rax is storing a memory address.\nWe shift 9 memory addresses over from the address stored at rax.\nWe access the value stored at that resulting address.\n\n(%rbx, %rdi)\n\nAssume rbx is storing a memory address.\nrdi stores a value that we will add to rbx to get a new memory address.\nThe parenthesis will tell us to access the value at that final memory address.\n\n-12(%rbx, %rdi)\n\nAssume rbx is storing a memory address.\nrdi stores a value we need to add to that memory address to get a resulting memory address\n-12 tells us to subtract 12 from the previous memory address to get a new memory address\nAccess the value at that final memory address.\n\n(,%rdi,4)\n\nrdi is storing a value that gets multiplied by 4\nAssume the resulting value is a memory address that we can visit.\nWe get the value at that memory address.\n\n10(,%rdi,4)\n\nrdi is storing a value that gets multiplied by 4\nAssume the resulting value is a memory address that we can visit.\nShift 10 memory addresses over from the previously resulting memory address.\nAccess that value.\n\n10(%rbx, %rdi, 4)\n\nAssume rbx stores a memory location\nMultiply the value stored at rdi by 4 and then add the result to the memory location stored in rbx for a new resulting memory address.\nNow shift 10 memory addresses over from the previous result.\nAccess the value at that address.",
    "crumbs": [
      "07 Assembly Primer",
      "Interpreting Operands"
    ]
  }
]