[
  {
    "objectID": "c-programming/01-HelloWorld.html",
    "href": "c-programming/01-HelloWorld.html",
    "title": "Hello World",
    "section": "",
    "text": "Before completing any of the following, be sure your system can compile c programs.\nTo check if you can compile c programs, open the terminal and type gcc --version. gcc is the GNU Compiler Collection. If you hit an error, you can install it on your Ubuntu virutal machine using the following:\n# this command installs gcc, g++, libc6-dev, make, and dpkg-dev\nsudo apt-get build-essential\nOnce installed, run the command gcc --version again.",
    "crumbs": [
      "C Programming",
      "Hello World"
    ]
  },
  {
    "objectID": "c-programming/01-HelloWorld.html#setting-up",
    "href": "c-programming/01-HelloWorld.html#setting-up",
    "title": "Hello World",
    "section": "",
    "text": "Before completing any of the following, be sure your system can compile c programs.\nTo check if you can compile c programs, open the terminal and type gcc --version. gcc is the GNU Compiler Collection. If you hit an error, you can install it on your Ubuntu virutal machine using the following:\n# this command installs gcc, g++, libc6-dev, make, and dpkg-dev\nsudo apt-get build-essential\nOnce installed, run the command gcc --version again.",
    "crumbs": [
      "C Programming",
      "Hello World"
    ]
  },
  {
    "objectID": "c-programming/01-HelloWorld.html#hello-world",
    "href": "c-programming/01-HelloWorld.html#hello-world",
    "title": "Hello World",
    "section": "Hello World!",
    "text": "Hello World!\nCreate a file called hello.c and put the following contents in it.\n#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"Hello World!\"); // No new line unless you say to do it.\n    printf(\"Hello again!\\n\"); // Now has a new line\n    printf(\"Hello there!\");\n\n    return 0;\n}\nCompile the program with the following command:\ngcc hello.c -o hello\nIn the command, we invoke gcc to compile the program called hello.c. We use the -o flag to specify the name of the executable file that the compiliation process outputs. In this case, we are calling it hello.\nTo run the executable file, type ./hello into the terminal. You should see the three messages printed in the terminal.",
    "crumbs": [
      "C Programming",
      "Hello World"
    ]
  },
  {
    "objectID": "c-programming/01-HelloWorld.html#command-line-input",
    "href": "c-programming/01-HelloWorld.html#command-line-input",
    "title": "Hello World",
    "section": "Command Line Input",
    "text": "Command Line Input\nThe following program shows how to take command line input.\n#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]){\n    // ^ a standard signature for taking in command line arguments\n    // argc represents the number of arguments coming in. \n    // argv a pointer to where the arguments are stored in memory\n    \n    // printing the inputs\n    printf(\"argc: %d\\n\", argc);\n    \n    for (int i=0; i &lt; argc; i++){\n        printf(\"argv[%d]: %s\\n\", i, argv[i]);\n    }\n\n    // argv ends with a null pointer\n    printf(\"argv[%d]: %s\\n\", argc, argv[argc]);\n\n    return 0;\n}\nCompile and run the program, but provide space separated arguments on execution.\nExample: In this example the executable is named CommandLineArgs and the arguments hi, how, are, and you are provided.\n./CommandLineArgs hi how are you",
    "crumbs": [
      "C Programming",
      "Hello World"
    ]
  },
  {
    "objectID": "c-programming/04-Functions.html",
    "href": "c-programming/04-Functions.html",
    "title": "Functions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// you can define functions up here\n// must state return type and types for the formal parameters\nint addOne(int value){\n    return value + 1;\n}\n\n\nint main(){\n\n    int num = 10;\n    int result = addOne(num);\n    result = addOne(result);\n\n    printf(\"You started with %d.\\n\", num);\n    printf(\"Now you have %d.\\n\", result);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Functions"
    ]
  },
  {
    "objectID": "c-programming/04-Functions.html#defining-functions",
    "href": "c-programming/04-Functions.html#defining-functions",
    "title": "Functions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// you can define functions up here\n// must state return type and types for the formal parameters\nint addOne(int value){\n    return value + 1;\n}\n\n\nint main(){\n\n    int num = 10;\n    int result = addOne(num);\n    result = addOne(result);\n\n    printf(\"You started with %d.\\n\", num);\n    printf(\"Now you have %d.\\n\", result);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Functions"
    ]
  },
  {
    "objectID": "c-programming/04-Functions.html#function-prototyping",
    "href": "c-programming/04-Functions.html#function-prototyping",
    "title": "Functions",
    "section": "Function Prototyping",
    "text": "Function Prototyping\n#include &lt;stdio.h&gt;\n\n// we could just prototype the functions up here\n// for function prototyping, we only need to state the name and types\n// stating parameter identifiers is optional\nint addOne(int);\n\n\n\n\nint main(){\n    int num = 10;\n    int result = addOne(num);\n\n    printf(\"Start: %d\\n\", num);\n    printf(\"End: %d\\n\", result);\n\n    printf(\"\\n\");\n    return 0;\n}\n\n\n// then define them down here\nint addOne(int value){\n    return value + 1;\n}",
    "crumbs": [
      "C Programming",
      "Functions"
    ]
  },
  {
    "objectID": "c-programming/10-Files.html",
    "href": "c-programming/10-Files.html",
    "title": "Files",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    FILE *filePtr;\n\n    // provide the path to your file in place of readable.txt\n    filePtr = fopen(\"readable.txt\", \"r\");\n\n    // good practice\n    if (filePtr == NULL){\n        printf(\"the file does not exist\");\n        return 1;\n    }\n\n    char contents[100];\n    /*\n    // reads and prints the first line only\n    fgets(contents, 100, filePtr);\n    printf(\"%s\", contents);\n    */\n\n    // to read more than the first line\n    while (fgets(contents, 100, filePtr)){\n        printf(\"%s\", contents);\n    }\n\n    fclose(filePtr);\n\n    return 0;\n\n}",
    "crumbs": [
      "C Programming",
      "Files"
    ]
  },
  {
    "objectID": "c-programming/10-Files.html#reading-files",
    "href": "c-programming/10-Files.html#reading-files",
    "title": "Files",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    FILE *filePtr;\n\n    // provide the path to your file in place of readable.txt\n    filePtr = fopen(\"readable.txt\", \"r\");\n\n    // good practice\n    if (filePtr == NULL){\n        printf(\"the file does not exist\");\n        return 1;\n    }\n\n    char contents[100];\n    /*\n    // reads and prints the first line only\n    fgets(contents, 100, filePtr);\n    printf(\"%s\", contents);\n    */\n\n    // to read more than the first line\n    while (fgets(contents, 100, filePtr)){\n        printf(\"%s\", contents);\n    }\n\n    fclose(filePtr);\n\n    return 0;\n\n}",
    "crumbs": [
      "C Programming",
      "Files"
    ]
  },
  {
    "objectID": "c-programming/11-Fork.html",
    "href": "c-programming/11-Fork.html",
    "title": "Fork",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    // fork creates a child process\n    fork();\n\n    printf(\"This should print twice.\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Fork"
    ]
  },
  {
    "objectID": "c-programming/11-Fork.html#basics",
    "href": "c-programming/11-Fork.html#basics",
    "title": "Fork",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    // fork creates a child process\n    fork();\n\n    printf(\"This should print twice.\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Fork"
    ]
  },
  {
    "objectID": "c-programming/11-Fork.html#working-within-processes",
    "href": "c-programming/11-Fork.html#working-within-processes",
    "title": "Fork",
    "section": "Working within Processes",
    "text": "Working within Processes\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n    int pid = fork();\n\n    // if fork returns -1, it failed to create the child\n    if (pid &lt; 0){\n        printf(\"Failed to create child process\\n\");\n        return 1;\n    }\n\n    // when pid == 0, then you're in the child process\n    // if it's greater than zero, you're in the parent process\n\n    if (pid == 0){\n        printf(\"I'm in the child process\\n\");\n    } else {\n        printf(\"I'm in the parent process\\n\");\n    }\n\n    printf(\"Hi from both\\n\");\n\n    return 0;\n\n}",
    "crumbs": [
      "C Programming",
      "Fork"
    ]
  },
  {
    "objectID": "c-programming/11-Fork.html#process-ids",
    "href": "c-programming/11-Fork.html#process-ids",
    "title": "Fork",
    "section": "Process IDs",
    "text": "Process IDs\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n// #include &lt;wait.h&gt;\n\nint main(){\n\n    pid_t pid = fork();\n\n    if (pid &lt; 0){\n        printf(\"Failed to create child.\");\n        return 1;\n    }\n\n    if (pid == 0){\n        printf(\"pid in child: %d\\n\", pid);\n        printf(\"From child, id of child is: %d\\n\", getpid());\n        printf(\"From child, id of parent is: %d\\n\", getppid());\n    } else {\n        printf(\"pid in parent: %d\\n\", pid);\n        printf(\"From parent, id of parent is: %d\\n\", getpid());\n        wait(NULL);\n    }\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Fork"
    ]
  },
  {
    "objectID": "c-programming/11-Fork.html#fflush",
    "href": "c-programming/11-Fork.html#fflush",
    "title": "Fork",
    "section": "fflush",
    "text": "fflush\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n\n    printf(\"THis should print once!!!!\");\n    fflush(stdout);\n    \n    fork();\n\n    printf(\"This should print twice\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Fork"
    ]
  },
  {
    "objectID": "c-programming/09-Sample-Applications.html",
    "href": "c-programming/09-Sample-Applications.html",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ndouble calculateAvg(int *grades, int size){\n    double average = 0;\n    for (int i =0; i &lt; size; i++){\n        average += grades[i];\n    }\n    average /= size;\n    return average;\n}\n\nint main(){\n    int qty;\n    int *array;\n\n    printf(\"How many grades do you have? \");\n    scanf(\"%d\", &qty);\n\n    // allocate enough space to store the number of grades the \n    // user said they would provide\n    array = malloc(sizeof(int) * qty);\n\n    for (int i=0; i &lt; qty; i++){\n        printf(\"Give me a grade: \");\n        scanf(\"%d\", &array[i]);\n    }\n\n    printf(\"The grades you provided are: \");\n    for (int i = 0; i &lt; qty; i++){\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n\n    // calculate the average\n    double average = calculateAvg(array, qty);\n    printf(\"The average is %.2lf\\n\", average);\n\n    free(array);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/09-Sample-Applications.html#average",
    "href": "c-programming/09-Sample-Applications.html#average",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ndouble calculateAvg(int *grades, int size){\n    double average = 0;\n    for (int i =0; i &lt; size; i++){\n        average += grades[i];\n    }\n    average /= size;\n    return average;\n}\n\nint main(){\n    int qty;\n    int *array;\n\n    printf(\"How many grades do you have? \");\n    scanf(\"%d\", &qty);\n\n    // allocate enough space to store the number of grades the \n    // user said they would provide\n    array = malloc(sizeof(int) * qty);\n\n    for (int i=0; i &lt; qty; i++){\n        printf(\"Give me a grade: \");\n        scanf(\"%d\", &array[i]);\n    }\n\n    printf(\"The grades you provided are: \");\n    for (int i = 0; i &lt; qty; i++){\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n\n    // calculate the average\n    double average = calculateAvg(array, qty);\n    printf(\"The average is %.2lf\\n\", average);\n\n    free(array);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/09-Sample-Applications.html#library-of-books",
    "href": "c-programming/09-Sample-Applications.html#library-of-books",
    "title": "Sample Applications",
    "section": "Library of Books",
    "text": "Library of Books\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct {\n    char name[255];\n    int birthYear;\n} Author;\n\ntypedef struct{\n    char title[255];\n    Author author;\n    int pubYear;\n} Book;\n\n\nvoid readLine(char *target, int targetSize){\n\n    fgets(target, targetSize, stdin);\n\n    // replace newline with null character\n    size_t length = strlen(target);\n    if (length &gt; 0 && target[length-1] == '\\n'){\n        target[length-1] = '\\0';\n    }\n\n}\n\nint main(){\n    \n    int numBooks;\n    printf(\"Let's build a library. How many books do you plan on adding? \");\n    scanf(\"%d\", &numBooks);\n    getchar(); // reads a single character\n\n    Book *library = malloc(sizeof(Book) * numBooks);\n\n    for (int i=0; i &lt; numBooks; i++){\n        printf(\"Book title: \");\n        readLine(library[i].title, sizeof(library[i].title));\n\n        printf(\"Author: \");\n        readLine(library[i].author.name, sizeof(library[i].author.name));\n\n        printf(\"Pub Year: \");\n        scanf(\"%d\", &library[i].pubYear);\n        getchar();\n\n    }\n\n    printf(\"Here is the infor you provided:\\n\");\n\n    for(int i=0; i &lt; numBooks; i++){\n        printf(\"Title: %s\\n\", library[i].title);\n        printf(\"Author: %s\\n\", library[i].author.name);\n        printf(\"Pub Year: %d\\n\", library[i].pubYear);\n    }\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/03-Operators.html",
    "href": "c-programming/03-Operators.html",
    "title": "Operators",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // arithmetic operators\n    // +    add\n    // -    sub\n    // *    multiply\n    // /    division\n    // %    mod \n\n\n    // example 1:\n    int a = 3;\n    int b = 40;\n    int result = a + b;\n    printf(\"a + b = %d \\n\", result);\n\n    // example 2:\n    int remainder = b % a;\n    printf(\"b %% a = %d\", remainder); \n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Operators"
    ]
  },
  {
    "objectID": "c-programming/03-Operators.html#arithmetic-operators",
    "href": "c-programming/03-Operators.html#arithmetic-operators",
    "title": "Operators",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // arithmetic operators\n    // +    add\n    // -    sub\n    // *    multiply\n    // /    division\n    // %    mod \n\n\n    // example 1:\n    int a = 3;\n    int b = 40;\n    int result = a + b;\n    printf(\"a + b = %d \\n\", result);\n\n    // example 2:\n    int remainder = b % a;\n    printf(\"b %% a = %d\", remainder); \n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Operators"
    ]
  },
  {
    "objectID": "c-programming/03-Operators.html#logical",
    "href": "c-programming/03-Operators.html#logical",
    "title": "Operators",
    "section": "Logical",
    "text": "Logical\n#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt; // need to use true and false as booleans\n\nint main(){\n\n    // &&  - logical and\n    // ||  - logical or\n    // !   - logical not\n\n    if (1 && 1){\n        printf(\"True and True\\n\");\n    }\n\n    if (1 && 0){\n        // wont print\n        printf(\"True and False\\n\");\n    }\n\n    if (1 || 0){\n        printf(\"True OR False\\n\");\n    }\n\n    if (!0 || 0){\n        printf(\"Not True OR False\\n\");\n    }\n\n    if (true){\n        printf(\"TRUE\");\n    }\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Operators"
    ]
  },
  {
    "objectID": "c-programming/03-Operators.html#bitwise",
    "href": "c-programming/03-Operators.html#bitwise",
    "title": "Operators",
    "section": "Bitwise",
    "text": "Bitwise\nNote: When compiling with the directive #include &lt;math.h&gt;, you may need to end the command with -lm. An example follows:\ngcc [fileName.c] -o [executableName] -lm\n#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main(){\n\n    unsigned int a = 10;            // 1010\n    unsigned int b = 15;            // 1111\n    \n\n    // bitwise and - &\n    unsigned int result = a & b; \n    /*\n        1010    &lt;- 10\n    &   1111    &lt;- 15\n    =   1010    -&gt; 10\n    */  \n    printf(\"Ex 1: %d\\n\", result);\n\n\n\n    // bitwise or - |\n    unsigned int result2 = 10 | 15;\n    /*\n        1010    &lt;- 10\n    |   1111    &lt;- 15\n    =   1111    -&gt; 15\n    */  \n    printf(\"Ex 2: %d\\n\", result2);\n\n\n\n    // bitwise not/flip/ones complement - ~\n    unsigned int result3 = ~a;      \n    // ~a -&gt; ~1010 but....\n    // remember if an unsigned int is 4 bytes, then we have:\n    //      00000000 00000000 00000000 00001010 \n    // So bit flipping results in: \n    //      11111111 11111111 11111111 11110101 -&gt; 4,294,967,285\n    printf(\"Ex 3: %u\\n\", result3);\n\n\n\n    // bitwise xor - ^\n    unsigned int result4 = a ^ b;\n    /*\n        1010    &lt;- 10\n    ^   1111    &lt;- 15\n    =   0101    -&gt;  5\n    */  \n    printf(\"Ex 4: %u\\n\", result4);\n\n\n    // right shift - &gt;&gt;\n    /*\n          15 &gt;&gt; 3  \n        1111 &gt;&gt; 3 -&gt; 0001 -&gt; 1\n    */\n    u_int32_t result5 = b &gt;&gt; 3;\n    printf(\"Ex 5: %u\\n\", result5);\n\n\n    // left shift - &lt;&lt;\n    /*\n          15 &lt;&lt; 2  \n        1111 &lt;&lt; 2 -&gt; 111100 -&gt; 60\n    */\n    u_int32_t result6 = b &lt;&lt; 2;\n    printf(\"Ex 5: %u\\n\", result6);\n\n\n    // Shifting can be used for power of 2 multiplication and division:\n\n    // Left shift for power of 2 multiplication:\n    // It's faster for a machine than traditional multiplication\n    // u &lt;&lt; k = u * pow(2, k)\n    int u = 3; \n    int k = 2;\n    printf(\"%d\\n\", u &lt;&lt; k);\n    printf(\"%lf\\n\", u * pow(2, k));  // requires #include &lt;math.h&gt; directive \n\n    // Right shift for power of 2 division:\n    // u &gt;&gt; k = u / pow(2, k)\n    int u2 = 2500;\n    int k2 = 3;\n    printf(\"%d\\n\", u2 &gt;&gt; k2);\n    printf(\"%f\", u2 / pow(2, k2));  // requires #include &lt;math.h&gt; directive \n\n    printf(\"\\n\");\n    return 0;\n\n}",
    "crumbs": [
      "C Programming",
      "Operators"
    ]
  },
  {
    "objectID": "c-programming/08-Structs-and-Unions.html",
    "href": "c-programming/08-Structs-and-Unions.html",
    "title": "Structs and Unions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// structs are collections of variables of different types\n// the members are like properties/state in Object oriented programming\n// memory is allocated for each member separately\n// all members values can be accessed/used at the same time\n\nstruct Person{\n    int age;        // location of first member is the same as the location of the struct\n    char name[20];  // location of the second member is adjacent to the first\n};\n\nint main(){\n    struct Person bill = {10, \"Bill\"};\n    struct Person amanda = {20, \"Amanda\"};\n\n    // look at bill\n    printf(\"%s is %d years old\\n\", bill.name, bill.age);\n    printf(\"%s is located at %p\\n\", bill.name, &bill);\n    printf(\"%s's age is located at %p\\n\", bill.name, &bill.age);\n    printf(\"%s's name is located at %p\\n\", bill.name, &bill.name);\n\n    // look at amanda\n    printf(\"%s is %d years old\\n\", amanda.name, amanda.age);\n    printf(\"%s is located at %p\\n\", amanda.name, &amanda);\n    printf(\"%s's age is located at %p\\n\", amanda.name, &amanda.age);\n    printf(\"%s's name is located at %p\\n\", amanda.name, &amanda.name);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "c-programming/08-Structs-and-Unions.html#structs",
    "href": "c-programming/08-Structs-and-Unions.html#structs",
    "title": "Structs and Unions",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\n// structs are collections of variables of different types\n// the members are like properties/state in Object oriented programming\n// memory is allocated for each member separately\n// all members values can be accessed/used at the same time\n\nstruct Person{\n    int age;        // location of first member is the same as the location of the struct\n    char name[20];  // location of the second member is adjacent to the first\n};\n\nint main(){\n    struct Person bill = {10, \"Bill\"};\n    struct Person amanda = {20, \"Amanda\"};\n\n    // look at bill\n    printf(\"%s is %d years old\\n\", bill.name, bill.age);\n    printf(\"%s is located at %p\\n\", bill.name, &bill);\n    printf(\"%s's age is located at %p\\n\", bill.name, &bill.age);\n    printf(\"%s's name is located at %p\\n\", bill.name, &bill.name);\n\n    // look at amanda\n    printf(\"%s is %d years old\\n\", amanda.name, amanda.age);\n    printf(\"%s is located at %p\\n\", amanda.name, &amanda);\n    printf(\"%s's age is located at %p\\n\", amanda.name, &amanda.age);\n    printf(\"%s's name is located at %p\\n\", amanda.name, &amanda.name);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "c-programming/08-Structs-and-Unions.html#structs-and-pointers",
    "href": "c-programming/08-Structs-and-Unions.html#structs-and-pointers",
    "title": "Structs and Unions",
    "section": "Structs and Pointers",
    "text": "Structs and Pointers\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nstruct Person{\n    char name[20];\n    int age;\n};\n\nint main(){\n    struct Person amanda = {\"Amanda\", 20};\n    struct Person *amandaPtr = &amanda;\n\n    // -&gt; operator accesses the value at a member via the pointer\n    printf(\"%s's age is %d\\n\", amandaPtr-&gt;name, amandaPtr-&gt;age);\n    \n    // or through indirection (dereferencing)\n    printf(\"%s's age is %d\\n\", (*amandaPtr).name, (*amandaPtr).age);\n}",
    "crumbs": [
      "C Programming",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "c-programming/08-Structs-and-Unions.html#struct-with-malloc",
    "href": "c-programming/08-Structs-and-Unions.html#struct-with-malloc",
    "title": "Structs and Unions",
    "section": "Struct with Malloc",
    "text": "Struct with Malloc\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct {\n    int age;\n    char name[20];\n} Person;\n\nint main(){\n    Person *personPtr;\n\n    personPtr = malloc(sizeof(Person));\n\n    personPtr-&gt;age=30;\n    strcpy(personPtr-&gt;name, \"Buzz Lightyear\");\n\n\n    printf(\"%s's age is %d\\n\", personPtr-&gt;name, personPtr-&gt;age);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "c-programming/08-Structs-and-Unions.html#unions",
    "href": "c-programming/08-Structs-and-Unions.html#unions",
    "title": "Structs and Unions",
    "section": "Unions",
    "text": "Unions\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// unions are collection of variables of different datatypes\n// the members again are kinda like the properties in OOP\n// memory is NOT allocated for each member separately\n// can only access/use one member at a time\n// one common space for all the members\n\nunion Student{\n    float gpa;\n    char name[10];\n};\n\n\nint main(){\n    union Student student;\n    student.gpa = 3.4;\n    // strcpy(student.name, \"Tony\");\n\n    printf(\"gpa: %f\\n\", student.gpa);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Structs and Unions"
    ]
  },
  {
    "objectID": "linux/vm-install.html",
    "href": "linux/vm-install.html",
    "title": "Virtual Machine Install",
    "section": "",
    "text": "This page provides instructions on installing an Ubuntu Virtual Machine regardless of the host system (i.e. whether you have a Windows or Mac x86 machine or an ARM based m-series Mac) using virtual box.",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install.html#virtual-box-download",
    "href": "linux/vm-install.html#virtual-box-download",
    "title": "Virtual Machine Install",
    "section": "Virtual Box Download",
    "text": "Virtual Box Download\n\nDownload Virtual Box from Oracle by visiting https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html.\nInstall Virtual Box",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install.html#vm-download",
    "href": "linux/vm-install.html#vm-download",
    "title": "Virtual Machine Install",
    "section": "VM Download",
    "text": "VM Download\nThese instructions were written for use with Ubuntu Server 24.04. Do not update when prompted during the install (it will just slow it down).\nDownload the appropriate image for your host machine:\n\nIf you have an x86/amd64 based machine (most Windows machines and Intel based Macs), go here for Ubuntu Server: https://ubuntu.com/download/server\nIf you have an arm based machine (m-series Macs and few Windows machines), go here for Ubuntu Server: https://ubuntu.com/download/server/arm\nYou are welcome to use any other Linux distro, links not provided.",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install.html#vm-setup",
    "href": "linux/vm-install.html#vm-setup",
    "title": "Virtual Machine Install",
    "section": "VM Setup",
    "text": "VM Setup\n\nCreate a new VM in virtual box.\nSkip the unattended install by checking the box to skip it.\nBase Memory: Consider using at least 4 GB of your memory (if you have at least 8 GB of ram). This is only setting the max it can use on your machine.\nProcessors: It is up to you how many you want it to be able to use. I chose 4.\nHard Disk: Use 100 GB for storage if you plan on adding a GUI, otherwise 25 is plenty. I highly recommend using a GUI, but you are not required to. If you do not, then you will most likely be using vim or nano to write C and Bash programs. Do not pre-allocate the storage.\nYou can click “Finish” at this point.",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install.html#booting-the-vm",
    "href": "linux/vm-install.html#booting-the-vm",
    "title": "Virtual Machine Install",
    "section": "Booting the VM",
    "text": "Booting the VM\nNote: At some point during the install you may be asked to update it. This is not required and could take a long time.\n\nBoot the VM by selecting it in the left navigation and clicking “Start”.\nWhen prompted, select “Try to Install Ubuntu”.\nThe install will present lots of options that you can choose to customize. At some point it will ask for a username and password, be sure you remember it. For lack of security, and since it is just for class, consider something simple like your name and 123456.\nOnce it is installed it will prompt to reboot. It’ll ask you to login with the username and password once you reboot.",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install.html#setting-up-the-gui",
    "href": "linux/vm-install.html#setting-up-the-gui",
    "title": "Virtual Machine Install",
    "section": "Setting Up the GUI",
    "text": "Setting Up the GUI\nIf you installed Ubuntu Desktop, or any other distro that came with a GUI, you can skip this step.\nIf you don’t want a GUI, you can skip this step, but you’ll be using vim/nano to edit files, which is fine but there is a steep learning curve for vim.\nIf you want a GUI (not required, but nice to have), you need to run the following two commands separately:\nsudo apt update\nsudo apt install ubuntu-desktop\nOnce it is done, turn the machine off by closing the window and selecting the option to turn the machine off. Then start the machine and log back in. There should be a GUI at this point.",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install.html#setting-up-your-machine",
    "href": "linux/vm-install.html#setting-up-your-machine",
    "title": "Virtual Machine Install",
    "section": "Setting Up Your Machine",
    "text": "Setting Up Your Machine\nClick the Ubuntu icon in the bottom left corner and find the Terminal application. You can drag and drop the icon to the dock on the left hand side if you want easier access.\nOpen the Terminal (shortcut is ctrl+alt+t) and run the following:\n\nFor programming tools install the build-essential package. This meta-package contains five packages: g++, gcc, make, libc6-dev, and dpkg-dev.\n\ng++ is the GNU compiler for the C++ language\ngcc is the GNU compiler for the C language\nmake is used to interpret “makefiles” which are used to control the build process of projects\nlibc6-dev is a GNU C library\ndpkg-dev is used to upload, build, and unpack Debian source packages\n\nsudo apt install build-essential\nFor vim (VI-iMproved):\nsudo apt install vim\nFor cleanup\nsudo apt autoremove\nsudo apt clean\nsudo apt autoclean\nFor VS Code (if you enjoy using it), follow the instructions here:\n\nhttps://linuxiac.com/how-to-install-vs-code-on-ubuntu-24-04-lts/",
    "crumbs": [
      "Linux Install",
      "Virtual Machine Install"
    ]
  },
  {
    "objectID": "linux/vm-install-win.html",
    "href": "linux/vm-install-win.html",
    "title": "VM Install On Windows",
    "section": "",
    "text": "In this course you will use a Unix environment. Specifically, you should use the latest LTS release of Ubuntu to ensure you are running the same system as the instructor. If you are using Windows, follow the instructions provided below to install Virtual Box and an Ubuntu virtual machine."
  },
  {
    "objectID": "linux/vm-install-win.html#partitioning-the-drive",
    "href": "linux/vm-install-win.html#partitioning-the-drive",
    "title": "VM Install On Windows",
    "section": "Partitioning the Drive",
    "text": "Partitioning the Drive\n\nNow we will add 4 partitions for /boot, swap, /, and /home to the free space. This setup will result in wiping /boot, /, and swap when updating the OS but /home will not be touched resulting in faster updates (~30 minutes).\n\n\n\nThe partition for /boot stores the Linux kernel images. Set the following parameters.\n        size    2048 MB\n        type    primary\n    location    beginning\n      use as    ext2\n mount point    /boot\n\n\n\nThe partition for the swap area is for memory swap space and hibernation.\n        size    if RAM size &gt;= 4 GB, size = RAM size.\n                otherwise, size = 2x RAM size but no more than 8 GB.\n                Ex: \n                    2 GB RAM: 4 GB swap\n                    4 GB RAM: 4 GB swap\n\n        type    primary\n    location    end\n      use as    swap area\n\n\n\n\n\n\n\nWarning\n\n\n\nThe values in the following image may not match your values\n\n\n\n\nThe partition for / stores the OS, OS configuration files, and applications.\n       size    ~35% of space left\n       type    primary\n   location    beginning\n     use as    ext4\nmount point    /\n\n\n\nThe partition for /home stores your files (application configuration, settings, pictures, etc)\n       size    ~65% (the last portion of free space)\n       type    primary\n   location    beginning\n     use as    ext4\nmount point    /home\n\n\n\nClick Install Now after creating the partitions."
  },
  {
    "objectID": "linux/vm-install-win.html#final-setup",
    "href": "linux/vm-install-win.html#final-setup",
    "title": "VM Install On Windows",
    "section": "Final Setup",
    "text": "Final Setup\n\nSet the timezone to the Chicago timezone (for Central).\nSet the user.\nExample:\n    name: zak\n    computer name: zak-csc222\n    username: zak\n    password: something fairly strong that you will remember\n\n    require my password to log in\n    don't encrypt my home folder\nAfter this it will start installing/copying files.\nReboot into Linux!\nGo to the Additional Steps."
  },
  {
    "objectID": "linux/unix-history.html",
    "href": "linux/unix-history.html",
    "title": "Unix History",
    "section": "",
    "text": "It’s everywhere. Browsing the internet? Doom scrolling? Streaming a movie? Most servers (~96%) run on some form of linux. Examples include:\n\nNetflix\nTwitter/X\nFacebook\nInstagram\nGoogle\nNew York Stock Exchange\n\nUsing an android phone? Android is a flavor of Linux.\nIt’s versatile. Its available under the GNU General Public License, designed to encourage freedom of usage.\n\nhttps://www.gnu.org/licenses/gpl-3.0.en.html\n\nIt’s a community. Development is community based. People are constantly working on ways to improve and further develop linux to work on a variety of devices and platforms.",
    "crumbs": [
      "Linux Install",
      "Unix History"
    ]
  },
  {
    "objectID": "linux/unix-history.html#why-linux",
    "href": "linux/unix-history.html#why-linux",
    "title": "Unix History",
    "section": "",
    "text": "It’s everywhere. Browsing the internet? Doom scrolling? Streaming a movie? Most servers (~96%) run on some form of linux. Examples include:\n\nNetflix\nTwitter/X\nFacebook\nInstagram\nGoogle\nNew York Stock Exchange\n\nUsing an android phone? Android is a flavor of Linux.\nIt’s versatile. Its available under the GNU General Public License, designed to encourage freedom of usage.\n\nhttps://www.gnu.org/licenses/gpl-3.0.en.html\n\nIt’s a community. Development is community based. People are constantly working on ways to improve and further develop linux to work on a variety of devices and platforms.",
    "crumbs": [
      "Linux Install",
      "Unix History"
    ]
  },
  {
    "objectID": "linux/unix-history.html#history-of-unix-like-systems",
    "href": "linux/unix-history.html#history-of-unix-like-systems",
    "title": "Unix History",
    "section": "History of Unix Like Systems",
    "text": "History of Unix Like Systems\n\n1969 The Unix operating system is developed by AT&T/Bell Laboratories.\n\nFirst developed with Assembly but moved to primarily C\nSince it was primarily C, it was very portable\nAT&T cannot sell it due to agreements not to enter the computing business\nAT&T opts to distribute it under licenses to Labs and Universities\n\n1977 UC Berkly developed BSD (Berkley Software Distribution) as a Unix-like replacement.\n\nIt contained code owned by AT&T\nWill eventually lead to a lawsuit from AT&T\n\n1983 GNU Operating System (Pronounced Guh-nu) started by Richard Stallman\n\nIts purpose was to be a free/open unix-like replacement for UNIX (that didn’t contain any code owned by AT&T).\nGNU stands for GNU is Not Unix\nGNU’s kernel is GNU Hurd (started in 1990, before Linux, doesn’t become stable until 2001)\n\nNote: The kernel of an OS is the system between the hardware and software of a machine. Main function is process, memory, and other resource management.\nThe OS is the system as a whole; interface between user and hardware. An OS contains a kernel, applications, device drivers, utilities, etc.\n\n\n1991\n\nFinnish Grad Student Linus Torvalds emails about the OS he is working on.\nLinux kernel is developed\n\n1992\n\nBSDi gets sued by AT&T, which slowed BSD development.\nThe Linux kernel becomes the kernel for GNU.\nGNU/Linux is released as Free software under the GNU General Purpose License.\n\nNote: When we say “Linux”, we really mean GNU/Linux. Linux is just the kernel.\n\nGNU License gave developers the ability to make custom OSs that felt like UNIX without the fear of being sued.\n\n1993 The Debian distrobution is born\n\nOne of the most popular distros/family of distros\nMinimal, stable, good for general purpose pc usage and servers alike.\nMost distros are children of Debian including Ubuntu, Raspberry Pi OS, and SteamOS.\n\n1994 The Redhat Distrobution is born\n\nPrimarily used for enterprise\nDistros in the Redhat family include Fedora (Distro of choice for Linus Torvalds) and CentOS\n\n2000/2002 Gentoo/Arch are born as more simplistic families of distrobutions\nIn later 2000s we see some independent distros we are more familiar with such as\n\nFireOS (Amazon FireStick/Fire devices)\nAndroid (Google)\n\nFun Fact: Linus Torvalds also created git for version control.\n\nDistro Family Tree\nSource: A large portion of the information above comes from GNU’s Website",
    "crumbs": [
      "Linux Install",
      "Unix History"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC 222 Systems Programming",
    "section": "",
    "text": "Nothing to see here."
  },
  {
    "objectID": "terminal/basic.html",
    "href": "terminal/basic.html",
    "title": "Introduction to the Shell and Terminal",
    "section": "",
    "text": "Def: The shell is a program (interpreter) that takes the commands you type and passes them to the operating system for execution.\nDef: The terminal is the interface the user interacts with. This is where you type the commands for the shell.\nCommon Shells include:\n- Bourn Again Shell (bash - linux distros, macOS)\n- z-shell (zsh - linux distros, macOS)\n- powershell (windows)\n- gitbash (windows)",
    "crumbs": [
      "Shell and Terminal",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "terminal/basic.html#introduction",
    "href": "terminal/basic.html#introduction",
    "title": "Introduction to the Shell and Terminal",
    "section": "",
    "text": "Def: The shell is a program (interpreter) that takes the commands you type and passes them to the operating system for execution.\nDef: The terminal is the interface the user interacts with. This is where you type the commands for the shell.\nCommon Shells include:\n- Bourn Again Shell (bash - linux distros, macOS)\n- z-shell (zsh - linux distros, macOS)\n- powershell (windows)\n- gitbash (windows)",
    "crumbs": [
      "Shell and Terminal",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "terminal/basic.html#controls",
    "href": "terminal/basic.html#controls",
    "title": "Introduction to the Shell and Terminal",
    "section": "Controls",
    "text": "Controls\nThese are basic controls that are useful for using the terminal.\nup - show previous command\ndown - show next command\ntab - autocomplete\nctrl + l - clear\nctrl + c - cancel\nctrl + r - search\nctrl + d - close the terminal\nctrl + a - jump to the beginning of the line\nctrl + e - jump to the end of the line\nalt + [left arrow key/right arrow key] - move the cursor left/right by the word",
    "crumbs": [
      "Shell and Terminal",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "terminal/basic.html#some-basic-commands",
    "href": "terminal/basic.html#some-basic-commands",
    "title": "Introduction to the Shell and Terminal",
    "section": "Some Basic Commands",
    "text": "Some Basic Commands\nA set of basic commands for your reference. Complete usage is not illustrated.\nsudo - use when you need superuser privelages (short for superuser do)\npwd - print working directory\nmkdir [new directory name] - create a new directory\ntouch [new file name] - create a file\nls - list the contents of the a directory\ncd [destination] - change the directory\nman [command] - show the manual for a command\nrm [filename] - remove a file\nrmdir [directory name] - remove a directory\n\nExample\nThis example illustrates some usage of the commands above.\ncd ~                # navigate to the home directory\nmkdir example-1     # create a directory named example-1\ncd example-1        # navigate into the directory named example-1\npwd                 # print the current working directory just to see \ntouch new-file.txt  # create a file named new-file.txt\ntouch .secret-file  # create a file that starts with a .\nls                  # list out the files in the current directory\nls -a               # list all the files (including hidden ones)\nls -alh             # list the files, include details about each one, in a human readable format\ncd ..               # go up one directory\nrm -rf example-1    # remove the folder your created and everything in it",
    "crumbs": [
      "Shell and Terminal",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "terminal/basic.html#more-commands",
    "href": "terminal/basic.html#more-commands",
    "title": "Introduction to the Shell and Terminal",
    "section": "More Commands",
    "text": "More Commands\nA set of more commands for your reference. Complete usage is not illustrated.\ncat [filename] - returns the contents of the file\nmore [filename] - allows you to view the contents in a paginated manner\necho [a message] - returns the message\ncp [source] [destination] - copies a file from the source to a destination\nmv [source] [destination] - moves a file from the source to a destination\nhistory - see the history of previous commands that were typed\nclear - clears what is displayed in the terminal\nwget [url] - downloads the contents at the url\n\nExample\nThe following is an an example of using some of the commands above.\ncd ~                                                    # navigate home\nmkdir books                                             # create a directory called books\ncd books\necho \"Let's download a book\"                            # produce a message\nwget https://www.gutenberg.org/cache/epub/98/pg98.txt   # download \"A Tale of Two Cities\"\nls                                                      # list the files\nmv pg98.txt a-tale-of-two-cities.txt                    # rename the book\nmore a-tale-of-two-cities.txt                           # read the book",
    "crumbs": [
      "Shell and Terminal",
      "Introduction to the Shell and Terminal"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html",
    "href": "terminal/file-permissions.html",
    "title": "File Permissions",
    "section": "",
    "text": "File permissions are expressed with a 10 character string.\nTo see the file permissions for files in a directory run ls -l.\nThe output will resemble the following:\ndrwxr-xr-x 2 josh josh 4096 Nov 29 15:32 Desktop\ndrwxr-xr-x 3 josh josh 4096 Nov 30 11:14 Documents\ndrwxr-xr-x 2 josh josh 4096 Nov 29 11:26 Downloads\nThe first set of characters such as drwxr-xr-x denotes the file permissions.\nThe third and fouth columns denote the user and group assigned to the file.",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html#introduction",
    "href": "terminal/file-permissions.html#introduction",
    "title": "File Permissions",
    "section": "",
    "text": "File permissions are expressed with a 10 character string.\nTo see the file permissions for files in a directory run ls -l.\nThe output will resemble the following:\ndrwxr-xr-x 2 josh josh 4096 Nov 29 15:32 Desktop\ndrwxr-xr-x 3 josh josh 4096 Nov 30 11:14 Documents\ndrwxr-xr-x 2 josh josh 4096 Nov 29 11:26 Downloads\nThe first set of characters such as drwxr-xr-x denotes the file permissions.\nThe third and fouth columns denote the user and group assigned to the file.",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html#file-permission-breakdown",
    "href": "terminal/file-permissions.html#file-permission-breakdown",
    "title": "File Permissions",
    "section": "File Permission Breakdown",
    "text": "File Permission Breakdown\nLet’s break down the permission string drwxr-xr-x.\n\nThe 1st character is the type of file. The most common characters you will see here are:\n- for file.\nd for directory.\nl for link.\nIn the permissions drwxr-xr-x, the first character is d, so we have a directory.\nThe next 9 characters are for 3 different permission classes\n\nThe owner of the file is the first set of 3 characters.\nIn the string drwxr-xr-x, we have rwx which means the owner can read, write, and execute the file.\nThe group for the file is the second set of 3.\nIn the string drwxr-xr-x, we have r-x which means anyone in the group for the file (users belong to groups) can read and execute the file.\nThe third set of 3 are for all other users (those not in the same user group, and not the owner)\nIn the string drwxr-xr-x, we have r-x which means all others can read and execute the file, but cannot modify it.",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html#changing-file-permissions",
    "href": "terminal/file-permissions.html#changing-file-permissions",
    "title": "File Permissions",
    "section": "Changing File Permissions",
    "text": "Changing File Permissions\nWe use the command chmod to change the file permissions. You can use either of the following methods to change the permissions.",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html#using-the-characters-that-represent-the-permissions",
    "href": "terminal/file-permissions.html#using-the-characters-that-represent-the-permissions",
    "title": "File Permissions",
    "section": "Using the characters that represent the permissions",
    "text": "Using the characters that represent the permissions\nThe characters for each type of user are:\n\nu for owner\ng for group\no for others\na for all\n\nThe characters for permissions are:\n\nr for read\nw for write\nx for execute\n\nTo add permissions, combine a usertype character with + and one or more of the permission characters.\nTo remove permissions, combine a usertype character with - and one or more of the permission characters.\n\nExamples\n\nchmod u+rwx filename to give read write and execute permissions to the owner.\nchmod g-x filename to remove execute permissions from the group.",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html#using-numeric-values",
    "href": "terminal/file-permissions.html#using-numeric-values",
    "title": "File Permissions",
    "section": "Using Numeric Values",
    "text": "Using Numeric Values\nThe values for each type of permission are:\nr = 4\nw = 2\nx = 1\nYou can place them adjacent to each other to get combos\nrw  = 4 + 2     = 6\nrwx = 4 + 2 + 1 = 7\nwx  =     2 + 1 = 3\nrx  = 4     + 1 = 5\nWhen referencing the permission string, notice that this is simply binary on a set of 3 characters. For example, with the string drwxr-xr-x we have:\nd    r w x    r - x    r - x\n     4 2 1    4   1    4   1\n\nSum:     7        5        5\nPermission is 755\n\nExamples\n\nchmod 766 filename to give:\n\nrwx permissions to the owner\nrw permissions to the group\n\nrw permissions to the others",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/file-permissions.html#changing-ownership",
    "href": "terminal/file-permissions.html#changing-ownership",
    "title": "File Permissions",
    "section": "Changing Ownership",
    "text": "Changing Ownership\n\nuse the command sudo chown [owner][:group] [filename] to change the ownership of a file",
    "crumbs": [
      "Shell and Terminal",
      "File Permissions"
    ]
  },
  {
    "objectID": "terminal/more-commands.html",
    "href": "terminal/more-commands.html",
    "title": "More Commands",
    "section": "",
    "text": "Typically used to find a file or directory.\nRecall grep is typically used to find patterns inside files\n\n# Example with find\nfind . -name \"test1.txt\"",
    "crumbs": [
      "Shell and Terminal",
      "More Commands"
    ]
  },
  {
    "objectID": "terminal/more-commands.html#find",
    "href": "terminal/more-commands.html#find",
    "title": "More Commands",
    "section": "",
    "text": "Typically used to find a file or directory.\nRecall grep is typically used to find patterns inside files\n\n# Example with find\nfind . -name \"test1.txt\"",
    "crumbs": [
      "Shell and Terminal",
      "More Commands"
    ]
  },
  {
    "objectID": "terminal/more-commands.html#and",
    "href": "terminal/more-commands.html#and",
    "title": "More Commands",
    "section": "&&, ||, and ;",
    "text": "&&, ||, and ;\n\nUse &&, || and ; to chain commands together\nThe command before && must complete without error for the command after && to execute\n# example with success on first command\necho \"hi\" &gt; test.txt && echo \"hello.txt\"\n# example with an error on the first command with &&\nfind . --name \"test1.txt\" && echo ok\n\n# after fixing the error\nfind . -name \"test1.txt\" && echo ok\nThe command before || must result in an error for the command after || to execute\n# example with || with an error\nfind . --name \"test1.txt\" || echo error\n\n# after fixing the error\nfind . -name \"test1.txt\" || echo error        # no error\nUse ; to just separate two commands on the same line\n# echo ok happens even though find will throw and error\nfind --name test1.txt; echo ok",
    "crumbs": [
      "Shell and Terminal",
      "More Commands"
    ]
  },
  {
    "objectID": "bash-scripting/07-Functions.html",
    "href": "bash-scripting/07-Functions.html",
    "title": "Functions",
    "section": "",
    "text": "#!/bin/bash\n\n# defining functions\nhello () {\n    echo \"Hello from a function\"\n    echo \"Exiting the function\"\n}\n\n# calling the function\nhello   # no parenthesis",
    "crumbs": [
      "Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "bash-scripting/07-Functions.html#simple-function",
    "href": "bash-scripting/07-Functions.html#simple-function",
    "title": "Functions",
    "section": "",
    "text": "#!/bin/bash\n\n# defining functions\nhello () {\n    echo \"Hello from a function\"\n    echo \"Exiting the function\"\n}\n\n# calling the function\nhello   # no parenthesis",
    "crumbs": [
      "Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "bash-scripting/07-Functions.html#with-args",
    "href": "bash-scripting/07-Functions.html#with-args",
    "title": "Functions",
    "section": "With Args",
    "text": "With Args\n\n#!/bin/bash\n\n# can use word function without paren\nfunction hello {\n    # this takes one arg\n    # it's just like for a file\n    echo \"first arg $1\"\n}\n\n\n# if not using function use paren\nhelloAgain () {\n    echo \"All args $@\"\n}\n\n\nhello \"this\"\nhelloAgain hi today is thursday",
    "crumbs": [
      "Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "bash-scripting/07-Functions.html#local-variables",
    "href": "bash-scripting/07-Functions.html#local-variables",
    "title": "Functions",
    "section": "Local Variables",
    "text": "Local Variables\n#!/bin/bash\n\nglobalvar=\"this is global\"\n\nhelloLocal () {\n    local localvar=\"this is local\"\n\n    local globalvar=\"this is also local\"\n    echo $globalvar\n    echo $localvar\n}\n\nhelloLocal\necho $globalvar",
    "crumbs": [
      "Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "bash-scripting/07-Functions.html#returns",
    "href": "bash-scripting/07-Functions.html#returns",
    "title": "Functions",
    "section": "Returns",
    "text": "Returns\n#!/bin/bash\n\nhelloReturn () {\n    # add 25 to the first arg\n    local someresult=$((25 + $1))\n\n    # return requires numeric values\n    return $someresult # use echo for strings\n}\n\nhelloReturn 20\necho $?",
    "crumbs": [
      "Bash Scripting",
      "Functions"
    ]
  },
  {
    "objectID": "bash-scripting/01-Intro.html",
    "href": "bash-scripting/01-Intro.html",
    "title": "Intro",
    "section": "",
    "text": "#!/bin/bash\n\n# Above is the shebang\n\n# For mac\n# Update bash with homebrew\n# If installed with homebrew the default location is\n# /opt/homebrew/bin/bash\n# Can use #!/usr/bin/env bash to use the version most recently added to PATH environment variable\n\necho Hello World\necho I am `whoami`\necho Today is `date`\necho Current working directory is $(pwd)",
    "crumbs": [
      "Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "bash-scripting/01-Intro.html#hello-world",
    "href": "bash-scripting/01-Intro.html#hello-world",
    "title": "Intro",
    "section": "",
    "text": "#!/bin/bash\n\n# Above is the shebang\n\n# For mac\n# Update bash with homebrew\n# If installed with homebrew the default location is\n# /opt/homebrew/bin/bash\n# Can use #!/usr/bin/env bash to use the version most recently added to PATH environment variable\n\necho Hello World\necho I am `whoami`\necho Today is `date`\necho Current working directory is $(pwd)",
    "crumbs": [
      "Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "bash-scripting/01-Intro.html#variables",
    "href": "bash-scripting/01-Intro.html#variables",
    "title": "Intro",
    "section": "Variables",
    "text": "Variables\n#!/bin/bash\n\n# setting variables (no spaces adjacent to = )\nmyVar=10\nanotherVar=\"the variable is...\"\n\n# accessing the variables ($ right infront of the variable)\necho \"The var is $myVar\"\necho The var is $myVar    # double quotes were not required \n\n# single quotes would not have worked\necho 'This is not my var: $myVar' # single quotes are a literal\n\n# escape special characters\necho \"The banana is \\$$myVar\" \n\n# have characters adjacent to variables with curlies\necho \"The banana is \\$${myVar}s\"",
    "crumbs": [
      "Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "bash-scripting/01-Intro.html#arrays",
    "href": "bash-scripting/01-Intro.html#arrays",
    "title": "Intro",
    "section": "Arrays",
    "text": "Arrays\n#!/usr/bin/env bash\n\n\n# declare and assign\ngroceries=(\"bread\" \"milk\" \"eggs\")\n\n# access\necho ${groceries[1]}\n\n# declare first, assign later\ndeclare -a numeric_array   # numeric array - index is numeric\ndeclare -A associative_array # Associative array (bash v4+) \n\n# assign\nnumeric_array[0]=\"Hello\"\nnumeric_array[1]=\"Worlds\"\n\n# reading values\necho \"${numeric_array[0]} ${numeric_array[1]}\"\necho \"${numeric_array[@]}\"\n\n# append to the array\nnumeric_array+=(\"Another Thing\")\n\n# quantity of things in the array\necho \"${#numeric_array[@]}\"\n\n# Associative Arrays\nassociative_array[firstname]=\"Josh\"\nassociative_array[lastname]=\"Coriell\"\n\necho \"${associative_array[firstname]} ${associative_array[lastname]}\"",
    "crumbs": [
      "Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "bash-scripting/01-Intro.html#prompting",
    "href": "bash-scripting/01-Intro.html#prompting",
    "title": "Intro",
    "section": "Prompting",
    "text": "Prompting\n#!/bin/bash\n\n\n# use read with -p for prompt\nread -p \"Enter your first and last name: \" first last\n\necho Give me a secret:\nread -s secret\n\necho First is $first \necho Last is $last\necho Secret is $secret",
    "crumbs": [
      "Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "bash-scripting/01-Intro.html#math",
    "href": "bash-scripting/01-Intro.html#math",
    "title": "Intro",
    "section": "Math",
    "text": "Math\n#!/bin/bash\n\n# math\necho $((2.3 + 3))\necho $((3 - 4))\necho $((3 * 4))\necho $((5 / 2)) # integer divsion\necho $((5 % 2))",
    "crumbs": [
      "Bash Scripting",
      "Intro"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html",
    "href": "bash-scripting/03-Conditionals.html",
    "title": "Conditionals",
    "section": "",
    "text": "#!/bin/bash\n\n# with test\nif test $1 -gt 5\nthen\n    echo \"It is greater than 5\"\nfi \n\nif test $1 -lt 5\nthen \n    echo \"It is less than 5\"\nelse\n    echo \"It is not less than 5\"\nfi",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html#if-with-test",
    "href": "bash-scripting/03-Conditionals.html#if-with-test",
    "title": "Conditionals",
    "section": "",
    "text": "#!/bin/bash\n\n# with test\nif test $1 -gt 5\nthen\n    echo \"It is greater than 5\"\nfi \n\nif test $1 -lt 5\nthen \n    echo \"It is less than 5\"\nelse\n    echo \"It is not less than 5\"\nfi",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html#if-with-brackets",
    "href": "bash-scripting/03-Conditionals.html#if-with-brackets",
    "title": "Conditionals",
    "section": "if with brackets",
    "text": "if with brackets\n#!/bin/bash\n\n# test but using brackets\n# must put space around the brackets\nif [ $1 -lt 10 ]\nthen \n    echo \"$1 is less than 10\"\nelif [ $1 -gt 10 ]\nthen\n    echo \"$1 is greater than 10\"\nelse \n    echo \"$1 is 10\"\nfi",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html#comparison-operators",
    "href": "bash-scripting/03-Conditionals.html#comparison-operators",
    "title": "Conditionals",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\n\n# don't run this file\n# just showing the operators\n\n### integer comparisons\n\n[ 3 -ge 2 ]  # greater than or equal to\n(( 5 &gt;= 3 )) # option with paren\n\n[ 3 -gt 2 ]  # greater than\n(( 5 &gt; 2 ))  # with paren\n\n[ 5 -lt 10 ] # less than\n(( 5 &lt; 3 ))  # with paren\n\n[ 5 -le 10 ] # less than or equal to\n(( 5 &lt;= 10 )) # with paren\n\n[ 5 -eq 5 ]   # equal to\n              # no == for ints\n\n[ 5 -ne 5 ]   # not equal to\n\n##### String comparisons\n# equality\n[ \"apple\" == \"apple\" ] # returns true\n\nmyvar=\"hi you\"\n[ $myvar == \"hi you\" ] # returns false, performs word splitting on \"hi you\"\n\n[[ $myvar == \"hi you\" ]] # returns true\n[ \"$myvar\" == \"hi you\" ] # or put the variable in quotes to return true\n\n# double brackets can help with pattern matching\n[[ \"apple\" == a* ]]  # returns ture, bc apple starts with an a (* for wildcard)\n\n#  checking for ASCII alphabetical order with &gt; or &lt;\n[[ \"apple\" &lt; \"banana\" ]] # returns true\n[ \"apple\" \\&lt; \"banana\" ]  # can use \\&lt; if using single brackets\n\n# check for an empty string with -z\navar=\"\"\n[ -z $avar ]  # returns true\n\n# check if a string is not null/empty\n[ -n $avar ]  # return false",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html#file-testing",
    "href": "bash-scripting/03-Conditionals.html#file-testing",
    "title": "Conditionals",
    "section": "File Testing",
    "text": "File Testing\n#!/bin/bash\n\nfilename=\"hello.txt\"\n\n[[ -e $filename ]] # returns true if any file/directory with the name exists\n                    # use double brackets to avoid word splitting \n\n[[ -f $filename ]] # returns true if a regular file exists\n\n[[ -r $filename ]] # check for a readable file\n\n[ -d $filename ] # check for a directory\n\n[ -L $filename ] # check for a symbolic link\n\n# there are many more flags\n# man test give more info",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html#logical-operators",
    "href": "bash-scripting/03-Conditionals.html#logical-operators",
    "title": "Conditionals",
    "section": "Logical Operators",
    "text": "Logical Operators\n# and\n[ 1 -eq 1 -a 2 -eq 2 ]  # -a for and\n[[ 1 -eq 1 && 2 -eq 2 ]]  # double amp in double bracket\n[ 1 -eq 1 ] && [2 -eq 2 ] # double amp outside of single bracket\n\n# or\n[ 1 -eq 1 -o 2 -eq 2 ]  # -o for or\n[[ 1 -eq 1 || 2 -eq 2 ]]  # double pipe in double bracket\n[ 1 -eq 1 ] || [2 -eq 2 ] # double pipe outside of single bracket\n\n# not is ! (just put it out front)\n[ ! -f \"hello.txt\" ]",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/03-Conditionals.html#existance-example",
    "href": "bash-scripting/03-Conditionals.html#existance-example",
    "title": "Conditionals",
    "section": "Existance Example",
    "text": "Existance Example\n#!/bin/bash\n\nif [ -f \"hello world.txt\" ]\nthen\n    echo \"The file hello world.txt exists\"\nelse\n    echo \"The file does not exist\"\nfi\n\n# check if some directories exist\nif [ -d \"../01 Intro\" -a -d \"../02 Args\" ]\nthen \n    echo \"They exist\"\nelse  \n    echo \"They don't\"\nfi",
    "crumbs": [
      "Bash Scripting",
      "Conditionals"
    ]
  },
  {
    "objectID": "bash-scripting/02-Args.html",
    "href": "bash-scripting/02-Args.html",
    "title": "Args",
    "section": "",
    "text": "#!/bin/bash\n\n# you can get the individual args passed into a file\necho The file name is $0\necho The first arg is $1\necho The second arg is $2\n\n# The length of the args\necho The length of arg1 is ${#1}",
    "crumbs": [
      "Bash Scripting",
      "Args"
    ]
  },
  {
    "objectID": "bash-scripting/02-Args.html#individual-args",
    "href": "bash-scripting/02-Args.html#individual-args",
    "title": "Args",
    "section": "",
    "text": "#!/bin/bash\n\n# you can get the individual args passed into a file\necho The file name is $0\necho The first arg is $1\necho The second arg is $2\n\n# The length of the args\necho The length of arg1 is ${#1}",
    "crumbs": [
      "Bash Scripting",
      "Args"
    ]
  },
  {
    "objectID": "bash-scripting/02-Args.html#all-args",
    "href": "bash-scripting/02-Args.html#all-args",
    "title": "Args",
    "section": "All Args",
    "text": "All Args\n#!/bin/bash\n\necho \"All the args are $*\" # Access all the args as a string\n\necho \"All the args are $@\"  # Access as an array\n\necho Total number of args is $#\necho ${#@}",
    "crumbs": [
      "Bash Scripting",
      "Args"
    ]
  },
  {
    "objectID": "bash-scripting/06-Loops.html",
    "href": "bash-scripting/06-Loops.html",
    "title": "Hello World",
    "section": "",
    "text": "#!/bin/bash\n\ncounter=0\nwhile [ $counter -le 10 ]\ndo \n    echo $counter\n    # counter=$((counter+1))\n    # ((counter++)) # returns the value of counter before \n    # ((++counter)) # returns the value of counter after\n    ((counter+=1))\n    sleep 0.5\ndone",
    "crumbs": [
      "Bash Scripting",
      "Hello World"
    ]
  },
  {
    "objectID": "bash-scripting/06-Loops.html#while",
    "href": "bash-scripting/06-Loops.html#while",
    "title": "Hello World",
    "section": "",
    "text": "#!/bin/bash\n\ncounter=0\nwhile [ $counter -le 10 ]\ndo \n    echo $counter\n    # counter=$((counter+1))\n    # ((counter++)) # returns the value of counter before \n    # ((++counter)) # returns the value of counter after\n    ((counter+=1))\n    sleep 0.5\ndone",
    "crumbs": [
      "Bash Scripting",
      "Hello World"
    ]
  },
  {
    "objectID": "bash-scripting/06-Loops.html#for",
    "href": "bash-scripting/06-Loops.html#for",
    "title": "Hello World",
    "section": "For",
    "text": "For\n#!/bin/bash\n\n# traditional for loop\nfor (( i=0 ; i &lt; 5 ; i++ )) # don't forget the spaces\ndo \n    echo \"Counter $i\"\ndone\n\n# for each loops\nfor i in 1 2 3 4 5\ndo\n    echo \"Value: $i\"\ndone \n\n# A range of values\nfor i in {0..5}     # no spaces\ndo \n    echo \"Range: $i\"\ndone \n\n# specify an increment\nfor i in {0..10..2} # count from 0 to 10 by 2 (bash 4+)\ndo \n    echo \"Inc: $i\"\ndone",
    "crumbs": [
      "Bash Scripting",
      "Hello World"
    ]
  },
  {
    "objectID": "bash-scripting/06-Loops.html#loop-over-files",
    "href": "bash-scripting/06-Loops.html#loop-over-files",
    "title": "Hello World",
    "section": "Loop over files",
    "text": "Loop over files\n#!/bin/bash\n\n# looping over files in this directory\nfor file in *\ndo\n    if [ -f \"$file\" ]\n    then \n        echo $file\n    fi\ndone \n\nparent_dir=\"..\"\nfor directory in $parent_dir/*\ndo\n    if [ -d \"$directory\" ]\n    then \n        echo $directory\n    fi\ndone \n\nabsolute_dir=\"/Users/josh/Desktop\"\nfor directory in $absolute_dir/*\ndo \n    if [ -d \"$directory\" ] \n    then\n        echo $directory\n    fi \ndone",
    "crumbs": [
      "Bash Scripting",
      "Hello World"
    ]
  },
  {
    "objectID": "bash-scripting/06-Loops.html#loop-over-args",
    "href": "bash-scripting/06-Loops.html#loop-over-args",
    "title": "Hello World",
    "section": "Loop over args",
    "text": "Loop over args\n#!/bin/bash\n\n# recall: to access args use $@\n\nfor arg in $@\ndo \n    echo $arg\ndone",
    "crumbs": [
      "Bash Scripting",
      "Hello World"
    ]
  },
  {
    "objectID": "bash-scripting/04-Exit-Codes.html",
    "href": "bash-scripting/04-Exit-Codes.html",
    "title": "Exit Codes",
    "section": "",
    "text": "#!/bin/bash\n\n# exit code from last command\necho \"This: $?\"\n\n# typically success is 0, failure is typically &gt; 0\nls -abcdefg\necho $?",
    "crumbs": [
      "Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "bash-scripting/04-Exit-Codes.html#exit-code",
    "href": "bash-scripting/04-Exit-Codes.html#exit-code",
    "title": "Exit Codes",
    "section": "",
    "text": "#!/bin/bash\n\n# exit code from last command\necho \"This: $?\"\n\n# typically success is 0, failure is typically &gt; 0\nls -abcdefg\necho $?",
    "crumbs": [
      "Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "bash-scripting/04-Exit-Codes.html#use",
    "href": "bash-scripting/04-Exit-Codes.html#use",
    "title": "Exit Codes",
    "section": "Use",
    "text": "Use\n#!/bin/bash\n\nread -p \"What file would you like to remove? \" filename\n\nif [ ! -f $filename ]\nthen\n    echo \"That file does not exist...exiting\"\n    exit 1  # values less than 255\nfi \n\nrm $filename && echo \"File successfully removed\"",
    "crumbs": [
      "Bash Scripting",
      "Exit Codes"
    ]
  },
  {
    "objectID": "bash-scripting/05-Case.html",
    "href": "bash-scripting/05-Case.html",
    "title": "Case",
    "section": "",
    "text": "#!/bin/bash\n\necho \"What is your favorite food? \"\n\necho \"1 - Pizza\"\necho \"2 - Pineapples\"\necho \"3 - Pineapple Pizza\"\n\nread food;\n\ncase $food in \n    1) echo \"Pizza is a great choice.\";;\n    2) echo \"Mmm. Great fruit\";;\n    3) echo \"Spicy choice. You must not be Remy.\";;\n    *) echo \"That wasn't an option\"\nesac",
    "crumbs": [
      "Bash Scripting",
      "Case"
    ]
  },
  {
    "objectID": "bash-scripting/05-Case.html#example",
    "href": "bash-scripting/05-Case.html#example",
    "title": "Case",
    "section": "",
    "text": "#!/bin/bash\n\necho \"What is your favorite food? \"\n\necho \"1 - Pizza\"\necho \"2 - Pineapples\"\necho \"3 - Pineapple Pizza\"\n\nread food;\n\ncase $food in \n    1) echo \"Pizza is a great choice.\";;\n    2) echo \"Mmm. Great fruit\";;\n    3) echo \"Spicy choice. You must not be Remy.\";;\n    *) echo \"That wasn't an option\"\nesac",
    "crumbs": [
      "Bash Scripting",
      "Case"
    ]
  },
  {
    "objectID": "terminal/texteditors.html",
    "href": "terminal/texteditors.html",
    "title": "Text Editors",
    "section": "",
    "text": "a terminal based text editor\nsteep learning curve, but very powerful\nOnce you get a hang of it, it’s a good way to feel like you’re better than everyone else\nfor help learning, run the command vimtutor in the terminal\n\n\n\nIn this example, we create a file, open it in vim, and add “hello world” to it.\n\nCreate the file and open it in vim\ncd ~\nmkdir vim-practice\ncd vim-practice\ntouch helloworld.txt\nvim helloworld.txt\nSwitch to insert mode by typing i\n\nmodes:\n\ni for insert (escape to back out)\nv for visual\nshift+r for replace\n: for commands\n\n:wq to save and quit\n\nType hello world.\nPress the escape key to back out.\nSave and exit by typing :wq.\nRun cat helloworld.txt to see the contents.",
    "crumbs": [
      "Shell and Terminal",
      "Text Editors"
    ]
  },
  {
    "objectID": "terminal/texteditors.html#vim",
    "href": "terminal/texteditors.html#vim",
    "title": "Text Editors",
    "section": "",
    "text": "a terminal based text editor\nsteep learning curve, but very powerful\nOnce you get a hang of it, it’s a good way to feel like you’re better than everyone else\nfor help learning, run the command vimtutor in the terminal\n\n\n\nIn this example, we create a file, open it in vim, and add “hello world” to it.\n\nCreate the file and open it in vim\ncd ~\nmkdir vim-practice\ncd vim-practice\ntouch helloworld.txt\nvim helloworld.txt\nSwitch to insert mode by typing i\n\nmodes:\n\ni for insert (escape to back out)\nv for visual\nshift+r for replace\n: for commands\n\n:wq to save and quit\n\nType hello world.\nPress the escape key to back out.\nSave and exit by typing :wq.\nRun cat helloworld.txt to see the contents.",
    "crumbs": [
      "Shell and Terminal",
      "Text Editors"
    ]
  },
  {
    "objectID": "terminal/texteditors.html#nano",
    "href": "terminal/texteditors.html#nano",
    "title": "Text Editors",
    "section": "Nano",
    "text": "Nano\n\nanother terminal based text editor\nsimpler to use than vim\n\n\nExample\nIn this example, we create a file and add “hello world” to it using nano.\n\nRun the following commands\ncd ~\nmkdir nano-practice\ncd nano-practice\ntouch helloworld.txt\nnano helloworld.txt\nAt this point, the file should be open. Type hello world on the first line.\nType ctrl + x to be prompted to save and close.\nRun cat helloworld.txt to see the contents.",
    "crumbs": [
      "Shell and Terminal",
      "Text Editors"
    ]
  },
  {
    "objectID": "terminal/grep-and-regex.html",
    "href": "terminal/grep-and-regex.html",
    "title": "Grep and Regular Expressions",
    "section": "",
    "text": "grep stands for Globally search for a Regular Expression and Print\n\n\n\nCreate some files to work with.\necho \"testing 1 2 3\" &gt; test1.txt\necho \"testing 4 5 6\" &gt; test2.txt\necho \"TESTING 7 8 9\" &gt; test3.txt\nmkdir \"test-folder\"\ncd \"test-folder\"\necho \"folder testing 1 2 3\" &gt; test4.text\necho \"folder testing 4 5 6\" &gt; test4.text\necho \"FOLDER TESTING 7 8 9\" &gt; test4.text\ncd ..\nThe format to search for strings in files is `grep [thing you’re searching for] [filename].\ngrep testing test1.txt  # searching for the word testing in text1.txt\n\n# * can be used as a wild card\ngrep testing test*.txt  # searching for the word testing in any file with the format test*.txt\ngrep testing *          # searching for testing in any file\n\n# applying some flags (more exist)\ngrep -l test *.txt          # -l only shows the file names, not the content\ngrep -i testing test*.txt   # -i ignores case\ngrep -ir testing *          # -r searches recursively",
    "crumbs": [
      "Shell and Terminal",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "terminal/grep-and-regex.html#grep",
    "href": "terminal/grep-and-regex.html#grep",
    "title": "Grep and Regular Expressions",
    "section": "",
    "text": "grep stands for Globally search for a Regular Expression and Print\n\n\n\nCreate some files to work with.\necho \"testing 1 2 3\" &gt; test1.txt\necho \"testing 4 5 6\" &gt; test2.txt\necho \"TESTING 7 8 9\" &gt; test3.txt\nmkdir \"test-folder\"\ncd \"test-folder\"\necho \"folder testing 1 2 3\" &gt; test4.text\necho \"folder testing 4 5 6\" &gt; test4.text\necho \"FOLDER TESTING 7 8 9\" &gt; test4.text\ncd ..\nThe format to search for strings in files is `grep [thing you’re searching for] [filename].\ngrep testing test1.txt  # searching for the word testing in text1.txt\n\n# * can be used as a wild card\ngrep testing test*.txt  # searching for the word testing in any file with the format test*.txt\ngrep testing *          # searching for testing in any file\n\n# applying some flags (more exist)\ngrep -l test *.txt          # -l only shows the file names, not the content\ngrep -i testing test*.txt   # -i ignores case\ngrep -ir testing *          # -r searches recursively",
    "crumbs": [
      "Shell and Terminal",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "terminal/grep-and-regex.html#regular-expressions",
    "href": "terminal/grep-and-regex.html#regular-expressions",
    "title": "Grep and Regular Expressions",
    "section": "Regular Expressions",
    "text": "Regular Expressions\nRegular expressions are used to express patterns within text. Using them in conjunction with grep can result in powerful searches.\nTo follow the following examples, run the commands below.\n# navigate to documents and download the following\nwget https://raw.githubusercontent.com/jcoriell/download/main/regex-sample.txt\nwget https://raw.githubusercontent.com/dwyl/english-words/master/words.txt\n\n# confirm the files are there\nls                      \n\n# peek inside the files\nmore regex-sample.txt   \nmore words.txt          \n\nSearching for a simple strings\nFor exact matching of characters, words, and phrases, you can use the characters.\n# -P flag stands for Perl, can use -E here instead\n# later notations will require -P\ngrep -P \"abc\" regex-sample.txt     \ngrep -P \"coriell\" regex-sample.txt \n\n\nMeta Characters\nSome characters require a slash (escape) in front of them to include them as part of the search because they are meta characters that have special meaning. More on these can be found in the subsections that follow.\nCharacter   Meaning\n.           - any character except new line\n[           - grouping\n{           - quantifying\n()          - grouping \n\\           - escape\n^           - starts with \n$           - ends with \n|           - or\n?           - a quantifier\n*           - another quantifier\n+           - another quantifier\n\nExamples\n# Search for a dot\ngrep -P \"\\.\" regex-sample.txt\n# search for an open parenthesis\ngrep -P \"\\(\" regex-sample.txt\n# search for any character and then the letter c\ngrep -P \".c\" regex-sample.txt\n\n\n\nCharacter Types\nYou can specify different types of characters such as digits or whitespace. These notations require the usage of the -P flag.\nCharacter   Meaning\n.           - any character except new line\n\\d          - digit (0-9)\n\\D          - not a digit (not 0-9)\n\\w          - a Word character (a-z, A-Z, 0-9, _)\n\\W          - not one of the word characters\n\\s          - whitespace (space, tab, newline)\n\\S          - note whitespace\n\nExamples\n# search for three consecutive digits\ngrep -P \"\\d\\d\\d\" regex-sample.txt\n# search for three digits, any, three digits, any, then 4 digits\ngrep -P \"\\d\\d\\d.\\d\\d\\d.\\d\\d\\d\\d\" regex-sample.txt\n# search for consecutive word characters\ngrep -P \"\\w\\w\\w\\w\" regex-sample.txt\n# search for whitespace\ngrep -P \"\\s\" regex-sample.txt\n\n\n\nBoundaries\nCharacter   Meaning\n\\b          - word boundary\n\\B          - not a word boundary\n^           - beginning of a line\n$           - end of a line\n\nExamples\n# find 3 word characters between two boundaries\ngrep -P \"\\b\\w\\w\\w\\b\" regex-sample.txt\n# find h at the beginning of a line\ngrep -P \"^h\" regex-sample.txt\n# find h at the beginning of a word\ngrep -P \"\\bh\" regex-sample.txt\n# find 4 word characters at the end of a line\ngrep -P \"\\w\\w\\w\\w$\" regex-sample.txt\n# find lines that start with a and count them\n# wc is for word count\ngrep -P \"^a\" words.txt | wc -l \n# find lines that start with a, have three characters, then end with b.\n# store then in a file called result.txt\ngrep -P \"^a...b$\" words.txt &gt; result.txt\nmore result.txt # view it\n# starts with a, 5th letter is b. \n# shows individual word count\ngrep -P \"^a...b\" words.txt | wc -w \n\n\n\nGroupings\nGroupings allow us to combine different types of characters or patterns.\nCharacter   Meaning\n[]          matches characters in brackets\n[^ ]        matches characters not in brackets\n|           or\n()          group\n\nExamples\n# find any character from a to z\ngrep -P \"[a-z]\" regex-sample.txt\n# find any character from a to z or A-Z\ngrep -P \"[a-zA-Z]\" regex-sample.txt\n\n```sh\n# find occurrances of a dot followed by a character a-z or A-Z\ngrep -P \"\\.[a-zA-Z]\" regex-sample.txt \n# find a dot folled by three characters in a-z or A-Z\ngrep -P \"\\.[a-zA-Z][a-zA-Z][a-zA-Z]\" regex-sample.txt\n# find a dot followed by edu or com\ngrep -P \"\\.(edu|com)\" regex-sample.txt\n\n\n\nQuanitfiers\nThe quantifiers help us say how many of a type of character or characters we might want in parts of the expression. The quantifiers come after the thing it is quantifying.\nCharacter   Meaning\n*           - 0 or more\n+           - 1 or more\n?           - 0 or one\n{3}         - exact number (exactly 3 here)\n{1,5}       - range {min, max} (minimum of 1, max of 5 in example)\n\nExamples\n# find occurrance of a dot followed by 3 characters in a-z or A-Z\ngrep -P -o \"\\.[a-zA-Z]{3}\" regex-sample.txt # -o shows only non empty parts\n# find occurrances of a dot followed by at least 2 characters in a-z or A-Z\ngrep -P \"\\.[a-zA-Z]{2,}\" regex-sample.txt\n# find \n#   - one or more characters in a-z or A-Z or 0-9\n#   - followed by an @ symbol\n#   - followed by one or more characters in a-z or A-Z\n#   - followed by a dot \n#   - followed by at least two characters in a-z or A-Z\ngrep -P \"[a-zA-Z0-9]+@[a-zA-Z]+\\.[a-zA-Z]{2,}\" regex-sample.txt",
    "crumbs": [
      "Shell and Terminal",
      "Grep and Regular Expressions"
    ]
  },
  {
    "objectID": "terminal/redirection.html",
    "href": "terminal/redirection.html",
    "title": "Redirection",
    "section": "",
    "text": "abbreviated as stdout\nrepresented with &gt;\nused to redirect the result of a command somewhere else\nthe contents of the file are overwritten when using &gt;\ncan use &gt;&gt; to append to the contents of a file\n\n\n\necho \"hello world\" &gt; helloworld.txt",
    "crumbs": [
      "Shell and Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "terminal/redirection.html#standard-output",
    "href": "terminal/redirection.html#standard-output",
    "title": "Redirection",
    "section": "",
    "text": "abbreviated as stdout\nrepresented with &gt;\nused to redirect the result of a command somewhere else\nthe contents of the file are overwritten when using &gt;\ncan use &gt;&gt; to append to the contents of a file\n\n\n\necho \"hello world\" &gt; helloworld.txt",
    "crumbs": [
      "Shell and Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "terminal/redirection.html#standard-input",
    "href": "terminal/redirection.html#standard-input",
    "title": "Redirection",
    "section": "Standard Input",
    "text": "Standard Input\n\nabbreviated as stdin\nrepresented with &lt;\ncan be used to provide input into a program",
    "crumbs": [
      "Shell and Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "terminal/redirection.html#standard-error",
    "href": "terminal/redirection.html#standard-error",
    "title": "Redirection",
    "section": "Standard Error",
    "text": "Standard Error\n\nabbreviated as stderr\nrepresented with 2&gt;\ncan append with 2&gt;&gt;\nif an error is produced, you can redirect it elsewhere.\n\n\nExample\nnotarealcommand 2&gt; error-file.txt",
    "crumbs": [
      "Shell and Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "terminal/redirection.html#pipe",
    "href": "terminal/redirection.html#pipe",
    "title": "Redirection",
    "section": "Pipe",
    "text": "Pipe\n\nrepresented with |\ncreates a “pipe” or “pipline” between two programs\ntakes the output of the one command and uses it as input it into another command\n\n\nExample\nList the contents of /usr/bin, but use more to view them in a paginated way.\nls -al /usr/bin | more",
    "crumbs": [
      "Shell and Terminal",
      "Redirection"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "linux/additional-steps.html",
    "href": "linux/additional-steps.html",
    "title": "Additional Steps",
    "section": "",
    "text": "Open the terminal by clicking on the monitor icon at the bottom-left of the desktop. Or you can click on the “start button” (the LM logo at the bottom-left of the desktop) then, click on System and scroll to Terminal Emulator.\nUpdate the Linux Ubuntu system by running the following three commands.\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get dist-upgrade\nInstall essential build tools (for programming)\nsudo apt-get install build-essential\nInstall Vim (the ubiquitous text editor)\nsudo apt-get install vim\nCleanup the system\nsudo apt-get autoremove\nsudo apt-get clean\nsudo apt-get autoclean\nSet the autorun script when opening up a terminal.\n\nWe’ll first copy the default provided by the OS.\nsudo cp /etc/bash.bashrc ~/.bashrc\nThen, we ensure that we own it (more on this later).\nsudo chown $USER:$USER ~/.bashrc\nFinally, we’ll load it into the current terminal\nsource ~/.bashrc\n\nAdd the following useful aliases to the the ./bashrc file.\n\nOpen ~/.bashrc in one of the following text editors:\n\nVim - opens in the terminal, there is a learning curve with this one\nvim ~/.bashrc\nNano - opens in the terminal, not a strong learning curve. The ^ symbol means ctrl. So ^x means to type ctrl + x\nnano ~/.bashrc\ngedit - a GUI based text editor\ngedit ~/.bashrc\n\nThe following helpful aliases can be added to the end of the file:\nalias c='clear'\nalias h='history'\nalias j='jobs'\nalias ls='ls -CF --group-directories-first --color=auto $*'\nalias lss='ls -Alh $*'\nalias m='more'\nalias p='ps -ef'\nalias ~='cd ~'\n\nFinally, load them into the current terminal via: source ~/.bashrc"
  },
  {
    "objectID": "linux/vm-install-mac.html",
    "href": "linux/vm-install-mac.html",
    "title": "VM Install On Mac",
    "section": "",
    "text": "Introduction\nFollow the steps below to set up an Ubuntu LTS Machine on your m series chip Mac (m1, m2, etc.)\n\n\n\n\n\n\nNot sure on chip type?\n\n\n\nClick the  icon on the menubar and select About this mac.... It should be indicated under the “Chip” category if it is an m series chip.\n\n\n\n\n\n\n\n\nIf you don’t have an m series chip…\n\n\n\nIf your mac is not an m series mac, then follow the windows install.\n\n\n\n\nPrequisites\nm series mac with macOS\n\n\nSteps\n\nIf you do not already have Homebrew, install it by opening a terminal and running the following command. Otherwise skip this step.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nInstall multipass with the following command.\nbrew install multipass\nRun the one of the following multipass command to create an instance with the name csc222 (or whatever you want to name it).\n# for a minimal machine with default specs (1 cpu, 5G disk space, 1G memory, )\nmultipass launch 22.04 --name csc222\n# for a more powerful machine that can have space for a gui\nmultipass launch 22.04 --name csc222 --cpus 2 --memory 4G --disk 50G\nOnce the machine is finished setting up. You can access it with the following command. If you named it something other than csc222, use that in place of csc222.\nmultipass shell csc222\nOnce access to the machine is granted, create a user in the machine for yourself. The example below adds a user named josh.\nsudo adduser josh\nTo add yourself to the group of users that can use the command sudo, run the following, but use your username, not josh.\nsudo usermod -aG sudo josh\n\n\n\n(Optional) Add a GUI to your machine\n\nIn the shell on your VM, run the following commands. Note that this may take a few minutes.\nsudo apt update\nsudo apt install ubuntu-desktop xrdp\nWhile the second command is processing, download Microsoft Remote Desktop on your mac by going to the app store.\nMicrosoft Remote Desktop\nOpen another Terminal on your mac and and type multipass list to get the IP address of the machine. It should be something like 10.49.93.209 or 192.168.64.6 (not that exactly, but similar).\nOpen Microsoft RDP and add the connection."
  },
  {
    "objectID": "linux/linux-filesystem.html",
    "href": "linux/linux-filesystem.html",
    "title": "Linux Filesystem",
    "section": "",
    "text": "The top level of the filesystem on many linux machines contains most of the following directories. You’ll find a brief description of each below.",
    "crumbs": [
      "Linux Install",
      "Linux Filesystem"
    ]
  },
  {
    "objectID": "linux/linux-filesystem.html#introduction",
    "href": "linux/linux-filesystem.html#introduction",
    "title": "Linux Filesystem",
    "section": "",
    "text": "The top level of the filesystem on many linux machines contains most of the following directories. You’ll find a brief description of each below.",
    "crumbs": [
      "Linux Install",
      "Linux Filesystem"
    ]
  },
  {
    "objectID": "linux/linux-filesystem.html#directories",
    "href": "linux/linux-filesystem.html#directories",
    "title": "Linux Filesystem",
    "section": "Directories",
    "text": "Directories\n\n/bin\n\ncommon binaries (i.e. applications you can run)\nyou’ll find many of the commands you can use here, like ls\nNote: ls -l /bin shows that it is a link to /usr/bin\n\n\n\n/sbin\n\nsystem binaries (applications for system admin, like adduser)\n\n\n\n/home\n\nthe personal files for each user\nRun ls /home to see a directory for yourself.\n\n\n\n/lib\n\nwhere shared libraries live.\ncode that applications can use to interact with the kernel\nnote, you will see lib files elsewhere, but this one is for the kernel specifically.\n\n\n\n/etc\n\nShort for et cetera (we say et-see)\nMainly contains configuration files\n\n\n\n/dev\n\nshort for device\ncontains files related to devices attached to the machine (like a webcam)\n\n\n\n/boot\n\ncontains the files necessary to boot the system.\n\n\n\n/media\n\nwhere external storage is auto mounted when you plug it in\n\n\n\n/mnt\n\nwhere external storage is manually mounted\n\n\n\n/opt\n\nfrequently where custom built software lands\n\n\n\n/proc\n\ncontains info about your computer\n\n\n\n/root\n\nhome directory of the superuser\nits not under /home for a reason (those are not the superuser)\n\n\n\n/run\n\nstores temporary data for system processes\n\n\n\n/usr\n\nwhere user’s home directories used to be kept (now under /home)\ncontains a collection of stuff that needs to be shared by applications\n\n\n\n/tmp\n\ncontains temporary files\n\n\n\n/var\n\nshort for variable\nusually contains logs",
    "crumbs": [
      "Linux Install",
      "Linux Filesystem"
    ]
  },
  {
    "objectID": "c-programming/05-More-on-Data.html",
    "href": "c-programming/05-More-on-Data.html",
    "title": "More on Data",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // a pointer is a reference to a memory location\n    // use * to state that something is a pointer\n    int faveNum = 10;               // normal variable\n    int *faveNumPtr  = &faveNum;    // a pointer for an integer (faveNum is an integer)\n                                    // the & means \"address at\" fave num.\n\n    \n    printf(\"My fave num is %d and it is stored at %p\\n\", faveNum, faveNumPtr);\n\n    // we can access the value associated with a pointer through the indirection operator *\n    printf(\"My fave num is %d\", *faveNumPtr);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "More on Data"
    ]
  },
  {
    "objectID": "c-programming/05-More-on-Data.html#pointers",
    "href": "c-programming/05-More-on-Data.html#pointers",
    "title": "More on Data",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n\nint main(){\n    // a pointer is a reference to a memory location\n    // use * to state that something is a pointer\n    int faveNum = 10;               // normal variable\n    int *faveNumPtr  = &faveNum;    // a pointer for an integer (faveNum is an integer)\n                                    // the & means \"address at\" fave num.\n\n    \n    printf(\"My fave num is %d and it is stored at %p\\n\", faveNum, faveNumPtr);\n\n    // we can access the value associated with a pointer through the indirection operator *\n    printf(\"My fave num is %d\", *faveNumPtr);\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "More on Data"
    ]
  },
  {
    "objectID": "c-programming/05-More-on-Data.html#arrays",
    "href": "c-programming/05-More-on-Data.html#arrays",
    "title": "More on Data",
    "section": "Arrays",
    "text": "Arrays\n#include &lt;stdio.h&gt;\n\nint main(){\n\n    // arrays are collections of similar values in contiguous memory locations\n    int someNums[] = {1, 2, 3, 4, 5, 6}; // size of 6\n    int moreNums[10]; // size of 10\n\n\n    // note that the identifier can be used as a pointer to the memory location of the first item\n    printf(\"The mem addr of the array is %p\\n\", someNums);          // note: not using &, but you can.\n    printf(\"The mem addr of the first item is %p\\n\", &someNums[0]); // note: need to use & to get address at\n\n    // when in the space the array was defined, you can use sizeof to get how large it is\n    printf(\"The num of bytes in the array is %lu\\n\", sizeof(someNums));\n    printf(\"That makes sense because 4 bytes (per int) * 6 items = %lu\\n\", sizeof(someNums));\n    \n    // We can use sizeof to get the length of the array\n    printf(\"The length of the array is %lu\\n\", sizeof(someNums) / sizeof(int));\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "More on Data"
    ]
  },
  {
    "objectID": "c-programming/05-More-on-Data.html#looping-with-arrays",
    "href": "c-programming/05-More-on-Data.html#looping-with-arrays",
    "title": "More on Data",
    "section": "Looping with Arrays",
    "text": "Looping with Arrays\n#include &lt;stdio.h&gt;\n\nint main(){\n\n    // arrays are collections of similar values in contiguous memory locations\n\n    int someNums[] = {1, 2, 3, 4, 5, 6}; // size of 6\n    int moreNums[10]; // size of 10\n\n    // using a while loop to assign values to myOtherFaves\n    int counter = 0;\n    while (counter &lt; 10){\n        moreNums[counter] = counter;\n        printf(\"Added %d as a value to myOtherFaves\\n\", counter);\n        counter++;\n    }\n\n    // using a for loop to access each value\n    // we get the upper limit of the incrementer\n    // by dividing the number of bytes of the array by the size of the data type\n    // here, the identifier someNums is not treated as a pointer\n    size_t n = sizeof(someNums) / sizeof(int);\n    for (int i = 0; i &lt; n; i++){\n        printf(\"The %dth item in the array is %d\\n\", i, someNums[i]);\n    }\n\n    // note there is also a do while loop\n\n    printf(\"\\n\");\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "More on Data"
    ]
  },
  {
    "objectID": "c-programming/05-More-on-Data.html#functions-with-arrays",
    "href": "c-programming/05-More-on-Data.html#functions-with-arrays",
    "title": "More on Data",
    "section": "Functions with Arrays",
    "text": "Functions with Arrays\n#include &lt;stdio.h&gt;\n\n\nvoid addStuff(int myArray[], int myArrayLength){ // a signature that takes in an array\n    // the array decays to a pointer when passed through\n    // so sizeof() returns the size of the pointer now\n    // we can pass in the size of the array in addition to the array (if we need the size)\n    // note: you can still use the index to access values inside the functions\n\n    for(int i=0; i &lt; myArrayLength; i++){\n        myArray[i] = i * 2;\n    }\n}\n\nvoid viewStuff(int *myArray, int myArrayLength){// a signature that takes in an array\n    // common to use the pointer notation * here since it will decay to a pointer\n    for (int i=0; i &lt; myArrayLength; i++){\n        printf(\"The item at index %d is %d\\n\", i, myArray[i]);\n    }\n}\n\nint main(){\n\n    int ages[5];\n\n    // get the length here, since this is where we defined it.\n    size_t length = sizeof(ages) / sizeof(int); \n\n    // pass the length into the function\n    addStuff(ages, length);\n    viewStuff(ages, length);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "More on Data"
    ]
  },
  {
    "objectID": "c-programming/05-More-on-Data.html#strings",
    "href": "c-programming/05-More-on-Data.html#strings",
    "title": "More on Data",
    "section": "Strings",
    "text": "Strings\n\nBasics\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt; // helpful string functions\n\nint main(){\n\n    // string are character arrays\n    // the arrays terminate with  \\0 &lt;- the null character\n    char aMessage[] = \"Hi how are you\";\n    printf(\"%s\\n\", aMessage);\n\n    // Getting the size of a string\n    // this counts the null character\n    printf(\"size: %lu\\n\", sizeof(aMessage) / sizeof(char));\n    \n    // helpful function from string.h\n    printf(\"size again %lu\\n\", strlen(aMessage));\n\n    // comparing two strings\n    char hello[] = \"hello\";\n    char you1[] = \"you\";\n    char you2[] = \"you\";\n\n    if (strcmp(hello, you1) == 0){\n        printf(\"They're equal - 1\");\n    } else {\n        printf(\"They not equal - 1\");\n    }\n\n    // strcmp returns -1, 0, or 1:\n    // 0 when they're equal\n    // -1 if the first string is \"less than\" string 2 (ascii values)\n    // 1 if the first string is \"greater than\" string 2 (ascii)\n    if (strcmp(you1, you2) == 0){\n        printf(\"They're equal - 2\");\n    } else{\n        printf(\"They're not equal - 2\");\n    }\n\n    // Reassigning string values\n    strcpy(hello, \"you\");\n\n    return 0;\n}\n\n\nscanf example\n#include &lt;stdio.h&gt;\n\nint main(){\n    char name[25];\n    int age;\n    \n    // prompt with a print statement\n    printf(\"What is your name? \");\n    scanf(\"%s\", name);\n\n    printf(\"What is your age? \");\n    scanf(\"%d\", &age); // & is for 'address at'\n\n    printf(\"Hi %s, your age is %d\\n\", name, age);\n\n    // taking more than one input\n    printf(\"What is your name and age? \");\n    scanf(\"%s %d\", name, &age);\n\n    printf(\"Hi %s, your age is %d\\n\", name, age);\n    printf(\"\\n\");\n    return 0;\n}\n\n\nfgets example\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(){\n\n    char afullline[100];\n\n    // f get s stands file get string\n    // typically used for reading lines of files\n    // but we can use it with stdin to prompt\n    printf(\"Type a sentence: \");\n    fgets(afullline, 100, stdin);\n\n    // fgets automatically adds a new line character to the end\n    // to remove it \n    afullline[strlen(afullline) - 1] = '\\0';\n    printf(\"You said: %s\", afullline);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "More on Data"
    ]
  },
  {
    "objectID": "c-programming/07-Memory-Allocation.html",
    "href": "c-programming/07-Memory-Allocation.html",
    "title": "Memory Allocation",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // required for malloc()\n\nint main(){\n\n    int *value;\n\n    // malloc lets us dynamically allocate memory on the heap\n    value = malloc(4); // allows for 4 bytes to be stored at `value`\n    value = malloc(sizeof(int) * 10);\n\n    // set each value in the array\n    for (int i=0; i &lt; 10;  i++){\n        value[i] = i * 2;\n    }\n\n    // print each value\n    for (int i=0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n    printf(\"\\n\");\n\n    // the function free() frees up the space taken by a dynamically \n    // allocated reference\n    free(value);\n\n    // reallocate value with a new size\n    value = malloc(sizeof(int) * 20);\n\n    // note that malloc does not zero out the data that was there\n    // note the operating system may cause it to zero out as a security feature\n\n    for (int i = 0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n\n    printf(\"\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "c-programming/07-Memory-Allocation.html#malloc",
    "href": "c-programming/07-Memory-Allocation.html#malloc",
    "title": "Memory Allocation",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // required for malloc()\n\nint main(){\n\n    int *value;\n\n    // malloc lets us dynamically allocate memory on the heap\n    value = malloc(4); // allows for 4 bytes to be stored at `value`\n    value = malloc(sizeof(int) * 10);\n\n    // set each value in the array\n    for (int i=0; i &lt; 10;  i++){\n        value[i] = i * 2;\n    }\n\n    // print each value\n    for (int i=0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n    printf(\"\\n\");\n\n    // the function free() frees up the space taken by a dynamically \n    // allocated reference\n    free(value);\n\n    // reallocate value with a new size\n    value = malloc(sizeof(int) * 20);\n\n    // note that malloc does not zero out the data that was there\n    // note the operating system may cause it to zero out as a security feature\n\n    for (int i = 0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n\n    printf(\"\\n\");\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "c-programming/07-Memory-Allocation.html#calloc",
    "href": "c-programming/07-Memory-Allocation.html#calloc",
    "title": "Memory Allocation",
    "section": "Calloc",
    "text": "Calloc\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // needed for calloc\n\nint main(){\n    // calloc gaurantees that the allocated memory will be zeroed out\n    // two args: number of things, size of each thing\n    int *value = calloc(10, sizeof(int));\n\n    for (int i=0; i &lt; 10; i++){\n        printf(\"%d \", value[i]);\n    }\n\n    free(value);\n    printf(\"\\n\");\n    \n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "c-programming/07-Memory-Allocation.html#realloc",
    "href": "c-programming/07-Memory-Allocation.html#realloc",
    "title": "Memory Allocation",
    "section": "Realloc",
    "text": "Realloc\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // needed for realloc\n\n\nvoid append(int *array, int *arrayLength, int newValue);\n\nint main(){\n    int length = 1;\n    int *array = malloc(sizeof(int) * length);\n\n    array[0] = 42;\n\n    for (int i=0; i &lt; length; i++){\n        printf(\"%d \\n\", array[i]);\n    }\n\n    append(array, &length, 4);\n    append(array, &length, 10);\n    append(array, &length, 13);\n\n    for (int i=0; i &lt; length; i++){\n        printf(\"%d \", array[i]);\n    }\n\n    printf(\"\\n\");\n    return 0;\n\n}\n\nvoid append(int *array, int *arrayLength, int newValue){\n\n    // set the new value of arrayLength\n    // remember: * is dereferencing the pointer (its gettin the value)\n    *arrayLength = *arrayLength + 1;\n\n    // allocated space for one more item\n    int *array2 = realloc(array, *arrayLength);\n\n    // reset the identifier so we can use it again\n    array = array2;\n\n    array[*arrayLength-1] = newValue;\n}",
    "crumbs": [
      "C Programming",
      "Memory Allocation"
    ]
  },
  {
    "objectID": "c-programming/06-Sample-Applications.html",
    "href": "c-programming/06-Sample-Applications.html",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt; // includes tolower()\n\n// function prototyping\nint countVowels(char*);\n\nint main(){\n    char sentence[100];\n    int numVowels;\n\n    printf(\"Give me a sentence to count the vowels: \");\n    fgets(sentence, 100, stdin);\n\n    numVowels = countVowels(sentence);\n    printf(\"There were %d vowels.\", numVowels);\n\n    printf(\"\\n\");\n    return 0;\n}\n\nint countVowels(char *sentence){\n    int count = 0;\n\n    for (int i=0; i &lt; strlen(sentence); i++){\n        switch(tolower(sentence[i])){\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n        }\n    }\n\n    return count;\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/06-Sample-Applications.html#vowel-counter",
    "href": "c-programming/06-Sample-Applications.html#vowel-counter",
    "title": "Sample Applications",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt; // includes tolower()\n\n// function prototyping\nint countVowels(char*);\n\nint main(){\n    char sentence[100];\n    int numVowels;\n\n    printf(\"Give me a sentence to count the vowels: \");\n    fgets(sentence, 100, stdin);\n\n    numVowels = countVowels(sentence);\n    printf(\"There were %d vowels.\", numVowels);\n\n    printf(\"\\n\");\n    return 0;\n}\n\nint countVowels(char *sentence){\n    int count = 0;\n\n    for (int i=0; i &lt; strlen(sentence); i++){\n        switch(tolower(sentence[i])){\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n        }\n    }\n\n    return count;\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/06-Sample-Applications.html#grade-calculator",
    "href": "c-programming/06-Sample-Applications.html#grade-calculator",
    "title": "Sample Applications",
    "section": "Grade Calculator",
    "text": "Grade Calculator\n#include &lt;stdio.h&gt;\n\nchar calcuateGrade(float);\n\nint main(){\n\n    float score;\n    printf(\"What was the score you received? \");\n    scanf(\"%f\", &score);\n\n    char grade = calculateGrade(score);\n    printf(\"It looks like you got a(n) %c\", grade);\n    \n    printf(\"\\n\");\n    return 0;\n}\n\nchar calculateGrade(float value){\n    if (value &gt;= 90){\n        return 'A';\n    } else if (value &gt;= 80){\n        return 'B';\n    } else if (value &gt;=70){\n        return 'C';\n    } else if (value &gt;= 60){\n        return 'D';\n    } else if (value &gt;= 50){\n        return 'E';\n    } else {\n        return 'F';\n    }\n\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/06-Sample-Applications.html#bubble-sort",
    "href": "c-programming/06-Sample-Applications.html#bubble-sort",
    "title": "Sample Applications",
    "section": "Bubble Sort",
    "text": "Bubble Sort\n#include &lt;stdio.h&gt;\n\n\nvoid bubbleSort(int*, size_t);\n\nint main(){\n    int myList[] = {10, 9, 8, 7, 6};\n    size_t listSize = sizeof(myList) / sizeof(int);\n    \n    bubbleSort(myList, listSize);\n\n    for (int i = 0; i &lt; listSize; i++){\n        printf(\"%d \", myList[i]);\n    }\n\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid bubbleSort(int *aList, size_t listSize){\n    for (int i=0; i &lt; listSize - 1; i++){\n        for (int j = 0; j &lt; listSize - 1 - i;  j++){\n            if (aList[j+1] &lt; aList[j]){\n                // swap\n                int temp = aList[j];\n                aList[j] = aList[j+1];\n                aList[j+1] = temp;\n            }\n        }\n    }\n}",
    "crumbs": [
      "C Programming",
      "Sample Applications"
    ]
  },
  {
    "objectID": "c-programming/02-DataTypes.html",
    "href": "c-programming/02-DataTypes.html",
    "title": "Data Types and Format Specifiers",
    "section": "",
    "text": "An example of the int data type and the corresponding format specifiers.\n#include &lt;stdio.h&gt;\n\nint main(){\n    /////// int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 4 bytes on most 32 and 64 bit machines\n    //  - 4 bytes of 0s: 00000000 00000000 00000000 00000000\n\n    printf(\"\\nints:\\n\");\n    int w;          // declaration\n    w = 10;         // initialization\n    int age = 21;   // both declaration and initilization\n\n    // print the integer associated with x\n    // %d is the format specifier for integers),\n    printf(\"The value of w is %d\\n\", w);  \n\n    // check the size on your machine\n    printf(\"The size of an int is %lu bytes\\n\", sizeof(w));\n\n    /////// short int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 2 bytes on most 32 and 64 bit machines\n    printf(\"\\nshort int:\\n\");\n    short x = 20;\n    printf(\"The value of x is `%d\\n\", x);\n    printf(\"The size of a short int is %lu bytes\\n\", sizeof(x));\n\n\n    /////// long int\n    //  - should be at least 32 bits (4 bytes)\n    //  - Typically 8 bytes on most 64 bit machines, but 4 bytes on 32 bit machines\n    printf(\"\\nlong int:\\n\");\n    long y = 20;\n    printf(\"The value of y is `%ld\\n\", y);\n    printf(\"The size of a long is %lu bytes\\n\", sizeof(y));\n\n    /////// long long int\n    //  - should be at least 64 bits (8 bytes)\n    //  - Typically 8 bytes\n    printf(\"\\nlong int:\\n\");\n    long long int z = 20;\n    printf(\"The value of z is `%lld\\n\", z);\n    printf(\"The size of a long long is %lu bytes\\n\", sizeof(z));\n\n    // unsigned versions of the above also\n    //  - Range includes only positive values\n    printf(\"\\nunsigned int:\\n\");\n    unsigned int u = 20;\n    printf(\"The value of u is %u\\n\", u);\n    printf(\"The size of an unsigned int is %lu bytes\\n\", sizeof(u));\n}",
    "crumbs": [
      "C Programming",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "c-programming/02-DataTypes.html#ints",
    "href": "c-programming/02-DataTypes.html#ints",
    "title": "Data Types and Format Specifiers",
    "section": "",
    "text": "An example of the int data type and the corresponding format specifiers.\n#include &lt;stdio.h&gt;\n\nint main(){\n    /////// int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 4 bytes on most 32 and 64 bit machines\n    //  - 4 bytes of 0s: 00000000 00000000 00000000 00000000\n\n    printf(\"\\nints:\\n\");\n    int w;          // declaration\n    w = 10;         // initialization\n    int age = 21;   // both declaration and initilization\n\n    // print the integer associated with x\n    // %d is the format specifier for integers),\n    printf(\"The value of w is %d\\n\", w);  \n\n    // check the size on your machine\n    printf(\"The size of an int is %lu bytes\\n\", sizeof(w));\n\n    /////// short int\n    //  - should be at least 16 bits (2 bytes)\n    //  - Typically 2 bytes on most 32 and 64 bit machines\n    printf(\"\\nshort int:\\n\");\n    short x = 20;\n    printf(\"The value of x is `%d\\n\", x);\n    printf(\"The size of a short int is %lu bytes\\n\", sizeof(x));\n\n\n    /////// long int\n    //  - should be at least 32 bits (4 bytes)\n    //  - Typically 8 bytes on most 64 bit machines, but 4 bytes on 32 bit machines\n    printf(\"\\nlong int:\\n\");\n    long y = 20;\n    printf(\"The value of y is `%ld\\n\", y);\n    printf(\"The size of a long is %lu bytes\\n\", sizeof(y));\n\n    /////// long long int\n    //  - should be at least 64 bits (8 bytes)\n    //  - Typically 8 bytes\n    printf(\"\\nlong int:\\n\");\n    long long int z = 20;\n    printf(\"The value of z is `%lld\\n\", z);\n    printf(\"The size of a long long is %lu bytes\\n\", sizeof(z));\n\n    // unsigned versions of the above also\n    //  - Range includes only positive values\n    printf(\"\\nunsigned int:\\n\");\n    unsigned int u = 20;\n    printf(\"The value of u is %u\\n\", u);\n    printf(\"The size of an unsigned int is %lu bytes\\n\", sizeof(u));\n}",
    "crumbs": [
      "C Programming",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "c-programming/02-DataTypes.html#chars",
    "href": "c-programming/02-DataTypes.html#chars",
    "title": "Data Types and Format Specifiers",
    "section": "Chars",
    "text": "Chars\nAn example of the int data type and the corresponding format specifiers.\n#include &lt;stdio.h&gt;\n\nint main(){\n    // char \n    //      - single character\n    //      - 1 byte of memory (8 bits)\n    //      - can also store integers -128 to +127; \n    //      - note that integers correspond to ASCII values\n    //      - unsigned char can store from 0 to 255 since they're all positive;\n\n    char letter = 'a';\n    printf(\"\\nletter: %c\\n\", letter);\n    printf(\"size: %lu byte\\n\", sizeof(letter));\n\n    char another = 100;\n    printf(\"\\nanother - as char: %c\\n\", another);\n    printf(\"another - as int: %d\\n\", another); \n    printf(\"size: %lu byte\\n\", sizeof(another));\n\n\n    unsigned char anotherOne = 250; // outside bounds of ascii\n    printf(\"\\nanotherOne - as char: %c\\n\", anotherOne);\n    printf(\"anotherOne - as int: %d\\n\", anotherOne);\n    printf(\"size: %lu byte\\n\", sizeof(anotherOne));\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "c-programming/02-DataTypes.html#floats-and-doubles",
    "href": "c-programming/02-DataTypes.html#floats-and-doubles",
    "title": "Data Types and Format Specifiers",
    "section": "Floats and Doubles",
    "text": "Floats and Doubles\nAn example of floats and doubles.\n#include &lt;stdio.h&gt;\n\nint main(){\n\n    /* float\n        -  represented using a 32-bit IEEE 754 single precision floating point number\n            -  8 bits for the exponent\n            -  24 for the signicand\n                - 1 bit for sign\n                - 23 for mantissa\n        - note that you cannot trust precion after a certain number of decimal places.\n        - the following code showcases that. \n    */\n    \n    float x = 12.1234567890123456789012;\n    printf(\"x: %.22f\\n\", x);\n    long int numBits = sizeof(x) * 8;\n    printf(\"size of x: %lu bytes\\n\", sizeof(x));\n    printf(\"size of x: %lu bits \\n\", numBits);\n\n\n    /* double\n        -  represented using a 64-bit IEEE 754 double precision floating point number\n            -  11 bits for the exponent\n            -  53 bits for the significand\n                - 1 bit for sign\n                - 52 for mantissa\n\n        - note that you cannot trust precion after a certain number of decimal places.\n        - the following code showcases that.        \n    */\n    double y = 12.1234567890123456789012;\n    printf(\"\\ny: %.22lf\\n\", y);\n    numBits = sizeof(y) * 8;\n    printf(\"size of y: %lu bytes\\n\", sizeof(y));\n    printf(\"size of y: %lu bits \\n\", numBits);\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Data Types and Format Specifiers"
    ]
  },
  {
    "objectID": "c-programming/13-Exec-Functions.html",
    "href": "c-programming/13-Exec-Functions.html",
    "title": "Exec Functions",
    "section": "",
    "text": "1. execl\n    format: execl(char *path, char *arg0, char *arg1, ..., NULL)\n        - loads and runs an executable with args\n        - path - the path to the executable\n        - arg0 is the name of the executable\n        - arg1 is the first space separated argument \n        - ...\n        - NULL follows all the args\n        - returns -1 if there is an error\n    \n2. execlp\n    format: execlp(char *file, char *arg0, char *arg1, ..., NULL)\n        - similar to execl\n        - main difference is the file is sought for in the PATH environment variable\n\n3. execle\n    format: execle(char *path, char *arg0, char *arg1, ..., NULL, char *envp[])\n        - environment variables are in the format \"NAME=VALUE\"\n        - Ex: \"HOME=/home/usr\"\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execl(\"/bin/ls\", \"ls\", \"-al\", \"-h\", NULL);\n}\n\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execlp(\"ls\", \"ls\", \"-al\", \"-h\", NULL);\n}",
    "crumbs": [
      "C Programming",
      "Exec Functions"
    ]
  },
  {
    "objectID": "c-programming/13-Exec-Functions.html#about-execl",
    "href": "c-programming/13-Exec-Functions.html#about-execl",
    "title": "Exec Functions",
    "section": "",
    "text": "1. execl\n    format: execl(char *path, char *arg0, char *arg1, ..., NULL)\n        - loads and runs an executable with args\n        - path - the path to the executable\n        - arg0 is the name of the executable\n        - arg1 is the first space separated argument \n        - ...\n        - NULL follows all the args\n        - returns -1 if there is an error\n    \n2. execlp\n    format: execlp(char *file, char *arg0, char *arg1, ..., NULL)\n        - similar to execl\n        - main difference is the file is sought for in the PATH environment variable\n\n3. execle\n    format: execle(char *path, char *arg0, char *arg1, ..., NULL, char *envp[])\n        - environment variables are in the format \"NAME=VALUE\"\n        - Ex: \"HOME=/home/usr\"\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execl(\"/bin/ls\", \"ls\", \"-al\", \"-h\", NULL);\n}\n\n\n\n#include &lt;unistd.h&gt;\n\nint main(){\n    // example of execl\n    execlp(\"ls\", \"ls\", \"-al\", \"-h\", NULL);\n}",
    "crumbs": [
      "C Programming",
      "Exec Functions"
    ]
  },
  {
    "objectID": "c-programming/13-Exec-Functions.html#about-execv",
    "href": "c-programming/13-Exec-Functions.html#about-execv",
    "title": "Exec Functions",
    "section": "About Execv",
    "text": "About Execv\nThe v is for vector (not velociraptor)\n\n1. execv\n    format:  execv(char *path, char *args[])\n        - the first element of args is the name of the executable\n        - the last element of args is NULL\n\n2. execvp\n    format: execvp(char *filename, char *args[])\n        - looks at the PATH environment variable for the \n            executable \n\nExecv Example\n#include &lt;unistd.h&gt;\n\nint main(){\n    char *args[] = {\n        \"ls\",\n        \"-a\",\n        \"-l\",\n        \"-h\",\n        NULL\n    };\n    execv(\"/bin/ls\", args);\n    \n}\n\n\nExecvp Example\n#include &lt;unistd.h&gt;\n\nint main(){\n    char *args[] = {\n        \"ls\",\n        \"-a\",\n        \"-l\",\n        \"-h\",\n        NULL\n    };\n    execvp(\"ls\", args);\n    \n}",
    "crumbs": [
      "C Programming",
      "Exec Functions"
    ]
  },
  {
    "objectID": "c-programming/12-Piping.html",
    "href": "c-programming/12-Piping.html",
    "title": "Piping",
    "section": "",
    "text": "#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(){\n\n    // create the array for file descriptors \n    // for the two ends of the pipe\n    // fd[0] is the read end of the pipe\n    // fd[1] is the write end of the pipe\n    // a file descriptor is an integer that references some bits\n    int fd[2];\n\n    // pipe takes in the file descriptor array\n    pipe(fd); // returns 0 on success, -1 on failure\n\n    pid_t pid = fork();\n    if (pid == 0){\n        //// child process\n\n        // close the read end (since we are writing here)\n        close(fd[0]);\n        int x;\n        printf(\"(child) Give me an int: \\n\");\n        scanf(\"%d\", &x);\n\n        // write the data to the pipe\n        write(fd[1], &x, sizeof(int));\n\n        // close the write end\n        close(fd[1]);\n    \n    } else {\n        //// main process\n        // close the write end\n        close(fd[1]);\n\n        int y;\n        read(fd[0], &y, sizeof(int));\n        printf(\"(parent) Received from child: %d\\n\", y);\n\n        // close the read end\n        close(fd[0]);\n    }\n\n    return 0;\n}",
    "crumbs": [
      "C Programming",
      "Piping"
    ]
  }
]