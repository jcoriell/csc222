[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "terminal/index.html",
    "href": "terminal/index.html",
    "title": "Terminal Commands",
    "section": "",
    "text": "These are basic controls that are useful for using the terminal.\nup - show previous command down - show next command tab - autocomplete ctrl + l - clear ctrl + c - cancel ctrl + r - search ctrl + d - close the terminal\nman [another command] - shows manual for other commands whoami - current user dat - date and time clear - also clears terminal\n\n\n\npwd - print working directory ls - list contents of current directory ls [directory name] - list contents of the directory mentioned ls -a - list all the files, including hidden ls -l - lists the long listing ls -al - combines the previous two ls -r - reverses the list\ncd - changes the directory cd ~ changes it to the home directory cd [directory name] - change to the mentioned directory cd / - changes to the root directory cd - - switches to the last directory\nmac: open [directory] win: start [directory] linux: xdg-open [directory]"
  },
  {
    "objectID": "terminal/index.html#terminal-commands",
    "href": "terminal/index.html#terminal-commands",
    "title": "Terminal Commands",
    "section": "",
    "text": "These are basic controls that are useful for using the terminal.\nup - show previous command down - show next command tab - autocomplete ctrl + l - clear ctrl + c - cancel ctrl + r - search ctrl + d - close the terminal\nman [another command] - shows manual for other commands whoami - current user dat - date and time clear - also clears terminal\n\n\n\npwd - print working directory ls - list contents of current directory ls [directory name] - list contents of the directory mentioned ls -a - list all the files, including hidden ls -l - lists the long listing ls -al - combines the previous two ls -r - reverses the list\ncd - changes the directory cd ~ changes it to the home directory cd [directory name] - change to the mentioned directory cd / - changes to the root directory cd - - switches to the last directory\nmac: open [directory] win: start [directory] linux: xdg-open [directory]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "linux/vm-install-mac.html",
    "href": "linux/vm-install-mac.html",
    "title": "VM Install On Mac",
    "section": "",
    "text": "Introduction\nFollow the steps below to set up an Ubuntu LTS Machine on your m series chip Mac (m1, m2, etc.)\n\n\n\n\n\n\nNot sure on chip type?\n\n\n\nClick the  icon on the menubar and select About this mac.... It should be indicated under the “Chip” category if it is an m series chip.\n\n\n\n\n\n\n\n\nIf you don’t have an m series chip…\n\n\n\nIf your mac is not an m series mac, then follow the windows install.\n\n\n\n\nPrequisites\nm series mac with macOS\n\n\nSteps\n\nIf you do not already have Homebrew, install it by opening a terminal and running the following command. Otherwise skip this step.\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nInstall multipass with the following command.\nbrew install multipass\nRun the one of the following multipass command to create an instance with the name csc222 (or whatever you want to name it).\n# for a minimal machine with default specs (1 cpu, 5G disk space, 1G memory, )\nmultipass launch 22.04 --name csc222\n# for a more powerful machine that can have space for a gui\nmultipass launch 22.04 --name csc222 --cpus 2 --memory 4G --disk 50G\nOnce the machine is finished setting up. You can access it with the following command. If you named it something other than csc222, use that in place of csc222.\nmultipass shell csc222\nOnce access to the machine is granted, create a user in the machine for yourself. The example below adds a user named josh.\nsudo adduser josh\nTo add yourself to the group of users that can use the command sudo, run the following, but use your username, not josh.\nsudo usermod -aG sudo josh\n\n\n\n(Optional) Add a GUI to your machine\n\nIn the shell on your VM, run the following commands. Note that this may take a few minutes.\nsudo apt update\nsudo apt install ubuntu-desktop xrdp\nWhile the second command is processing, download Microsoft Remote Desktop on your mac by going to the app store.\nMicrosoft Remote Desktop\nOpen another Terminal on your mac and and type multipass list to get the IP address of the machine. It should be something like 10.49.93.209 or 192.168.64.6 (not that exactly, but similar).\nOpen Microsoft RDP and add the connection."
  },
  {
    "objectID": "linux/vm-install-win.html",
    "href": "linux/vm-install-win.html",
    "title": "VM Install On Windows",
    "section": "",
    "text": "In this course you will use a Unix environment. Specifically, you should use the latest LTS release of Ubuntu to ensure you are running the same system as the instructor. If you are using Windows, follow the instructions provided below to install Virtual Box and an Ubuntu virtual machine."
  },
  {
    "objectID": "linux/vm-install-win.html#section",
    "href": "linux/vm-install-win.html#section",
    "title": "VM Install On Windows",
    "section": "",
    "text": "Install the latest version of Oracle VM VirtualBox for your system from https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html.\nDownload the Linux Ubuntu ISO (drive image) – This is what I plan to us in this class. Feel free to try out other distributions or flavors.\nhttps://www.ubuntu.com/download/desktop\nRun VirtualBox\n\n\nCreate a new VM call it something like CSC222 its type is Linux its version is Ubuntu (64-bit) If you can’t find 64-bit in the list of options, enable hardware virtualization (Google it!)\n\n\ngive it about 25% of your system’s RAM; e.g., 4 GB: 1024 MB (1 GB) 8 GB: 2096 MB (2GB) 16 GB: 4192 MB (4 GB)\ncreate a virtual hard drive (VDI) make it dynamically allocated so that it only uses up as much space as it needs make it sufficient in size (say 100 GB)\n\nClick next and then Finish.\n\nEdit the VM click on Settings click the General option select the Advanced tab set Shared Clipboard to Bidirectional\nclick the Storage option select the Empty CD/DVD under Controller: IDE click the CD icon in the Attributes section select Choose a virtual CD/DVD disk file… find the Linux Ubuntu ISO that you downloaded\nclick the Network option in the Adapter 1 tab, make it attached to Bridged Adapter select the proper network adapter to “connect” the virtual adapter to Finally, click OK\nonce the Ubuntu ISO has booted, click on the Install Ubuntu icon\nwhen prompted for the installation type, select Something else\n\nyour hard drive should be referred to as something like /dev/sda o it should be empty o if not, select partitions and remove them (that this will destroy all data on the drive!)\n\n\n\na new drive will need a new partition table\n\nfor each of the following right click the free space (with the most size) and click add\n\nthen, add the following new partitions to the free space 1: size=2048 MB type=primary location=beginning use as=ext2 mount point=/boot\n2: size=RAM size if RAM size &gt;= 4 GB; 2x RAM size otherwise; e.g., 2 GB RAM: 4 GB swap 4 GB RAM: 4 GB swap but no more than 8 GB type=primary location=end use as=swap area\n3:  size=~35% of space left\n    type=primary\n    location=beginning\n    use as=ext4\n    mount point=/\n\n\n\n\n        4:  size=~65% (the last portion of free space)\n    type=primary\n    location=beginning\n    use as=ext4\n    mount point=/home\n\n\n\n\nClick install now after creating the partitions.\n\n/boot: stores the Linux kernel images\nswap: memory swap space (also used for hibernation)\n/: stores the OS, OS configuration files, and applications\n/home: stores your files (application configuration, settings, pictures, etc)\n\nthe strategy is that updating the OS means wiping /boot, /, and swap\n/home won't be touched\nupdating then takes little time (~30 minutes)\nthe Chicago timezone is fine (for Central)\nset the user; for example: name: zak computer name: zak-csc222 username: zak password: something fairly strong  require my password to log in don’t encrypt my home folder after this it will start installing/copying files.\n\n\nreboot into Linux!\nplay around!\n\nThings to install and/or perform after installing Ubuntu\nthese all happen in the terminal click on the monitor icon at the bottom-left of the desktop or click on the “start button” (the LM logo at the bottom-left of the desktop) then, click on System and scroll to Terminal Emulator\nupdate the Linux Ubuntu system sudo apt-get update sudo apt-get upgrade sudo apt-get dist-upgrade\ninstall essential build tools (for programming) sudo apt-get install build-essential\ninstall Vim (the ubiquitous text editor) sudo apt-get install vim\ncleanup the system sudo apt-get autoremove sudo apt-get clean sudo apt-get autoclean\nset the autorun script when opening up a terminal we’ll first copy the default provided by the OS then, we ensure that we own it (more on this later) finally, we’ll load it into the current terminal\nsudo cp /etc/bash.bashrc ~/.bashrc\nsudo chown $USER:$USER ~/.bashrc\nsource ~/.bashrc\nadd my useful aliases to the autorun script (i.e., add these to ~/.bashrc) first edit via one of the following text editors: vim ~/.bashrc (text-based) nano ~/.bashrc (text-based) gedit ~/.bashrc (GUI)\nthen, add the following at the end of the file: alias c=‘clear’ alias h=‘history’ alias j=‘jobs’ alias ls=‘ls -CF –group-directories-first –color=auto $’ alias lss=’ls -Alh $’ alias m=‘more’ alias p=‘ps -ef’ alias ~=‘cd ~’\nfinally, load them into the current terminal via: source ~/.bashrc"
  },
  {
    "objectID": "linux/vm-install-win.html#partitioning-the-drive",
    "href": "linux/vm-install-win.html#partitioning-the-drive",
    "title": "VM Install On Windows",
    "section": "Partitioning the Drive",
    "text": "Partitioning the Drive\n\nNow we will add 4 partitions for /boot, swap, /, and /home to the free space. This setup will result in wiping /boot, /, and swap when updating the OS but /home will not be touched resulting in faster updates (~30 minutes).\n\n\n\nThe partition for /boot stores the Linux kernel images. Set the following parameters.\n        size    2048 MB\n        type    primary\n    location    beginning\n      use as    ext2\n mount point    /boot\n\n\n\nThe partition for the swap area is for memory swap space and hibernation.\n        size    if RAM size &gt;= 4 GB, size = RAM size.\n                otherwise, size = 2x RAM size but no more than 8 GB.\n                Ex: \n                    2 GB RAM: 4 GB swap\n                    4 GB RAM: 4 GB swap\n\n        type    primary\n    location    end\n      use as    swap area\n\n\n\n\n\n\n\nWarning\n\n\n\nThe values in the following image may not match your values\n\n\n\n\nThe partition for / stores the OS, OS configuration files, and applications.\n       size    ~35% of space left\n       type    primary\n   location    beginning\n     use as    ext4\nmount point    /\n\n\n\nThe partition for /home stores your files (application configuration, settings, pictures, etc)\n       size    ~65% (the last portion of free space)\n       type    primary\n   location    beginning\n     use as    ext4\nmount point    /home\n\n\n\nClick Install Now after creating the partitions."
  },
  {
    "objectID": "linux/vm-install-win.html#final-setup",
    "href": "linux/vm-install-win.html#final-setup",
    "title": "VM Install On Windows",
    "section": "Final Setup",
    "text": "Final Setup\n\nSet the timezone to the Chicago timezone (for Central).\nSet the user.\nExample:\n    name: zak\n    computer name: zak-csc222\n    username: zak\n    password: something fairly strong that you will remember\n\n    require my password to log in\n    don't encrypt my home folder\nAfter this it will start installing/copying files.\nReboot into Linux!\nGo to the Additional Steps."
  },
  {
    "objectID": "linux/vm-install-win.html#additional-things-to-install-or-perform",
    "href": "linux/vm-install-win.html#additional-things-to-install-or-perform",
    "title": "VM Install On Windows",
    "section": "Additional Things to Install or Perform",
    "text": "Additional Things to Install or Perform\n\nOpen the terminal by clicking on the monitor icon at the bottom-left of the desktop. Or you can click on the “start button” (the LM logo at the bottom-left of the desktop) then, click on System and scroll to Terminal Emulator.\nUpdate the Linux Ubuntu system by running the following three commands.\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get dist-upgrade\nInstall essential build tools (for programming)\nsudo apt-get install build-essential\nInstall Vim (the ubiquitous text editor)\nsudo apt-get install vim\nCleanup the system\nsudo apt-get autoremove\nsudo apt-get clean\nsudo apt-get autoclean\nSet the autorun script when opening up a terminal.\n\nWe’ll first copy the default provided by the OS.\nsudo cp /etc/bash.bashrc ~/.bashrc\nThen, we ensure that we own it (more on this later).\nsudo chown $USER:$USER ~/.bashrc\nFinally, we’ll load it into the current terminal\nsource ~/.bashrc\n\nAdd the following useful aliases to the the ./bashrc file.\n\nOpen ~/.bashrc in one of the following text editors:\n\nVim - opens in the terminal, there is a learning curve with this one\nvim ~/.bashrc\nNano - opens in the terminal, not a strong learning curve. The ^ symbol means ctrl. So ^x means to type ctrl + x\nnano ~/.bashrc\ngedit - a GUI based text editor\ngedit ~/.bashrc\n\nThe following helpful aliases can be added to the end of the file:\nalias c='clear'\nalias h='history'\nalias j='jobs'\nalias ls='ls -CF --group-directories-first --color=auto $*'\nalias lss='ls -Alh $*'\nalias m='more'\nalias p='ps -ef'\nalias ~='cd ~'\n\nFinally, load them into the current terminal via: source ~/.bashrc"
  },
  {
    "objectID": "linux/additional-steps.html",
    "href": "linux/additional-steps.html",
    "title": "Additional Steps",
    "section": "",
    "text": "Open the terminal by clicking on the monitor icon at the bottom-left of the desktop. Or you can click on the “start button” (the LM logo at the bottom-left of the desktop) then, click on System and scroll to Terminal Emulator.\nUpdate the Linux Ubuntu system by running the following three commands.\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get dist-upgrade\nInstall essential build tools (for programming)\nsudo apt-get install build-essential\nInstall Vim (the ubiquitous text editor)\nsudo apt-get install vim\nCleanup the system\nsudo apt-get autoremove\nsudo apt-get clean\nsudo apt-get autoclean\nSet the autorun script when opening up a terminal.\n\nWe’ll first copy the default provided by the OS.\nsudo cp /etc/bash.bashrc ~/.bashrc\nThen, we ensure that we own it (more on this later).\nsudo chown $USER:$USER ~/.bashrc\nFinally, we’ll load it into the current terminal\nsource ~/.bashrc\n\nAdd the following useful aliases to the the ./bashrc file.\n\nOpen ~/.bashrc in one of the following text editors:\n\nVim - opens in the terminal, there is a learning curve with this one\nvim ~/.bashrc\nNano - opens in the terminal, not a strong learning curve. The ^ symbol means ctrl. So ^x means to type ctrl + x\nnano ~/.bashrc\ngedit - a GUI based text editor\ngedit ~/.bashrc\n\nThe following helpful aliases can be added to the end of the file:\nalias c='clear'\nalias h='history'\nalias j='jobs'\nalias ls='ls -CF --group-directories-first --color=auto $*'\nalias lss='ls -Alh $*'\nalias m='more'\nalias p='ps -ef'\nalias ~='cd ~'\n\nFinally, load them into the current terminal via: source ~/.bashrc"
  },
  {
    "objectID": "linux/additional-steps.html#additional-things-to-install-or-perform",
    "href": "linux/additional-steps.html#additional-things-to-install-or-perform",
    "title": "Additional Steps",
    "section": "",
    "text": "Open the terminal by clicking on the monitor icon at the bottom-left of the desktop. Or you can click on the “start button” (the LM logo at the bottom-left of the desktop) then, click on System and scroll to Terminal Emulator.\nUpdate the Linux Ubuntu system by running the following three commands.\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get dist-upgrade\nInstall essential build tools (for programming)\nsudo apt-get install build-essential\nInstall Vim (the ubiquitous text editor)\nsudo apt-get install vim\nCleanup the system\nsudo apt-get autoremove\nsudo apt-get clean\nsudo apt-get autoclean\nSet the autorun script when opening up a terminal.\n\nWe’ll first copy the default provided by the OS.\nsudo cp /etc/bash.bashrc ~/.bashrc\nThen, we ensure that we own it (more on this later).\nsudo chown $USER:$USER ~/.bashrc\nFinally, we’ll load it into the current terminal\nsource ~/.bashrc\n\nAdd the following useful aliases to the the ./bashrc file.\n\nOpen ~/.bashrc in one of the following text editors:\n\nVim - opens in the terminal, there is a learning curve with this one\nvim ~/.bashrc\nNano - opens in the terminal, not a strong learning curve. The ^ symbol means ctrl. So ^x means to type ctrl + x\nnano ~/.bashrc\ngedit - a GUI based text editor\ngedit ~/.bashrc\n\nThe following helpful aliases can be added to the end of the file:\nalias c='clear'\nalias h='history'\nalias j='jobs'\nalias ls='ls -CF --group-directories-first --color=auto $*'\nalias lss='ls -Alh $*'\nalias m='more'\nalias p='ps -ef'\nalias ~='cd ~'\n\nFinally, load them into the current terminal via: source ~/.bashrc"
  }
]